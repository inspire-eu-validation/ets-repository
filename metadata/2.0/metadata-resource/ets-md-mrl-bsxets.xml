<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID7cceba68-e575-4429-9959-1b6b3d201b6d" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 ../../schema/model/resultSet.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/metadata/2.0</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance Class 8: INSPIRE data sets and data set series linked service metadata</label>
	<description>
		<![CDATA[This test suite examines metadata records against the requirements for metadata in INSPIRE.<br/><br/>Please report any issues or problems <a href="https://github.com/INSPIRE-MIF/helpdesk-validator/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/ds-linked-service" target="_blank">Conformance Class 8: INSPIRE data sets and data set series linked service metadata</a><br/><br/>]]>
	</description>
	<reference>../../../inspire-md-bsxets.xq</reference>
	<version>1.0.0</version>
	<author>Consortium Bilbomatica y Guadaltel</author>
	<creationDate>2023-11-16T00:00:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica y Guadaltel</lastEditor>
	<lastUpdateDate>2023-11-16T00:00:00Z</lastUpdateDate>
	<tags>
		<tag ref="EIDc6567beb-fc33-4f2e-865d-0c3ee5b3d1ae" />
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130" />
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52" />
	<ParameterList name="ETF Standard Parameters for metadata XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest" />
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute" />
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e" />
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EIDe4a95862-9cc9-436b-9fdd-a0115d342350" />
	</dependencies>
	<testModules>
		<TestModule id="EIDc3ebbc24-86b5-493e-b8e1-26eecbee05e8">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EID7cceba68-e575-4429-9959-1b6b3d201b6d" />
			<testCases>
				<TestCase id="EID31d1ca74-83a7-465f-ae31-17bfcae4dc37">
					<label>INSPIRE View service linking</label>
					<description>Test that at least two Resource Locator elements are present in the data set metadata pointing to the URLs where the related network services can be contacted. Additionally, test the presence of gmd:protocol and gmd:applicationProfile elements, paired with the defined codelist values from the INSPIRE Registry.</description>
					<parent ref="EIDc3ebbc24-86b5-493e-b8e1-26eecbee05e8" />
					<testSteps>
						<TestStep id="EIDa19542ec-e5da-4ee0-b676-64619f757a59">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID31d1ca74-83a7-465f-ae31-17bfcae4dc37" />
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0" />
							<testAssertions>
								<TestAssertion id="EID46a08ef0-8030-466b-bc7e-a357bd036db6">
									<label>Resource locator for View Service linkage</label>
									<description>
										<![CDATA[<p> Check that a Resource Locator element is present and contains the following sub-elements:
												<ul>
												<li>element gmd:URL that point to the response of the Get View Service Metadata request of the View Service.</li>
    											<li>element gmd:protocol:
												<ul><li>
											    if the element is encoded using gmx:Anchor, check that the attribute gmx:Anchor/@xlink:href points to the URI of one of the values in <a href="https://inspire.ec.europa.eu/metadata-codelist/ProtocolValue" target="_blank">Protocol values</a> codelist.</li><li>
											    if the element is encoded using gco:CharacterString, check that the text value of gco:CharacterString matches the label of one of the values in <a href="https://inspire.ec.europa.eu/metadata-codelist/ProtocolValue" target="_blank">Protocol values</a> codelist, in the language of the metadata language.</li></ul></li>
												<li>element gmd:applicationProfile:
												<ul><li>if the element is encoded using gmx:Anchor, check that the attribute gmx:Anchor/@xlink:href points to the <a href="https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/view" target="_blank">View Service</a> value of the <a href="https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/" target="_blank">Spatial data service type</a> type codelist.</li>
												<li>if the element is encoded using gco:CharacterString, check that the text value of gco:CharacterString matches the label of the <a href="https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/view" target="_blank">View Service</a> value of the <a href="https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/" target="_blank">Spatial data service type</a> codelist, in the language of the metadata language.</li></ul>
											</li>
											</ul>
											</p>
											<p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/ds-linked-service/ds-md-resource-locator" target="_blank">Data set Metadata Resource Locator</a></p>]]>
									</description>
									<parent ref="EIDa19542ec-e5da-4ee0-b676-64619f757a59" />
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
										
										let $protlinks := ('http://www.opengis.net/def/serviceType/ogc/wms','http://www.opengis.net/def/serviceType/ogc/wmts')

										let $officialLanguages := ('bg','cs','da','de','et','el','en','es','fr','hr','it','lv','lt','hu','mt','nl','pl','pt','ro','sk','sl','fi','sv')
										
										let $protocolUrl := 'https://inspire.ec.europa.eu/metadata-codelist/ProtocolValue/ProtocolValue'
										let $protocolLabels := (
											for $lang in $officialLanguages
											let $url := $protocolUrl || '.' || $lang || '.xml'
											return try {
										    	fn:doc($url)/*:metadata-codelist/*:containeditems/*:value[@id = $protlinks]/*:label
											} catch * {
												error((), $url || ' cannot be accessed.')
											}
										)
										let $protLabels := ($protocolLabels, 'wms', 'WMS', 'wmts', 'WMTS')										
										

										let $sdslinks := ('http://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/view')
										let $sdsUrl := 'https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/SpatialDataServiceType'
										let $sdsLabels := (
											for $lang in $officialLanguages
											let $url := $sdsUrl || '.' || $lang || '.xml'
											return try {
										    	fn:doc($url)/*:metadata-codelist/*:containeditems/*:value[@id = $sdslinks]/*:label
											} catch * {
												error((), $url || ' cannot be accessed.')
											}
										)
										
										let $path:= $records/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource[exists(gmd:protocol) and (gmd:protocol/gmx:Anchor/@xlink:href= $protlinks or (gmd:protocol/gco:CharacterString/text() = $protLabels)) and exists(gmd:applicationProfile) and (gmd:applicationProfile/gmx:Anchor/@xlink:href= $sdslinks or (gmd:applicationProfile/gco:CharacterString/text() = $sdsLabels))]


										let $messages := for $record in $path
															let $linkage :=
																for $url in $record/gmd:linkage/gmd:URL
																	return $url

															let $map := local:check-resource-uris($linkage, 30, true())
															let $invalid_urls :=
																for $href in $linkage
																	let $url := string($href)
																	let $validuri := map:get($map, $url)
																	return
																		if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
																			$url
																		else ()
								
															let $linkagecheck :=
															if (count ($linkage) = 0) then
																local:addMessage('TR.missingElement',  map {'filename': local:filename($record), 'featureType':local-name($record), 'gmlid': string($record/@*:id), 'property': 'linkage'})
															else if (count($invalid_urls) > 0) then
																local:addMessage('TR.brokenLink', map {'filename': local:filename($record), 'featureType':local-name($record), 'gmlid': string($record/@*:id), 'property': 'linkage', 'value': string-join($invalid_urls, ',')}) 
															else if (not(contains($linkage, 'request=GetCapabilities') and contains($linkage, 'service=WMS'))) then
																local:addMessage('TR.manual.resourceLocatorURL', map {'filename': local:filename($record), 'featureType':local-name($record), 'gmlid': $record/@*:id}) 
															else ()
															return $linkagecheck
										let $messagesfinal := if (count($path)=0) then
															local:addMessage('TR.vsmissingLinkage',  map {'filename': local:filename($records), 'featureType':local-name($records), 'gmlid': string($records/@*:id)})
														else if (count($messages) > 0) then
															$messages
														else() 
								
									return			
									(if ($messagesfinal and not($messagesfinal/@ref = ('TR.manual.resourceLocatorURL'))) then 'FAILED' 
									   else if($messagesfinal and $messagesfinal/@ref = ('TR.manual.resourceLocatorURL')) then 'PASSED_MANUAL' 
									   else 'PASSED',
									 local:error-statistics('TR.featuresWithErrors', count(fn:distinct-values($messagesfinal//etf:argument[@token='gmlid']/text()))),
									 $messagesfinal)																									
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a" />
									<translationTemplates>
										<translationTemplate ref="TR.missingElement" />
										<translationTemplate ref="TR.brokenLink" />
										<translationTemplate ref="TR.manual.resourceLocatorURL" />
										<translationTemplate ref="TR.vsmissingLinkage" />
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID6b816a7f-6d5b-4e21-b711-8fcb25f499c2">
									<label>Resource locator for Download service linking</label>
									<description>
										<![CDATA[<p> Check that a Resource Locator element is present and contains the following sub-elements:
												<ul>
												<li>element gmd:URL that point to the response of the Get Download Service Metadata request of the Download Service.</li>
    											<li>element gmd:protocol:
												<ul><li>
											    if the element is encoded using gmx:Anchor, check that the attribute gmx:Anchor/@xlink:href points to the URI of one of the values in <a href="https://inspire.ec.europa.eu/metadata-codelist/ProtocolValue" target="_blank">Protocol values</a> codelist.</li><li>
											    if the element is encoded using gco:CharacterString, check that the text value of gco:CharacterString matches the label of one of the values in <a href="https://inspire.ec.europa.eu/metadata-codelist/ProtocolValue" target="_blank">Protocol values</a> codelist, in the language of the metadata language.</li></ul></li>
												<li>element gmd:applicationProfile:
												<ul><li>if the element is encoded using gmx:Anchor, check that the attribute gmx:Anchor/@xlink:href points to the <a href="https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/download" target="_blank">Download Service</a> value of the <a href="https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/" target="_blank">Spatial data service type</a> type codelist.</li>
												<li>if the element is encoded using gco:CharacterString, check that the text value of gco:CharacterString matches the label of the <a href="https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/download" target="_blank">Download Service</a> value of the <a href="https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/" target="_blank">Spatial data service type</a> codelist, in the language of the metadata language.</li></ul>
											</li>
											</ul>
											</p>
											<p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/ds-linked-service/ds-md-resource-locator" target="_blank">Data set Metadata Resource Locator</a></p>]]>
									</description>
									<parent ref="EIDa19542ec-e5da-4ee0-b676-64619f757a59" />
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
										
										let $protlinks := ('https://tools.ietf.org/html/rfc4287','http://www.opengis.net/def/serviceType/ogc/wcs','http://www.opengis.net/def/serviceType/ogc/wfs','http://www.opengis.net/def/serviceType/ogc/sos','http://www.opengis.net/def/docs/17-069r3')

										let $officialLanguages := ('bg','cs','da','de','et','el','en','es','fr','hr','it','lv','lt','hu','mt','nl','pl','pt','ro','sk','sl','fi','sv')
										
										let $protocolUrl := 'https://inspire.ec.europa.eu/metadata-codelist/ProtocolValue/ProtocolValue'
										let $protocolLabels := (
											for $lang in $officialLanguages
											let $url := $protocolUrl || '.' || $lang || '.xml'
											return try {
										    	fn:doc($url)/*:metadata-codelist/*:containeditems/*:value[@id = $protlinks]/*:label
											} catch * {
												error((), $url || ' cannot be accessed.')
											}
										)
										let $protLabels := ($protocolLabels, 'atom', 'ATOM', 'OGC API - Features', 'OGC API - Features - Part 1: Core', 'wfs', 'WFS', 'wcs', 'WCS', 'sos', 'SOS')										
										

										let $sdslinks := ('http://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/download')
										let $sdsUrl := 'https://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType/SpatialDataServiceType'
										let $sdsLabels := (
											for $lang in $officialLanguages
											let $url := $sdsUrl || '.' || $lang || '.xml'
											return try {
										    	fn:doc($url)/*:metadata-codelist/*:containeditems/*:value[@id = $sdslinks]/*:label
											} catch * {
												error((), $url || ' cannot be accessed.')
											}
										)
										
										let $path:= $records/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource[exists(gmd:protocol) and (gmd:protocol/gmx:Anchor/@xlink:href= $protlinks or (gmd:protocol/gco:CharacterString/text() = $protLabels)) and exists(gmd:applicationProfile) and (gmd:applicationProfile/gmx:Anchor/@xlink:href= $sdslinks or (gmd:applicationProfile/gco:CharacterString/text() = $sdsLabels))]


										let $messages := for $record in $path
															let $linkage :=
																for $url in $record/gmd:linkage/gmd:URL
																	return $url

															let $map := local:check-resource-uris($linkage, 30, true())
															let $invalid_urls :=
																for $href in $linkage
																	let $url := string($href)
																	let $validuri := map:get($map, $url)
																	return
																		if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
																			$url
																		else ()
								
															let $linkagecheck :=
															if (count ($linkage) = 0) then
																local:addMessage('TR.missingElement',  map {'filename': local:filename($record), 'featureType':local-name($record), 'gmlid': string($record/@*:id), 'property': 'linkage'})
															else if (count($invalid_urls) > 0) then
																local:addMessage('TR.brokenLink', map {'filename': local:filename($record), 'featureType':local-name($record), 'gmlid': string($record/@*:id), 'property': 'linkage', 'value': string-join($invalid_urls, ',')}) 
															else if (not(contains($linkage, 'request=GetCapabilities') and contains($linkage, 'service=WFS'))) then
																local:addMessage('TR.manual.resourceLocatorURL', map {'filename': local:filename($record), 'featureType':local-name($record), 'gmlid': $record/@*:id}) 
															else ()
															return $linkagecheck
										let $messagesfinal := if (count($path)=0) then
															local:addMessage('TR.dsmissingLinkage',  map {'filename': local:filename($records), 'featureType':local-name($records), 'gmlid': string($records/@*:id)})
														else if (count($messages) > 0) then
															$messages
														else() 
								
									return			
									(if ($messagesfinal and not($messagesfinal/@ref = ('TR.manual.resourceLocatorURL'))) then 'FAILED' 
									   else if($messagesfinal and $messagesfinal/@ref = ('TR.manual.resourceLocatorURL')) then 'PASSED_MANUAL' 
									   else 'PASSED',
									 local:error-statistics('TR.featuresWithErrors', count(fn:distinct-values($messagesfinal//etf:argument[@token='gmlid']/text()))),
									 $messagesfinal)																									
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a" />
									<translationTemplates>
										<translationTemplate ref="TR.missingElement" />
										<translationTemplate ref="TR.brokenLink" />
										<translationTemplate ref="TR.manual.resourceLocatorURL" />
										<translationTemplate ref="TR.dsmissingLinkage" />
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
