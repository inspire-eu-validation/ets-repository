<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
id="EID8f869e23-c9e9-4e86-8dca-be30ff421229" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 ../../schema/model/resultSet.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/metadata/2.0</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance Class 3: INSPIRE Spatial Data Service baseline metadata.</label>
	<description><![CDATA[This test suite examines metadata records against the requirements for metadata in INSPIRE.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/inspire-eu-validation/community/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion.<br/><br/>
There is a general limitation in all assertions that polymorphism and containment by reference (see the <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/common/READMEd#ref_TG_MD" target="_blank">Technical Guidance</a>, sub-clauses A.3, A.4 and A.5) are not supported. However, the current Abstract Test Suite does not support polymorphism and references either (all XPath expressions do not support polymorhism or references; in addition, schema validation is only executed against the ISO/OGC schemas without extensions). It is therefore unclear if this is really a limitation or if the sections in the technical guidance are outdated.
<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/sds" target="_blank">Conformance Class 3: 'INSPIRE Spatial Data Service baseline metadata.'</a>
<br/><br/>
Pre-requisite conformance classes: none]]></description>
	<reference>../../../inspire-md-bsxets.xq</reference>
		<version>0.1.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2018-06-30T00:00:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2018-08-30T20:45:00Z</lastUpdateDate>
	<tags>
		<tag ref="EIDc6567beb-fc33-4f2e-865d-0c3ee5b3d1ae"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for metadata XML test objects">
		<!-- TODO clean up, currently disabled due to open issues with schema validation
		<parameter name="encoding" required="false">
			<defaultValue>CSW ISO AP 1.0.0</defaultValue>
			<description ref="TR.metadataEncoding"/>
			<allowedValues>^(CSW ISO AP 1\.0\.0|ISO/TS 19139)$</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="Schema_file" required="false">
			<description ref="TR.metadataSchema"/>
			<allowedValues>^(apiso\.xsd|gmd\.xsd|apiso-csw\.xsd|gmd-csw\.xsd)?$</allowedValues>
			<type>string</type>
		</parameter>
		-->
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID59692c11-df86-49ad-be7f-94a1e1ddd8da"/>
	</dependencies>
	<testModules>
		<TestModule id="EIDf4c1d9b5-9a0b-4730-8be9-cf77700dfd90">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EID8f869e23-c9e9-4e86-8dca-be30ff421229"/>
			<testCases>
			
				<TestCase id="EID2e4c8143-e461-4699-8e7b-f71dd7067283">
					<label>General Metadata</label>
					<description>Execute tests that apply for all services metadata records on elements that are directly child elements of the root node of the XML document: MD_Metadata node.
					</description>
					<parent ref="EIDf4c1d9b5-9a0b-4730-8be9-cf77700dfd90"/>
					<testSteps>
						<TestStep id="EIDf08e456f-fad9-46c6-ab14-69a2eeb56646">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID2e4c8143-e461-4699-8e7b-f71dd7067283"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
							
								<TestAssertion id="EID646e587c-c43e-4643-b955-7228a6d3d054">
									<label>md sds 3.1: Resource Type</label>
									<description>
									<![CDATA[<p>Test that a resource type is provided as service.</p>
                                    <p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/sds/resource-type" target="_blank">Resource Type</a></p>]]>									
									</description>
									<parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
 <!-- DONE -->
let $listvalues := ('service')
let $recordsWithErrors := $records[not(gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = $listvalues)][position() le $limitErrors]
let $recordsToInspect := $records[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = $listvalues][position() le $limitErrors]
let $messages :=
	if ($recordsWithErrors) then
		local:addMessage('TR.isNotService', map { 'filename': local:filename($recordsWithErrors), 'count': string(count($recordsWithErrors)) })
	else
		for $record in $recordsToInspect
			let $level := $record/gmd:hierarchyLevel/gmd:MD_ScopeCode
			let $rid := $record/gmd:fileIdentifier/*/text()
			let $levelname := $record/gmd:hierarchyLevelName
			return
			if (count($level) != 1) then
				local:addMessage('TR.wrongHierarchyLevelMultiplicity', map { 'filename': local:filename($record), 'id': $rid, 'count': string(count($level)) })
			else if(count($levelname) = 0) then
				local:addMessage('TR.wrongHierarchyLevelNameMultiplicity', map { 'filename': local:filename($record), 'id': $rid, 'count': string(count($levelname)) })
            else if (not(string-length($levelname/gco:CharacterString/text()) != 0 or string-length($levelname/gmx:Anchor/text()) != 0)) then
				local:addMessage('TR.emptyHierarchyLevelName', map { 'filename': local:filename($record), 'id': $rid })
			else()
return
(if ($messages) then 'FAILED' else 'PASSED',
 	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)
							  </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.isNotService"/>
										<translationTemplate ref="TR.wrongHierarchyLevelMultiplicity"/>
										<translationTemplate ref="TR.wrongHierarchyLevelNameMultiplicity"/>
										<translationTemplate ref="TR.invalidHierarchyLevelName"/>
										<translationTemplate ref="TR.emptyHierarchyLevelName"/>
									</translationTemplates>
								</TestAssertion>

							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EIDc07f4114-114f-442c-9400-1600aebfb9da">
					<label>Identification</label>
					<description>Execute tests that apply for all services metadata records on elements that are child elements of the section of the XML document: Identification Info (property of the gmd:MD_Metadata element). This section contains information specific to the services.
					</description>
					<parent ref="EIDf4c1d9b5-9a0b-4730-8be9-cf77700dfd90"/>
					<testSteps>
						<TestStep id="EIDa389f1a0-803b-4748-ad13-3fc4a3bb9d73">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDc07f4114-114f-442c-9400-1600aebfb9da"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
							
								<TestAssertion id="EIDe8cb1dee-640a-4cfe-977f-b3dd93485fbd">
									<label>md sds 3.2: Service Identification Element</label>
									<description>
									<![CDATA[<p>Test that a resource identifier identifying the resource is given.</p>
									<p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/sds/service-identification-element" target="_blank">Service Identification Element</a></p>]]>									
									</description>
									<parent ref="EIDa389f1a0-803b-4748-ad13-3fc4a3bb9d73"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
 <!-- DONE -->
let $messages :=
	(for $record in $records
		let $srvIdElements := $record/gmd:identificationInfo[1]/srv:SV_ServiceIdentification
		let $rid := $record/gmd:fileIdentifier/*/text()
		return
		if (not($srvIdElements)) then
			local:addMessage('TR.serviceIdentificationNotFound', map { 'filename': local:filename($record), 'id': $rid, 'count': string(count($srvIdElements)) })
		else if (count($srvIdElements) != 1) then
			local:addMessage('TR.wrongServiceIdentificationMultiplicity', map { 'filename': local:filename($record), 'id': $rid, 'count': string(count($srvIdElements)) })
		else()
	)[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)
							  </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.serviceIdentificationNotFound"/>
										<translationTemplate ref="TR.wrongServiceIdentificationMultiplicity"/>
									</translationTemplates>
								</TestAssertion>
								
								<TestAssertion id="EID2b2b468e-297c-4bb4-81b0-7f63898dfa8c">
									<label>md sds 3.3: Spatial Resolution</label>
									<description>
									<![CDATA[<p>Test that a spatial resolution restriction is provided being mandatory when there is a restriction on the spatial resolution for the service.</p>
                                    <p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/sds/spatial-resolution" target="_blank">Spatial Resolution</a></p>]]>									
									</description>
									<parent ref="EIDa389f1a0-803b-4748-ad13-3fc4a3bb9d73"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $messages := 
		for $record in $records
		let $rid := $record/gmd:fileIdentifier/*/text()
		return local:addMessage('TR.manualCheckSpatialResolution', map { 'filename': local:filename($record), 'id': $rid })

return
(if ($messages) then 'PASSED_MANUAL' else 'PASSED',
 	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)
							  </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.manualCheckSpatialResolution"/>
									</translationTemplates>
								</TestAssertion>

								<TestAssertion id="EID3dbd5b9f-5bd7-4033-a921-6f51a032e383">
									<label>md sds 3.4: Spatial Data Service Category</label>
									<description>
									<![CDATA[<p>Test that a Spatial Data Service category or subcategory is given.</p>
									<p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/sds/sds-category" target="_blank">SDS Category Keywords</a></p>]]>									
									</description>
									<parent ref="EIDa389f1a0-803b-4748-ad13-3fc4a3bb9d73"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
<!-- DONE -->
let $validCategoriesUrl := fn:doc('http://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceCategory/SpatialDataServiceCategory.en.xml')/*:metadata-codelist/*:containeditems/*:value/@id
let $validCategories := for $x in $validCategoriesUrl return fn:substring($x, 74)
let $messages :=
	(for $record in $records
		let $keywordElements := $record/gmd:identificationInfo[1]/srv:SV_ServiceIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword
		let $rid := $record/gmd:fileIdentifier/*/text()
		return
		if (not($keywordElements)) then
			local:addMessage('TR.keywordElementNotFound', map { 'filename': local:filename($record), 'id': $rid})
		else if(not($keywordElements/gmx:Anchor/@xlink:href)) then
			local:addMessage('TR.AnchorNotFound', map { 'filename': local:filename($record), 'id': $rid})
		else
			let $emptyKeywordsText :=
				(for $keyword in $keywordElements
					return
						if (fn:exists($keyword/gco:CharacterString) and not(string-length($keyword/gco:CharacterString/text()) != 0)) then $keyword
						else if(fn:exists($keyword/gmx:Anchor) and not(string-length($keyword/gmx:Anchor/text()) != 0)) then $keyword
						else ())
			let $totalAnchor :=
				(for $keyword in $keywordElements
					return $keyword/gmx:Anchor/@xlink:href)
			let $invalidAnchor :=
				(for $keyword in $keywordElements
					return
						if (not($keyword/gmx:Anchor/@xlink:href = $validCategoriesUrl)) then $keyword/gmx:Anchor/@xlink:href
						else ())
			return
				if (not(count($emptyKeywordsText) = 0)) then
					local:addMessage('TR.missingValidKeywordElement', map { 'filename': local:filename($record), 'id': $rid, 'found':count($emptyKeywordsText)})
				else if (count($invalidAnchor) = count($totalAnchor)) then
					(for $Anchor in $invalidAnchor
						return 
							local:addMessage('TR.missingValidKeywordAnchor', map { 'filename': local:filename($record), 'id': $rid, 'anchor': string($Anchor)}))
				else()
	)[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)
							  </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.keywordElementNotFound"/>
										<translationTemplate ref="TR.missingValidKeywordElement"/>
									</translationTemplates>
								</TestAssertion>

								<TestAssertion id="EID5189e7ff-121d-48d1-a000-8d327bd6350a">
									<label>md sds 3.5: Spatial Data Service Type</label>
									<description>
									<![CDATA[<p>Test that a Spatial Data Service category or subcategory is given.</p>
									<p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/sds/sds-type" target="_blank">SDS Type</a></p>]]>									
									</description>
									<parent ref="EIDa389f1a0-803b-4748-ad13-3fc4a3bb9d73"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
<!-- DONE -->
let $messages :=
	let $spatialDataServiceTypeCodeListURL := 'http://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType'
	let $codes := ('discovery','view','download','transformation','invoke','other')
	return
	(for $record in $records
		let $rid := $record/gmd:fileIdentifier/*/text()
		let $type := $record/gmd:identificationInfo[1]/srv:SV_ServiceIdentification/srv:serviceType/gco:LocalName/text()
		return
		if (not(count($type) = 1)) then
			local:addMessage('TR.exactlyOneServiceType', map { 'filename': local:filename($record), 'id': $rid, 'count': string(count($type)) })
		else if(not($type = $codes)) then
			local:addMessage('TR.noTypeFromSpatialDataServiceType',  map { 'filename': local:filename($record), 'id': $rid, 'url': $spatialDataServiceTypeCodeListURL, 'type': $type })
		else ()
	)[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)
							  </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.exactlyOneServiceType"/>
										<translationTemplate ref="TR.noTypeFromSpatialDataServiceType"/>
										<translationTemplate ref="TR.wrongCodeSpaceFromSpatialDataServiceType"/>
									</translationTemplates>
								</TestAssertion>

								<TestAssertion id="EID8c227df0-8692-45ec-a734-26bd7d0e6752">
									<label>md sds 3.6: Coupled Resource</label>
									<description>
									<![CDATA[<p>Test that an operatesOn element refers to the target spatial data set(s) of the service, being implemented by reference.</p>
									<p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/sds/coupled-resource" target="_blank">Coupled Resource</a></p>]]>									
									</description>
									<parent ref="EIDa389f1a0-803b-4748-ad13-3fc4a3bb9d73"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
<!-- DONE -->
let $urls := $records/gmd:identificationInfo/srv:SV_ServiceIdentification/srv:operatesOn/@xlink:href
let $map := local:check-resource-uris($urls, 30, true())

let $messages :=
	(for $record in $records
		let $rid := $record/gmd:fileIdentifier/*/text()
		let $operatesOnNodes := $record/gmd:identificationInfo/srv:SV_ServiceIdentification/srv:operatesOn
		for $operatesOn in $operatesOnNodes
		        let $urls := $operatesOn/@xlink:href
		        return
			if (not($urls)) then
				local:addMessage('TR.operatesOnWithoutXlink', map { 'filename': local:filename($record), 'id': $rid })
			else
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
				if ($validuri = 'notHTTP') then
					local:addMessage('TR.urlNotHttp', map { 'filename': local:filename($record), 'id': $rid, 'url': $url })
				else if ($validuri = 'idNotFound') then
					local:addMessage('TR.idNotFound', map { 'filename': local:filename($record), 'id': $rid, 'url': $url })
				else if (starts-with($validuri, 'EXCEPTION')) then
					local:addMessage('TR.resourceNotAccessibleException', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'message': substring-after($validuri, 'EXCEPTION ') })
				else if (matches($validuri,'^\d{3}$')) then
					local:addMessage('TR.resourceNotAccessible', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'status' : $validuri })
				else if (starts-with($validuri,'text/xml') or starts-with($validuri,'application/xml')) then
					try { 
						let $root := fn:doc($url)/element()
						let $validCodes := ('dataset','series')
						return
						if ( not($root[//gmd:hierarchyLevel[1]/gmd:MD_ScopeCode/@codeListValue = $validCodes]) ) then 
							local:addMessage('TR.operatesOnWithoutDatasetOrSeriesRecord', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'hierarchyLevel': data($root//gmd:hierarchyLevel[1]/gmd:MD_ScopeCode/@codeListValue) }) 
						else ()
					} catch * { 
						local:addMessage('TR.resourceNotAccessibleException', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'message': $err:description })
					}
				else
					local:addMessage('TR.unknownResourceType', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'mediaType': $validuri })
	)[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)
							  </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.operatesOnWithoutXlink"/>
										<translationTemplate ref="TR.urlNotHttp"/>
										<translationTemplate ref="TR.idNotFound"/>
										<translationTemplate ref="TR.resourceNotAccessibleException"/>
										<translationTemplate ref="TR.resourceNotAccessible"/>
										<translationTemplate ref="TR.operatesOnWithoutDatasetOrSeriesRecord"/>
										<translationTemplate ref="TR.unknownResourceType"/>
										
									</translationTemplates>
								</TestAssertion>

							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EID9785c369-3252-475f-8457-0f563fcf08de">
					<label>Distribution</label>
					<description>Execute tests that apply for all services metadata records on elements that are child elements of the section of the XML document: Distribution Information (property of the gmd:MD_Metadata element). This section contains information about who makes a resource available and how to get it.</description>
					<parent ref="EIDf4c1d9b5-9a0b-4730-8be9-cf77700dfd90"/>
					<testSteps>
						<TestStep id="EIDfbfd8ade-195d-4d9d-aac3-28350b53387b">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID9785c369-3252-475f-8457-0f563fcf08de"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
							
								<TestAssertion id="EIDc7d8d79c-7abe-4cdc-a085-cfb1acc961f0">
									<label>md sds 3.7: Resource Locator</label>
									<description>
									<![CDATA[<p>Test that a resource locator linking to the described Spatial Data Service is given if online access is available. If not, tests that is provided an URL pointing to an online resource providing additional information of the service, if available.</p>
									<p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/sds/resource-locator" target="_blank">Resource Locator</a></p>]]>									
									</description>
									<parent ref="EIDfbfd8ade-195d-4d9d-aac3-28350b53387b"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
<!-- DONE -->								
let $messages := 	
	(for $record in $records
		let $rid := $record/gmd:fileIdentifier/*/text()
		let $distributionInfoElements := $record/gmd:distributionInfo/gmd:MD_Distribution
		return
		(for $distribution in $distributionInfoElements
			let $urls := $distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL/text()
			return
			if (not($urls)) then
				local:addMessage('TR.linkageWithoutURL', map { 'filename': local:filename($record), 'id': $rid })
			else ()
		)[position() le $limitErrors]
	)[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)
							  </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.linkageWithoutURL"/>
									</translationTemplates>
								</TestAssertion>

							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EIDbfeab029-ff80-42a5-a761-86b590839fbf">
					<label>Data Quality</label>
					<description>Execute tests that apply for all services metadata records on elements that are child elements of the section of the XML document: Data Quality Information (property of the gmd:MD_Metadata element). This section contains information specific to the quality and lineage (including processing steps and sources) of the resource.</description>
					<parent ref="EIDf4c1d9b5-9a0b-4730-8be9-cf77700dfd90"/>
					<testSteps>
						<TestStep id="EIDe1fd463f-2056-4aa1-8c30-c625ad98a60c">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDbfeab029-ff80-42a5-a761-86b590839fbf"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
							
								<TestAssertion id="EID34c2fbc3-9b47-4aab-9681-f5d2839ecf7b">
									<label>md sds 3.8: Only One Data Quality Element</label>
									<description>
									<![CDATA[<p>Test that a resource locator linking to the described Spatial Data Service is given if online access is available. If not, tests that is provided an URL pointing to an online resource providing additional information of the service, if available.</p>
									<p>More information: <a href="http://inspire.ec.europa.eu/id/ats/metadata/2.0/sds/only-one-dq-element" target="_blank">Only One Data Quality Info Element</a></p>]]>									
									</description>
									<parent ref="EIDe1fd463f-2056-4aa1-8c30-c625ad98a60c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
<!-- DONE -->
let $messages := 	
	(for $record in $records
		let $rid := $record/gmd:fileIdentifier/*/text()
		let $dataQuality := $record/gmd:dataQualityInfo/gmd:DQ_DataQuality
		let $codeListValue := $record[gmd:dataQualityInfo[1]/gmd:DQ_DataQuality/gmd:scope/gmd:DQ_Scope/gmd:level/gmd:MD_ScopeCode/@codeListValue = 'service']
		let $scopeDescription := $record/gmd:dataQualityInfo[1]/gmd:DQ_DataQuality/gmd:scope/gmd:DQ_Scope/gmd:levelDescription/gmd:MD_ScopeDescription/gmd:other
		return
		if ( count($dataQuality) != 1 ) then
			local:addMessage('TR.oneDataQuality', map { 'filename': local:filename($record), 'id': $rid })
		else if ( not($codeListValue) ) then
			local:addMessage('TR.invalidCodeListValueSDS', map { 'filename': local:filename($record), 'id': $rid })
        else if (not($scopeDescription) or not(string-length($scopeDescription/gco:CharacterString/text()) != 0 or string-length($scopeDescription/gmx:Anchor/text()) != 0)) then
			local:addMessage('TR.missingScopeDescription', map { 'filename': local:filename($record), 'id': $rid })
		else()
	)[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)
							  </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.oneDataQuality"/>
										<translationTemplate ref="TR.invalidCodeListValueSDS"/>
										<translationTemplate ref="TR.missingScopeDescription"/>
										<translationTemplate ref="TR.invalidScopeDescription"/>
									</translationTemplates>
								</TestAssertion>

							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
