<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EIDe0956e54-bac0-4273-ba55-150b5cf37627" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-pf/pf-as</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Application schema, Production and Industrial Facilities</label>
	<description><![CDATA[This test suite examines requirements associated with the application schema.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/inspire-eu-validation/community/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-pf/master/pf-as" target="_blank">Conformance Class 'Application schema, Production and Industrial Facilities'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data-pf/master/pf-gml" target="_blank">Conformance Class 'GML application schemas, Production and Industrial Facilities'</a></li></ul>]]></description>
	<reference>../../inspire-noggeo-bsxets.xq</reference>
	<version>0.1.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2020-12-15T15:00:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2020-12-15T15:00:00Z</lastUpdateDate>
	<tags>
		<tag ref="EID3b94dcaf-7eb8-466f-82ed-7dcd3e362b94"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID0c7efa5c-1628-4ee6-a670-726e7ebf8feb"/>
	</dependencies>	
	<testModules>
		<TestModule id="EID0e1b7fe4-1ae6-449b-b099-140ad8f75ebe">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EIDe0956e54-bac0-4273-ba55-150b5cf37627"/>
			<testCases>
				<TestCase id="EID6dc8e626-c962-4dae-b31a-1c4f8428df24">
					<label>Code list values</label>
					<description>Verify whether all attributes whose value type is a code list take the values set out therein.</description>
					<parent ref="EID0e1b7fe4-1ae6-449b-b099-140ad8f75ebe"/>
					<testSteps>
						<TestStep id="EIDcf22976e-8862-473a-81ba-6a9f03d6e124">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID6dc8e626-c962-4dae-b31a-1c4f8428df24"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EIDdc6f203e-a410-4ed6-b900-5e25c4e85862">
									<label>pf-as.a.1: Technique</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-pf/master/pf-as/code-list-values#technique'>technique</a> elements has a xlink:href attribute pointing to a <a href = 'http://inspire.ec.europa.eu/id/ats/data-pf/master/pf-as/code-list-values#predefinedValue'>pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule. 
									<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): Types for the Exchange and Classification of Spatial Objects.  For the exchange and classification of spatial objects from data sets meeting the conditions laid down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): Types for the Exchange and Classification of Spatial Objects. The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code Lists and Enumerations. Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and
narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and
additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code Lists and Enumerations. Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Code Lists and Enumerations. Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Code Lists and Enumerations. Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-pf/master/pf-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_PF_v3.0.pdf">INSPIRE Data Specification on Production and Industrial Facilities, A.1.3</a>]]></description>
									<parent ref="EIDcf22976e-8862-473a-81ba-6a9f03d6e124"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
	let $codelist := 'http://inspire.ec.europa.eu/codelist/PollutionAbatementTechniqueValue'
	let $codelisturl := 'https://inspire.ec.europa.eu/codelist/PollutionAbatementTechniqueValue/PollutionAbatementTechniqueValue.en.xml'
	let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
	let $property_string := 'technique'


	let $features_selected_PIP := $features[self::pf:ProductionInstallationPart]
	let $features_selected_PI := $features[self::pf:ProductionInstallation]
	let $features_selected_PF := $features[self::pf:ProductionFacility]
	let $list_PIP := $features_selected_PIP/pf:technique/@xlink:href
	let $list_PI := $features_selected_PI/pf:groupedInstallationPart/pf:ProductionInstallationPart/pf:technique/@xlink:href
	let $list_PF := $features_selected_PF/pf:groupedInstallation/pf:ProductionInstallation/pf:groupedInstallationPart/pf:ProductionInstallationPart/pf:technique/@xlink:href
	let $list := ( $list_PIP, $list_PI, $list_PF )

	let $messages_PIP :=
		for $feature in $features_selected_PIP
			let $envDom := $feature/pf:technique
			let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()
			return
				if (not(exists($envDom))) then
					local:addMessage('TR.missingElementPIF',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
				else if (count($envDom) > 1) then
					local:addMessage('TR.wrongMultiplicityPIF',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': '1', 'count': count($envDom)})
				else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
					local:addMessage('TR.manual.reviewCodeListValuePIF',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'count': count($iterlist)-1 }) 
				else ()

	let $messages_PI :=
		for $feature in $features_selected_PI/pf:groupedInstallationPart/pf:ProductionInstallationPart
			let $envDom := $feature/pf:technique
			let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()
			return
				if (not(exists($envDom))) then
					local:addMessage('TR.missingElementPIF',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
				else if (count($envDom) > 1) then
					local:addMessage('TR.wrongMultiplicityPIF',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '1', 'count': count($envDom)})
				else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
					local:addMessage('TR.manual.reviewCodeListValuePIF',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'count': count($iterlist)-1 }) 
				else ()

	
	let $messages_PF :=
		for $feature in $features_selected_PF/pf:groupedInstallation/pf:ProductionInstallation/pf:groupedInstallationPart/pf:ProductionInstallationPart
			let $envDom := $feature/pf:technique
			let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()
			return
				if (not(exists($envDom))) then
					local:addMessage('TR.missingElementPIF',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string}) 
				else if (count($envDom) > 1) then
					local:addMessage('TR.wrongMultiplicityPIF',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '1', 'count': count($envDom)})
				else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
					local:addMessage('TR.manual.reviewCodeListValuePIF',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'count': count($iterlist)-1 }) 
				else ()

	let $combined_messages := ($messages_PIP, $messages_PI, $messages_PF)

	return
	(if ($combined_messages and not($combined_messages/@ref = ('TR.manual.reviewCodeListValuePIF'))) then 'FAILED' 
	else if($combined_messages/@ref = ('TR.manual.reviewCodeListValuePIF') and not($combined_messages/@ref != ('TR.manual.reviewCodeListValuePIF'))) then 'PASSED_MANUAL' 
	else if($combined_messages and $combined_messages/@ref != ('TR.manual.reviewCodeListValuePIF')) then 'FAILED' 
	else 'PASSED',
	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
	$combined_messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementPIF"/>
										<translationTemplate ref="TR.wrongMultiplicityPIF"/>
										<translationTemplate ref="TR.missingAttributePIF"/>
										<translationTemplate ref="TR.manual.reviewCodeListValuePIF"/>
									</translationTemplates>
								</TestAssertion>																
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>

				
				<TestCase id="EIDd4859e5d-1794-44f6-a2b3-88c466940078">
					<label>Constraints</label>
					<description>Verify that the features provided in the dataset adhere to the constraints specified in the INSPIRE application schema.</description>
					<parent ref="EID0e1b7fe4-1ae6-449b-b099-140ad8f75ebe"/>
					<testSteps>
						<TestStep id="EIDf7932163-8752-42cf-9c50-7981fce16169">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDd4859e5d-1794-44f6-a2b3-88c466940078"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EIDcd5eb847-70f0-4842-a442-a2c0270311d3">
									<label>pf-as.b.1: Geometry is provided if building is not present</label>
									<description><![CDATA[Check that the <a href="http://inspire.ec.europa.eu/id/ats/data-pf/master/pf-as/constraints#geometry">geometry</a> is provided for the ProductionBuilding feature type if the <a href="http://inspire.ec.europa.eu/id/ats/data-pf/master/pf-as/constraints#building">building</a> property is empty. (i.e. Geometry must be provided only in case that not linkage with a building schema entity was stablished).<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/pf-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_PF_v3.0.pdf">INSPIRE Data Specification on Production and Industrial Facilities, A.1.7</a>]]></description>
									<parent ref="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_geometry := 'geometry'
let $property_building := 'building'
let $features_selected_pb := $features[self::pf:ProductionBuilding]

let $messages_pb := 
	for $feature in $features_selected_pb
		let $geometry := $feature/pf:geometry
		let $building := $feature/pf:building
		
		let $urls := 
		for $x in $building/@xlink:href
			return
			if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
				()
			else
				$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		return
			if (count($geometry) > 1) then
				local:addMessage('TR.wrongMultiplicityPIF',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_geometry, 'multiplicity': 1, 'count': count($geometry)})
			else if(not(exists($building)) and not(exists($geometry))) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_building, 'constraint': 'the geometry is provided for the ProductionBuilding feature type if the building property is empty', 'additionalInfo': ''})
			else if(exists($building) and not(exists($building/@xlink:href)) and not(has-children($building)) and not(exists($geometry))) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_building, 'constraint': 'the geometry is provided for the ProductionBuilding feature type if the building property is empty', 'additionalInfo': ''})
			else if(exists($building) and exists($building/@xlink:href) and not(count($invalid_urls) = 0) and not(exists($geometry))) then
				local:addMessage('TR.brokenLinkPIF', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_building, 'value': string-join($invalid_urls, ',')}) 
			else ()

let $features_selected_pf := $features[self::pf:ProductionFacility]
let $messages_pf := 
	for $feature in $features_selected_pf/pf:groupedBuilding/pf:ProductionBuilding
		let $geometry := $feature/pf:geometry
		let $building := $feature/pf:building
		
		let $urls := 
		for $x in $building/@xlink:href
			return
			if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
				()
			else
				$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		return
			if (count($geometry) > 1) then
				local:addMessage('TR.wrongMultiplicityPIF',  map {'filename': local:filename($feature), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_geometry, 'multiplicity': 1, 'count': count($geometry)})
			else if(not(exists($building)) and not(exists($geometry))) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_building, 'constraint': 'the geometry is provided for the ProductionBuilding feature type if the building property is empty', 'additionalInfo': ''})
			else if(exists($building) and not(exists($building/@xlink:href)) and not(has-children($building)) and not(exists($geometry))) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_building, 'constraint': 'the geometry is provided for the ProductionBuilding feature type if the building property is empty', 'additionalInfo': ''})
			else if(exists($building) and exists($building/@xlink:href) and not(count($invalid_urls) = 0) and not(exists($geometry))) then
			local:addMessage('TR.brokenLinkPIF', map {'filename': local:filename($feature), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_building, 'value': string-join($invalid_urls, ',')}) 
			else ()

let $combined_messages := ($messages_pb, $messages_pf)


return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)


									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityPIF"/>
										<translationTemplate ref="TR.constraintViolation"/>
										<translationTemplate ref="TR.brokenLinkPIF"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
