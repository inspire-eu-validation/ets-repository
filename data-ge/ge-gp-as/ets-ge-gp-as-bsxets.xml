<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EIDe7376545-7848-4e62-8ba0-581451828830" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>http://inspire.ec.europa.eu/id/ats/ets-reory/tree/master/data-ge/ge-gp-as</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Application schema, Geophysics</label>
	<description><![CDATA[This test suite examines requirements associated with the application schema.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/INSPIRE-MIF/helpdesk-validator/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as" target="_blank">Conformance Class 'Application Schema, Geology'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gml" target="_blank">Conformance Class 'GML application schemas, Geology'</a></li></ul>]]></description>
	<reference>../../inspire-noggeo-bsxets.xq</reference>
	<version>1.0.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2021-01-19T11:00:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2021-01-19T11:00:00Z</lastUpdateDate>
	<tags>
		<tag ref="EID08e3f9ed-f58a-4a46-a207-96d06f1c2d38"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID5ff0b3a6-d3b3-473f-941f-35f08f9418b1"/>
	</dependencies>
	<testModules>
		<TestModule id="EID51bbc58d-b27c-4d41-890d-d92a1f86b887">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EIDe7376545-7848-4e62-8ba0-581451828830"/>
			<testCases>
				<TestCase id="EID76b4c9b5-3856-49f9-b76b-32996d02c29b">
					<label>Code lists</label>
					<description>Verify that code lists extensions can be accessed.</description>
					<parent ref="EID51bbc58d-b27c-4d41-890d-d92a1f86b887"/>
					<testSteps>
						<TestStep id="EID81f49990-03a2-4999-adeb-356f7a145c1c">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID76b4c9b5-3856-49f9-b76b-32996d02c29b"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID0ce9c7b0-4438-437a-bc35-26d5ea6cdc12">
									<label>ge-gp-as.a.1: campaignType </label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#campaignType '>campaignType </a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#predefinedValue1'>pre-defined value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.3</a>]]></description>
									<parent ref="EID81f49990-03a2-4999-adeb-356f7a145c1c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/CampaignTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/CampaignTypeValue/CampaignTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'campaignType'
let $features_selected := $features[ self::ge_gp:Campaign ]
let $list := $features_selected/ge_gp:campaignType/@xlink:href


let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/ge_gp:campaignType
		let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()
		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})		
			else if(exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then 
				(local:addMessage('TR.manual.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ','), 'count': count($iterlist)-1}))
			else ()
			
return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.manual.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID0aa04f20-0430-45dd-a66b-5ea2b6570e68">
									<label>ge-gp-as.a.2: surveyType </label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#surveyType '>surveyType </a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#predefinedValue2'>pre-defined value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.3</a>]]></description>
									<parent ref="EID81f49990-03a2-4999-adeb-356f7a145c1c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/SurveyTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/SurveyTypeValue/SurveyTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'surveyType'
let $features_selected := $features[ self::ge_gp:Campaign ]
let $list := $features_selected/ge_gp:campaignType/@xlink:href

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/ge_gp:surveyType
		let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})		
			else if(exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then 
				(local:addMessage('TR.manual.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ','), 'count': count($iterlist)-1}))
			else ()
			
return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.manual.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID2f9b39e8-c3ba-4c48-aec7-9983250ac481">
									<label>ge-gp-as.a.3: relatedNetwork </label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#relatedNetwork '>relatedNetwork </a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#predefinedValue3'>pre-defined value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.3</a>]]></description>
									<parent ref="EID81f49990-03a2-4999-adeb-356f7a145c1c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/NetworkNameValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/NetworkNameValue/NetworkNameValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'relatedNetwork'
let $features_selected := $features[self::ge_gp:GeophStation | self::ge_gp:GeophProfile | self::ge_gp:GeophSwath]
let $list := $features_selected/ge_gp:relatedNetwork/@xlink:href

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/ge_gp:relatedNetwork

		let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if(exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then 
				(local:addMessage('TR.manual.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ','), 'count': count($iterlist)-1}))
			else ()
			
return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.manual.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID42b46e8a-c73a-44f1-9e23-4d08a31f1bb0">
									<label>ge-gp-as.a.4: platformType </label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#platformType '>platformType </a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#predefinedValue4'>pre-defined value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.3</a>]]></description>
									<parent ref="EID81f49990-03a2-4999-adeb-356f7a145c1c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/PlatformTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/PlatformTypeValue/PlatformTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'platformType'
let $features_selected := $features[self::ge_gp:GeophStation | self::ge_gp:GeophProfile | self::ge_gp:GeophSwath]
let $list := $features_selected/ge_gp:platformType/@xlink:href

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/ge_gp:platformType

		let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})		
			else if(exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then 
				(local:addMessage('TR.manual.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ','), 'count': count($iterlist)-1 }))
			else ()
			
return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.manual.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID56e6e321-8369-4459-8c87-15d50bbba130">
									<label>ge-gp-as.a.5: profileType </label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#profileType '>profileType </a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#predefinedValue5'>pre-defined value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.3</a>]]></description>
									<parent ref="EID81f49990-03a2-4999-adeb-356f7a145c1c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ProfileTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ProfileTypeValue/ProfileTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'profileType'
let $features_selected := $features[self::ge_gp:GeophProfile]
let $list := $features_selected/ge_gp:profileType/@xlink:href

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/ge_gp:profileType

		let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()
		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})		
			else if(exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then 
				(local:addMessage('TR.manual.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ','), 'count': count($iterlist)-1 }))
			else ()
			
return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.manual.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID01c2630e-01f5-4f18-b1cf-6f08fae1eb47">
									<label>ge-gp-as.a.6: stationType </label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#stationType '>stationType </a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#predefinedValue6'>pre-defined value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.3</a>]]></description>
									<parent ref="EID81f49990-03a2-4999-adeb-356f7a145c1c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/StationTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/StationTypeValue/StationTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'stationType'
let $features_selected := $features[self::ge_gp:GeophStation]
let $list := $features_selected/ge_gp:stationType/@xlink:href

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/ge_gp:stationType

		let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()
		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})		
			else if(exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then 
				(local:addMessage('TR.manual.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ','), 'count': count($iterlist)-1 }))
			else ()
			
return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.manual.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDd3331357-d7c7-4653-8972-f6422b9d42fc">
									<label>ge-gp-as.a.7: stationRank </label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#stationRank '>stationRank </a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#predefinedValue7'>pre-defined value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.3</a>]]></description>
									<parent ref="EID81f49990-03a2-4999-adeb-356f7a145c1c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/StationRankValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/StationRankValue/StationRankValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'stationRank'
let $features_selected := $features[self::ge_gp:GeophStation]
let $list := $features_selected/ge_gp:stationRank/@xlink:href

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/ge_gp:stationRank

		let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()
		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if(exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then 
				(local:addMessage('TR.manual.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ','), 'count': count($iterlist)-1 }))
			else ()
			
return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.manual.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID01944e47-c454-40a6-b570-426feea26c25">
									<label>ge-gp-as.a.8: swathType </label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#swathType '>swathType </a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values#predefinedValue7'>pre-defined value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.3</a>]]></description>
									<parent ref="EID81f49990-03a2-4999-adeb-356f7a145c1c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/SwathTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/SwathTypeValue/SwathTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'swathType'
let $features_selected := $features[self::ge_gp:GeophSwath]
let $list := $features_selected/ge_gp:swathType/@xlink:href

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/ge_gp:swathType

		let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()
		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})		
			else if(exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then 
				(local:addMessage('TR.manual.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ','), 'count': count($iterlist)-1}))
			else ()
			
return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.manual.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EID32323299-c6df-408d-b171-6dcb0af0dc3f">
					<label>Constraints</label>
					<description>Verify that the features provided in the dataset adhere to the constraints specified in the INSPIRE application schema.</description>
					<parent ref="EID51bbc58d-b27c-4d41-890d-d92a1f86b887"/>
					<testSteps>
						<TestStep id="EID8ec482c7-2b78-491e-9994-579649ad5c40">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID32323299-c6df-408d-b171-6dcb0af0dc3f"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
							<TestAssertion id="EIDeba2a3bb-2aa1-4cc3-a853-04fdfc270812">
									<label>ge-gp-as.b.1: Campaing shape</label>
									<description><![CDATA[Check that the <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints#shapeCampaign'>shape</a> attribute of the spatial object type Campaign is of type GM_Surface (OCL: "inv: shape.oclIsKindOf(GM_Surface)" ).<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.6</a>]]></description>
									<parent ref="EID8ec482c7-2b78-491e-9994-579649ad5c40"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $property_string := 'sams:shape'
let $features_selected := $features[self::ge_gp:Campaign]
let $messages1 :=
	for $feature in $features_selected
		for $f in $feature/sams:shape/*
		return
			if (name($f) != 'gml:Surface') then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': ' shape attribute of the spatial object type Campaign is of type GM_Surface', 'additionalInfo':''})	
			else ()

let $messages2 :=
	for $feature in $features_selected
		return
			if (not(exists($feature/sams:shape))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($feature/sams:shape) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($feature/sams:shape)})	
			else ()

let $messages := ($messages1, $messages2)
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.constraintViolation"/>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
									</translationTemplates> 
								</TestAssertion>
								<TestAssertion id="EIDf4df1e8a-61dd-4ec3-ba8e-ac2def149d8b">
									<label>ge-gp-as.b.2: projectedGeometry</label>
									<description><![CDATA[Check that the <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints#projectedGeometry1'>projectedGeometry</a> attribute of the spatial object types GeophStation, GeophProfile and GeophSwath is of type GM_Point, GM_Curve or GM_Surface (OCL: "inv: projectedGeometry.oclIsKindOf(GM_Point) or projectedGeometry.oclIsKindOf(GM_Curve) or projectedGeometry.oclIsKindOf(GM_Surface) " ).<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.6</a>]]></description>
									<parent ref="EID8ec482c7-2b78-491e-9994-579649ad5c40"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $property_string := 'ge_gp:projectedGeometry'
let $features_selected := $features[self::ge_gp:GeophStation|self::ge_gp:GeophProfile|self::ge_gp:GeophSwath]
let $messages1 :=
	for $feature in $features_selected
		for $f in $feature/ge_gp:projectedGeometry/*

		return
			if (name($f) != 'gml:Point' and name($f) != 'gml:Curve' and name($f) != 'gml:Surface') then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'The spatial object types GeophStation, GeophProfile and GeophSwath is of type GM_Point, GM_Curve or GM_Surface', 'additionalInfo':''})	
			else ()

let $messages2 :=
	for $feature in $features_selected
		return
			if (not(exists($feature/ge_gp:projectedGeometry))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else 
				for $f in $feature/ge_gp:projectedGeometry
					return 
						if (not(has-children($f))) then
							local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'The spatial object types GeophStation, GeophProfile and GeophSwath is of type GM_Point, GM_Curve or GM_Surface', 'additionalInfo':''})	
						else ()

let $messages := ($messages1, $messages2)
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.constraintViolation"/>
										<translationTemplate ref="TR.missingElement"/>
									</translationTemplates> 
								</TestAssertion>
								<TestAssertion id="EID22198534-f494-4fec-9a11-42d16949de6c">
									<label>ge-gp-as.b.3: projectedGeometry GeophObjectSet</label>
									<description><![CDATA[Check that the <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints#projectedGeometry2'>projectedGeometry</a> attribute of the spatial object types GeophStation, GeophProfile and GeophSwath is of type GM_Point, GM_Curve or GM_Surface (OCL: "inv: projectedGeometry.oclIsKindOf(GM_Point) or projectedGeometry.oclIsKindOf(GM_Curve) or projectedGeometry.oclIsKindOf(GM_Surface) " ).<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.6</a>]]></description>
									<parent ref="EID8ec482c7-2b78-491e-9994-579649ad5c40"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $property_string := 'ge_gp:projectedGeometry'
let $features_selected := $features[self::ge_gp:GeophObjectSet]
let $messages1 :=
	for $feature in $features_selected
		for $f in $feature/ge_gp:projectedGeometry/*

		return
			if (name($f) != 'gml:Point' and name($f) != 'gml:Curve' and name($f) != 'gml:Surface') then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'The spatial object types GeophStation, GeophProfile and GeophSwath is of type GM_Point, GM_Curve or GM_Surface', 'additionalInfo':''})	
			else ()

let $messages2 :=
	for $feature in $features_selected
		return
			if (not(exists($feature/ge_gp:projectedGeometry))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else 
				for $f in $feature/ge_gp:projectedGeometry
					return 
						if (not(has-children($f))) then
							local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'The spatial object types GeophStation, GeophProfile and GeophSwath is of type GM_Point, GM_Curve or GM_Surface', 'additionalInfo':''})	
						else ()

let $messages := ($messages1, $messages2)
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.constraintViolation"/>
										<translationTemplate ref="TR.missingElement"/>
									</translationTemplates> 
								</TestAssertion>
								<TestAssertion id="EID00a4595b-0fe3-402c-8df5-521b9528d743">
									<label>ge-gp-as.b.4: shape GeophProfile</label>
									<description><![CDATA[Check that the <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints#shapeGeophProfile'>shape</a> attribute of the spatial object type Campaign is of type GM_Curve (OCL: "inv: shape.oclIsKindOf(GM_Curve)" ).<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.6</a>]]></description>
									<parent ref="EID8ec482c7-2b78-491e-9994-579649ad5c40"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $property_string := 'sams:shape'
let $features_selected := $features[self::ge_gp:GeophProfile]
let $messages1 :=
	for $feature in $features_selected
		for $f in $feature/sams:shape/*
		return
			if (name($f) != 'gml:Curve') then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': ' shape attribute of the spatial object type GeophProfile is of type GM_Curve', 'additionalInfo':''})	
			else ()

let $messages2 :=
	for $feature in $features_selected
		return
			if (not(exists($feature/sams:shape))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($feature/sams:shape) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($feature/sams:shape)})	
			else ()

let $messages := ($messages1, $messages2)
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.constraintViolation"/>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
									</translationTemplates> 
								</TestAssertion>
								<TestAssertion id="EID2ee037f6-65b4-4150-a3d7-3b7c31f22c8a">
									<label>ge-gp-as.b.5: shape GeophStation</label>
									<description><![CDATA[Check that the <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints#shapeGeophStation'>shape</a> attribute of the spatial object type Campaign is of type GM_Point (OCL: "inv: shape.oclIsKindOf(GM_Point)" ).<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.6</a>]]></description>
									<parent ref="EID8ec482c7-2b78-491e-9994-579649ad5c40"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $property_string := 'sams:shape'
let $features_selected := $features[self::ge_gp:GeophStation]
let $messages1 :=
	for $feature in $features_selected
		for $f in $feature/sams:shape/*
		return
			if (name($f) != 'gml:Point') then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': ' shape attribute of the spatial object type GeophStation is of type GM_Point', 'additionalInfo':''})	
			else ()

let $messages2 :=
	for $feature in $features_selected
		return
			if (not(exists($feature/sams:shape))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($feature/sams:shape) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($feature/sams:shape)})	
			else ()

let $messages := ($messages1, $messages2)
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.constraintViolation"/>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
									</translationTemplates> 
								</TestAssertion>
								<TestAssertion id="EID47ff7bb8-e779-460d-84d2-e8fb7707977e">
									<label>ge-gp-as.b.6: shape GeophSwath</label>
									<description><![CDATA[Check that the <a href='http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints#shapeGeophStation'>shape</a> attribute of the spatial object type Campaign is of type GM_Surface (OCL: "inv: shape.oclIsKindOf(GM_Surface)" ).<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-ge/master/ge-gp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_GE_v3.0.pdf">INSPIRE Data Specification on Geology, A.1.6</a>]]></description>
									<parent ref="EID8ec482c7-2b78-491e-9994-579649ad5c40"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $property_string := 'sams:shape'
let $features_selected := $features[self::ge_gp:GeophSwath]
let $messages1 :=
	for $feature in $features_selected
		for $f in $feature/sams:shape/*
		return
			if (name($f) != 'gml:Surface') then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': ' shape attribute of the spatial object type GeophSwath is of type GM_Surface', 'additionalInfo':''})	
			else ()

let $messages2 :=
	for $feature in $features_selected
		return
			if (not(exists($feature/sams:shape))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($feature/sams:shape) > 1) then
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count': count($feature/sams:shape)})	
			else ()

let $messages := ($messages1, $messages2)
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.constraintViolation"/>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
									</translationTemplates> 
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>