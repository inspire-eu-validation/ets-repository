<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID122b2f38-302f-4271-9653-69cf86fcb5c4" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-hy/hy-rs</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Reference systems, Hydrography</label>
	<description><![CDATA[This test suite examines a data set against the theme-specific requirements related to reference systems (spatial and temporal, units of measurement).<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/INSPIRE-MIF/helpdesk-validator/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs" target="_blank">Conformance Class 'Reference systems, Hydrography'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data/master/reference-systems" target="_blank">Conformance Class 'Reference systems'</a></li></ul>]]></description>
  <reference>../../inspire-noggeo-bsxets.xq</reference>
	<version>0.2.1</version>
	<author>interactive instruments GmbH</author>
	<creationDate>2016-08-15T00:00:00Z</creationDate>
	<lastEditor>interactive instruments GmbH</lastEditor>
	<lastUpdateDate>2017-05-16T13:00:00Z</lastUpdateDate>
	<tags>
		<tag ref="EID83fc91d3-bdf1-486e-ba8f-cd2c43e14413"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID63f586f0-080c-493b-8ca2-9919427440cc"/>
	</dependencies>
	<testModules>
		<TestModule id="EID02e0157e-008e-4b4b-aa34-dfa9dd1fc722">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EID122b2f38-302f-4271-9653-69cf86fcb5c4"/>
			<testCases>
				<TestCase id="EIDe66fd4bc-1154-41e5-9549-2e7bdb651229">
					<label>Units of measure</label>
					<description>Verify that measurements use an allowed unit.</description>
					<parent ref="EID02e0157e-008e-4b4b-aa34-dfa9dd1fc722"/>
					<testSteps>
						<TestStep id="EID177656c5-0871-4afb-b7f6-a50a774ce730">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDe66fd4bc-1154-41e5-9549-2e7bdb651229"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID211da09d-887d-4afa-b8a6-28f301084430">
									<label>hy-rs.a.1: WatercourseLink.length</label>
									<description><![CDATA[Verify that the property 'length' in WatercourseLink features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs/uom" target="_blank">Abstract Test Case 'Units of measure'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HY_v3.1.pdf">INSPIRE Data Specification on Hydrography, A.2.6</a>]]></description>
									<parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:WatercourseLink and *:length and not(*:length/@uom and *:length/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:length/@uom[not(. = $units)])
   let $missing := $feature[not(*:length/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'length', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'length' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID30dae4ae-396c-4cee-a99c-ea6952d88c2f">
									<label>hy-rs.a.2: DrainageBasin.area</label>
									<description><![CDATA[Verify that the property 'area' in DrainageBasin features has a area unit (square meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs/uom" target="_blank">Abstract Test Case 'Units of measure'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HY_v3.1.pdf">INSPIRE Data Specification on Hydrography, A.2.6</a>]]></description>
									<parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := ('m2', 'mm2', 'cm2', 'dm2', 'km2')
let $featuresWithErrors := $features[self::*:DrainageBasin and *:area and not(*:area/@uom and *:area/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:area/@uom[not(. = $units)])
   let $missing := $feature[not(*:area/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'area', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'area' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID37f1501c-8596-417e-b895-22e01243974e">
									<label>hy-rs.a.3: Falls.length</label>
									<description><![CDATA[Verify that the property 'length' in Falls features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs/uom" target="_blank">Abstract Test Case 'Units of measure'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HY_v3.1.pdf">INSPIRE Data Specification on Hydrography, A.2.6</a>]]></description>
									<parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:Falls and *:length and not(*:length/@uom and *:length/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:length/@uom[not(. = $units)])
   let $missing := $feature[not(*:length/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'length', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'length' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDbebd58d7-e306-4293-93c7-8110dce8497e">
									<label>hy-rs.a.4: StandingWater.elevation</label>
									<description><![CDATA[Verify that the property 'elevation' in StandingWater features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs/uom" target="_blank">Abstract Test Case 'Units of measure'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HY_v3.1.pdf">INSPIRE Data Specification on Hydrography, A.2.6</a>]]></description>
									<parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:StandingWater and *:elevation and not(*:elevation/@uom and *:elevation/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:elevation/@uom[not(. = $units)])
   let $missing := $feature[not(*:elevation/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'elevation', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'elevation' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDf1e252f5-19db-4238-a039-76315a005a2a">
									<label>hy-rs.a.5: StandingWater.meanDepth</label>
									<description><![CDATA[Verify that the property 'meanDepth' in StandingWater features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs/uom" target="_blank">Abstract Test Case 'Units of measure'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HY_v3.1.pdf">INSPIRE Data Specification on Hydrography, A.2.6</a>]]></description>
									<parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:StandingWater and *:meanDepth and not(*:meanDepth/@uom and *:meanDepth/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:meanDepth/@uom[not(. = $units)])
   let $missing := $feature[not(*:meanDepth/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'meanDepth', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'meanDepth' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID908c7173-e4e5-45b5-bb1d-f14a9e11f5b7">
									<label>hy-rs.a.6: StandingWater.surfaceArea</label>
									<description><![CDATA[Verify that the property 'surfaceArea' in StandingWater features has an area unit (square meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs/uom" target="_blank">Abstract Test Case 'Units of measure'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HY_v3.1.pdf">INSPIRE Data Specification on Hydrography, A.2.6</a>]]></description>
									<parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := ('m2', 'mm2', 'cm2', 'dm2', 'km2')
let $featuresWithErrors := $features[self::*:StandingWater and *:surfaceArea and not(*:surfaceArea/@uom and *:surfaceArea/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:surfaceArea/@uom[not(. = $units)])
   let $missing := $feature[not(*:surfaceArea/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'surfaceArea', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'surfaceArea' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDa4a86f46-012c-487f-a6be-7acb4b92e594">
									<label>hy-rs.a.7: Watercourse.length</label>
									<description><![CDATA[Verify that the property 'length' in Watercourse features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs/uom" target="_blank">Abstract Test Case 'Units of measure'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HY_v3.1.pdf">INSPIRE Data Specification on Hydrography, A.2.6</a>]]></description>
									<parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:Watercourse and *:length and not(*:length/@uom and *:length/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:length/@uom[not(. = $units)])
   let $missing := $feature[not(*:length/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'length', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'length' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID7c660e86-50a9-4e53-949b-35fb656f623d">
									<label>hy-rs.a.8: Watercourse.width.lower</label>
									<description><![CDATA[Verify that the property 'width.lower' in Watercourse features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs/uom" target="_blank">Abstract Test Case 'Units of measure'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HY_v3.1.pdf">INSPIRE Data Specification on Hydrography, A.2.6</a>]]></description>
									<parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:Watercourse and *:width/*/*:lower and not(*:width/*/*:lower/@uom and *:width/*/*:lower/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:width/*/*:lower/@uom[not(. = $units)])
   let $missing := $feature[not(*:width/*/*:lower/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'width.upper', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'width.lower' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID327889a4-dcb0-42db-a082-10f86d9fd571">
									<label>hy-rs.a.9: Watercourse.width.upper</label>
									<description><![CDATA[Verify that the property 'width.upper' in Watercourse features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/master/hy-rs/uom" target="_blank">Abstract Test Case 'Units of measure'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HY_v3.1.pdf">INSPIRE Data Specification on Hydrography, A.2.6</a>]]></description>
									<parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:Watercourse and *:width/*/*:upper and not(*:width/*/*:upper/@uom and *:width/*/*:upper/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:width/*/*:upper/@uom[not(. = $units)])
   let $missing := $feature[not(*:width/*/*:upper/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'width.upper', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'width.upper' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
