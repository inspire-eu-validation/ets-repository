<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="Conformance Class: Download Service - Pre-defined Atom" resourceRoot="${projectDir}" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" id="11571c92-3940-4f42-a6cd-5e2b1c6f4d93" xmlns:con="http://eviware.com/soapui/config"><con:description><![CDATA[This test suite examines a Atom feed with Open Search description against the requirements related to the INSPIRE Pre-Defined Atom Download Service feed with sub-feeds for data sets. This test suite only examines requirements that are specific to a Pre-Defined Atom Download Service feed.
<br/> <br/>
The test suite is divided into four test modules. In the first module 'Initialization and basic checks', basic queries are send to the Atom feed to ensure the endpoints are available. The 'Download Service Feed', 'Dataset Feed' and 'OpenSearch Description' test modules contain the actual test cases, derived from the Abstract Test Cases. If a test case in the first module fails, the three other modules are skipped!
<br/> <br/>
There are a few test cases and test steps that are marked as 'technical test step' or 'technical test case' in the description. They are used to control the test execution flow of the steps. The description text of a technical test step indicates the test steps that are executed. If a technical test step fails, the other test steps, which have been called by the technical test step, should be checked first. To examine a reported issue, the assertion messages should be compared with the service responses which are included in the report. If the response contains an exception report, the request should be checked for 'incorrect' parameters (i.e. non-existing IDs). The test step description should refer to a point, from where the information has been gathered (i.e. from a previous request where the ID was listed).
<br/> <br/> 

Please report any issues or problems <a href="https://github.com/INSPIRE-MIF/helpdesk-validator/wiki/Your-feedback" target="_blank">in GitHub</a>.
<br/> <br/>
Known limitations are documented in the description of the applicable test case or test assertion.
<br/> <br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined" target="_blank">Conformance Class 'Pre-defined Atom'</a>]]></con:description><con:settings/><con:testSuite name="Initialization and basic checks" id="6266de5b-169b-4933-896b-803260ff568e"><con:description>Perform basic check to ensure the top-level Download Service Feed is available and initialize the Executable Test Suite with gathered information.

If this test case fails, all other test cases will be skipped!
Ensure that the schema locations and all endpoints can be queried!

Please note that for technical reasons this Executable Test Suite requires that schema locations must be accessible without any authentication mechanism.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup credentials and check if endpoint is available" searchProperties="true" id="bb8df909-494c-46d8-ace0-31e18b57b12f"><con:description>Technical test case. Initialize loggers and set credentials for the test run.</con:description><con:settings/><con:testStep type="groovy" name="Update Credentials" id="4bafa73e-73b8-4153-a84b-c6cc0b04bd28"><con:settings/><con:config><script>import de.interactive_instruments.xtf.Util;

/** Set the credentials only if a username is provided */
def basicAuthUser = context.expand('${#Project#authUser}');
if (basicAuthUser.length()>0) {
	log.info("Setting credentials for user: " + basicAuthUser);
}
Util.updateCredentials(testRunner);
</script></con:config></con:testStep><con:testStep type="httprequest" name="Check URL is accessible" id="72c74c78-472f-4baa-bdd5-2dfb1c516bb7"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="bb497eeb-618a-4196-9d3e-aec46f130ddf" name="Check URL is accessible" sslKeystore="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="602d9d35-1c42-4497-a386-7befaa3320eb" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="2ca63785-e385-4c4f-b8c6-d6742c415a0c" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="60ac748d-9fae-47f9-bc88-f7073077cc62" name="No invalid characters before XML prolog"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.*

if(!messageExchange.hasResponse()) {
  throw new TranslatableAssertionError("TR.noDataReturned")
}

if(messageExchange.responseContent.size()>7) {
	final String xmlProlog = messageExchange.responseContent.substring(0,7);
	if(!xmlProlog.trim().startsWith("&lt;")) {
		throw new TranslatableAssertionError("TR.invalidXmlProlog", "prolog", xmlProlog.replaceAll("\\p{C}", "?") )
	}
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5e954eb8-f4fb-49b6-a1e3-2bcec69dbd6b" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:28:55.523+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:28:55.523+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value/></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property></con:properties></con:testCase><con:testCase id="ce5a6d78-3a71-4ded-8b2e-fcc4d71d6849" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Basic checks passed and Feed still accessible" searchProperties="true"><con:description>Check if the feed is available and the Test initialisation phase has been completed successfully.</con:description><con:settings/><con:testStep type="httprequest" name="Check URL is accessible" id="7c915733-5218-4594-9e9a-066192707f1e"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="9b545ae2-2132-4a06-b34a-4e191e3ef083" name="Check URL is accessible" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6fb90bcf-0fb8-40d0-a34b-dc79e2392d4e" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="33c888b8-a272-4bc8-86b6-30966df1b6d4" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8e7403f0-6689-45d2-9eb2-3f83bc3be359" name="root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="59c49d09-616a-4a70-a918-2f31d345e38f" name="Download Service Feed"><con:description>Test module for checking the top-level Download Service Feed.
&lt;br/>&lt;br/>
&lt;b>Known limitations: &lt;/b> Response schema validation is not implemented yet.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b87b5132-cb6c-44cb-9215-e588fc1e3344" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Contact information" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if the response contains the author name and email address.
<br/>
<br/>
<b>Known limitations: </b> The ATS states that the test case needs to check wheter the value is 'alphanumeric'. This is inappropriate, since the value can contain characters that are not in the range of A-Z,a-z and 0-9, for instance text strings in greek.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 12: The 'author' element of a feed shall contain current contact information for an
individual or organisation responsible for the feed. At the minimum, a name
and email address shall be provided as contact information.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-contact-information" target="_blank">Abstract Test Case 'Download Service feed contact information'</a>]]></con:description><con:settings/><con:testStep type="testcasedependency" name="Initialization and basic checks" id="7d695871-e4c6-4360-a562-8d2da96ba906"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ce5a6d78-3a71-4ded-8b2e-fcc4d71d6849</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="8857655a-05c6-461c-b0f8-09c88d7b1c44"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="aee13410-0c7e-4bcf-acbd-a76a8b777086" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks the contact information.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="3b666b3e-f315-49be-b96a-2d27abf0ab94" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="b3f699a6-e47b-4a89-a610-f01787de5ab0" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d2126146-4434-443a-8420-5b8adc6b1f6a" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9809e089-828d-4e58-a091-0b8a0d28956d" name="Author name exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/atom:feed/atom:author/atom:name",
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4fe383ff-d457-4324-bdfd-d23c54dc6ebd" name="Email address exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/atom:feed/atom:author/atom:email",
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="035c2686-8af8-4972-a015-cd32b2ab17ac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CRS information" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if each feed entry contain an Atom 'category' element for each CRS.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 20: Each feed entry shall contain an Atom 'category' element for each CRS in
which the pre-defined dataset is available. This category element shall refer to
a well-known definition of a coordinate reference system.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-crs-information" target="_blank">Abstract Test Case 'Download Service feed CRS information'</a>]]></con:description><con:settings/><con:testStep type="calltestcase" name="Initialization and basic checks" id="40bb7f94-25d8-462b-ab3f-975a7402bde0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bb8df909-494c-46d8-ace0-31e18b57b12f</con:targetTestCase><con:properties><con:property><con:name>etf.ShortDescription</con:name></con:property><con:property><con:name>etf.Author</con:name></con:property><con:property><con:name>etf.LastEditor</con:name></con:property><con:property><con:name>etf.ExpectedResults</con:name></con:property><con:property><con:name>etf.CreationDate</con:name></con:property><con:property><con:name>etf.LastUpdateDate</con:name></con:property><con:property><con:name>etf.Version</con:name></con:property><con:property><con:name>etf.AssociatedRequirements</con:name></con:property><con:property><con:name>etf.Status</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="008e0867-010c-45e9-b9f3-1255ff2e74fb"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="27e1573c-c6b0-4f4e-9555-63497c76596d" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks the CRS information.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="3f96da73-0f0b-4b82-8fee-582f70950c69" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="6c31a150-52db-4ba1-bad6-c374dc60359b" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6e32f02f-28f0-4724-8a7b-9323a26ea629" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="84104201-71c4-4f32-8291-5f5ac49e6b20" name="Each entry has an element category, including a term and label, to refer to CRSs."><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[count(atom:category[string-length(@term)>0 and string-length(@label)>0])&lt;1]",
  "TR.missingCategory"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f3bbb312-6c4a-423a-80cc-0dcce1e9a5c9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Dataset identifiers" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if each dataset has an INSPIRE Spatial Dataset Unique Resource Identifier 'dataset identifier code' and a 'dataset identifier namespace'.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 13: Each feed 'entry' in a 'Download Service Feed' shall contain
spatial_dataset_identifier_code and spatial_dataset_identifier_namespace
elements which together contain the Spatial Dataset Unique Resource
Identifier for the dataset described by the feed. These elements are defined in
the inspire_dls schema which shall be included in the namespace declarations
of the feed.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-dataset-identifiers" target="_blank">Abstract Test Case 'Download Service feed dataset identifiers'</a>]]></con:description><con:settings/><con:testStep type="calltestcase" name="Initialization and basic checks" id="de6d0b18-45fe-4795-a4d6-ffe08ae08b4f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bb8df909-494c-46d8-ace0-31e18b57b12f</con:targetTestCase><con:properties><con:property><con:name>etf.ShortDescription</con:name></con:property><con:property><con:name>etf.Author</con:name></con:property><con:property><con:name>etf.LastEditor</con:name></con:property><con:property><con:name>etf.ExpectedResults</con:name></con:property><con:property><con:name>etf.CreationDate</con:name></con:property><con:property><con:name>etf.LastUpdateDate</con:name></con:property><con:property><con:name>etf.Version</con:name></con:property><con:property><con:name>etf.AssociatedRequirements</con:name></con:property><con:property><con:name>etf.Status</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="65cc6185-5f4b-4b9c-a01a-2b0b1cb4a785"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="8ab606e5-fff1-435b-a5ef-b9ffb650fd4a" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks the dataset identifiers.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="342e431e-e031-4057-bb93-4a7d9d858b7d" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="4b4257d8-aee6-406b-8f16-8306c91d1b81" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cbcffce3-745e-490a-bd2f-2d64069409af" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9b404f5e-ebed-466b-a5e3-177c3c927f5a" name="Each entry has an element INSPIRE identifier code"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[string-length(inspire_dls:spatial_dataset_identifier_code)=0]",
  "TR.missingSpatialDatasetIdentifierCode"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5c449c08-4578-41ee-a7ea-a168c61005b7" name="Each entry has an element INSPIRE identifier element namespace"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[string-length(inspire_dls:spatial_dataset_identifier_namespace)=0]",
  "TR.missingSpatialDatasetIdentifierNamespace"
  
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="82825850-f358-40d8-913c-5e61cac61fef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HTTP URI" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if provides the HTTP URI of the feed as ID.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 9: The 'id' element of a feed shall contain an HTTP URI which dereferences to the feed.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-id" target="_blank">Abstract Test Case 'Download Service feed: id'</a>]]></con:description><con:settings/><con:testStep type="calltestcase" name="Initialization and basic checks" id="d3d7d1e5-47cb-4624-ad67-076cf69538ac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bb8df909-494c-46d8-ace0-31e18b57b12f</con:targetTestCase><con:properties><con:property><con:name>etf.ShortDescription</con:name></con:property><con:property><con:name>etf.Author</con:name></con:property><con:property><con:name>etf.LastEditor</con:name></con:property><con:property><con:name>etf.ExpectedResults</con:name></con:property><con:property><con:name>etf.CreationDate</con:name></con:property><con:property><con:name>etf.LastUpdateDate</con:name></con:property><con:property><con:name>etf.Version</con:name></con:property><con:property><con:name>etf.AssociatedRequirements</con:name></con:property><con:property><con:name>etf.Status</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="properties" name="Transfer_Properties" id="3e1478ca-676b-4786-b733-a7eef7597ede"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>feedId</con:name><con:value>http://www.gis-rest.nrw.de/atomFeed/rest/atom/c2195ebe-dad7-4f5e-9bc3-79a30d3373f3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="8c63752f-405c-422c-b91e-9b42a76eb720"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="5b4cceaf-153e-474d-a4e7-27c9bfea8abe" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks the feed URL.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="52a40318-a6fb-4b29-9064-8903ddf448df" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="4ab0a840-2966-43ae-9ec7-8de9e7e24648" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="43518c24-2fc2-448a-817a-c8e4944baa64" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f0d32900-8648-42a9-8e47-0681f34af745" name="Feed id is an URI"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "/atom:feed[substring(atom:id,1,4)!='http']",
  "TR.idNotAnURI"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Transfer ID" id="4c2c9ab0-dce9-4b6e-8c79-1cdb120781e1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>feedIds</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Service Feed</con:sourceStep><con:sourcePath>/*:feed/*:id</con:sourcePath><con:targetType>feedId</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed by ID" id="c106f883-041b-402d-8ada-33acc7b1d463"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="c2599de0-3425-4e38-ae0e-9ec6bc7b665b" name="Get Service Feed by ID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks the feed URL.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${Transfer_Properties#feedId}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="32a9b06a-0eee-45a1-9e7a-f69dcaa77471" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="89e91ccc-2bfa-4af5-bc5e-286828d46465" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="40f8fcd1-ceb6-4587-bc5c-9a9f9ec8a6a2" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="05e473b5-9caa-407d-90e8-49820284df45" name="Feed ID equals request URL"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.xtf.*
SOAPUI_I.init(log, context, messageExchange)
final ProjectHelper ph = new ProjectHelper()
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.equals(
  "/atom:feed/atom:id",
  "/atom:feed/atom:id",
  messageExchange.getEndpoint(),
  "TR.feedIdDoesNotReferToEndpoint"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="71e5f95e-93c5-4213-a2cb-2bc7b5a3cc1f" name="Response equals response from test step 'Get Service Feed'"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.TranslatableAssertionError;

def response = context.expand( '${Get Service Feed#Response}' )

if( response.toString() != messageExchange.getResponseContent().toString() ) {
	throw new TranslatableAssertionError("TR.responseNotEqual", "testStep", "Get Service Feed");
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ba93c8a4-2c83-40e3-8604-1e38b9a9456f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Identifiers" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if each feed entry provides the HTTP URI of the feed as ATOM ID.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 17: The 'id' element of a feed entry in a Download Service Feed shall contain an
identifier for that feed entry.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-identifiers" target="_blank">Abstract Test Case 'Download Service feed identifiers'</a>]]></con:description><con:settings/><con:testStep type="calltestcase" name="Initialization and basic checks" id="5404b3db-ed62-40ca-990b-6a5a7ba58574"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bb8df909-494c-46d8-ace0-31e18b57b12f</con:targetTestCase><con:properties><con:property><con:name>etf.ShortDescription</con:name></con:property><con:property><con:name>etf.Author</con:name></con:property><con:property><con:name>etf.LastEditor</con:name></con:property><con:property><con:name>etf.ExpectedResults</con:name></con:property><con:property><con:name>etf.CreationDate</con:name></con:property><con:property><con:name>etf.LastUpdateDate</con:name></con:property><con:property><con:name>etf.Version</con:name></con:property><con:property><con:name>etf.AssociatedRequirements</con:name></con:property><con:property><con:name>etf.Status</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="1840a793-e8dd-4cd3-8fe8-dea3a0f24180"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2eed899b-610d-4573-b4f8-2a030769de7c" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks each feed entry ID.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="dc7f4c35-09cf-4625-9815-71df592f9ab4" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="2fa4697e-1fe7-45ad-9f4a-c2ae0ebc2864" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ad30bd95-a379-400a-acc3-3cd0afb77c0a" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="794b3dfa-4d1b-42ca-878d-93431f397473" name="Each entry has an id"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[string-length(atom:id)=0]",
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6359d6da-1e37-423f-b543-018979b665e2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Link to OpenSearch Description document" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if it provides a link to an 'OpenSearch Description document' and if the it can be retrieved.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 8: The 'Download Service Feed' shall contain an Atom 'link' element that
contains a link to an OpenSearch description document for the Download
Service. The value of the 'rel' attribute of this element shall be 'search', the
'hreflang' attribute shall use the appropriate language code and the value of
the 'type' attribute shall be 'application/opensearchdescription+xml'.</li>
<li>TG Requirement 39: A simple service to perform the Describe Spatial Dataset and Get Spatial Data
Set operations shall be provided and described by an OpenSearch description
document.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-link-opensearch-description-document" target="_blank">Abstract Test Case 'Download Service feed: link OpenSearch Description document'</a>]]></con:description><con:settings/><con:testStep type="calltestcase" name="Initialization and basic checks" id="3d5c4205-a68c-4d85-9483-0cc734eca54f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bb8df909-494c-46d8-ace0-31e18b57b12f</con:targetTestCase><con:properties><con:property><con:name>etf.ShortDescription</con:name></con:property><con:property><con:name>etf.Author</con:name></con:property><con:property><con:name>etf.LastEditor</con:name></con:property><con:property><con:name>etf.ExpectedResults</con:name></con:property><con:property><con:name>etf.CreationDate</con:name></con:property><con:property><con:name>etf.LastUpdateDate</con:name></con:property><con:property><con:name>etf.Version</con:name></con:property><con:property><con:name>etf.AssociatedRequirements</con:name></con:property><con:property><con:name>etf.Status</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="properties" name="Transfer_Properties" id="f4de0046-1805-45c3-992c-bb4c350463f0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>openSearchURL</con:name><con:value>http://www.gis-rest.nrw.de/atomFeed/rest/search/GetDownloadServiceMetadata?service_identifier_code=c2195ebe-dad7-4f5e-9bc3-79a30d3373f3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="27bdfa40-4649-4452-b90a-8d5696cc6eef"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="584889ca-ad27-4fc5-82c9-a4c5ba196607" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks OpenSearch description.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="bc7cdeff-1374-4515-a92e-6113aef2da61" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="341a8eae-c6c1-4880-a893-80bd7448fecf" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7398b5e3-efc7-4f0e-9a19-48b560856e15" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68a277ac-f823-4fd1-96cd-6429651777bd" name="Feed link to OpenSearch Description Document exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists(
	"/atom:feed/atom:link[@rel='search' and @type='application/opensearchdescription+xml']/@href",
	"TR.missingOpenSearchDescriptionDocumentLink"
);

a.isTrue(
	"starts-with(/atom:feed/atom:link[@rel='search' and @type='application/opensearchdescription+xml']/@href, 'http')",
	"TR.openSearchDescriptionDocumentLinkNotAbsolute"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Extract Link" id="c8495b13-1b57-4cb9-95ae-3f688240b451"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Link</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Service Feed</con:sourceStep><con:sourcePath>/*:feed/*:link[@rel='search' and @type='application/opensearchdescription+xml']/@href</con:sourcePath><con:targetType>openSearchURL</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="Get OpenSearch Description" id="342e7d50-b15d-446f-8f83-25807babfb2e"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="69777b5b-1070-435f-9661-481fc9402beb" name="Get OpenSearch Description" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the dataset feed links are correct.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${Transfer_Properties#openSearchURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6998a6f6-66a2-47e5-a70b-503e04415d7c" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="c6c617c6-c3fe-4567-8173-33c5fa109cd3" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5213157c-3e2a-40fd-9ee9-9557678f0260" name="Root element 'OpenSearchDescription' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/os:OpenSearchDescription", "TR.missingOpenSearchDescriptionRootElement");</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Set Language to empty" id="452e5b04-edf4-4698-a4de-25bade284add"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Language</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get OpenSearch Description</con:sourceStep><con:sourcePath>"no-language-found"</con:sourcePath><con:targetType>openSearchLanguages</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="Transfer language" id="8ab7d72c-abe4-458b-875b-0f15bfb70cb4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Language</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get OpenSearch Description</con:sourceStep><con:sourcePath>string-join(/*:OpenSearchDescription/*:Language, ',')</con:sourcePath><con:targetType>openSearchLanguages</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>openSearchLanguages</con:name><con:value>de</con:value></con:property></con:properties></con:testCase><con:testCase id="e12f3530-1b91-4278-9c5b-5470890835f7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Link to WFS Capabilities document" searchProperties="true"><con:description><![CDATA[In case of a 'hybrid implementation' using WFS for implementing direct access: check manually that the download service feed includes a link to the WFS Capabilities document with the "rel" attribute set to "related" and the "type" attribute set to "application/xml".
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 16: In case of a 'hybrid implementation' based on Atom for Part A of [INS NS,
Annex IV] and WFS for Parts B and C of [INS NS, Annex IV], a link shall be
provided to the WFS Capabilities document. Where this is done the 'rel'
attribute shall have the value 'related' and the 'type' attribute shall have the
value 'application/xml'</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-wfs-link" target="_blank">Abstract Test Case 'Download Service feed: link to WFS Capabilities document'</a>]]></con:description><con:settings/><con:testStep type="calltestcase" name="Initialization and basic checks" id="0a1d5f53-3f92-45bc-9f1d-8a6512e64f9a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bb8df909-494c-46d8-ace0-31e18b57b12f</con:targetTestCase><con:properties><con:property><con:name>etf.ShortDescription</con:name></con:property><con:property><con:name>etf.Author</con:name></con:property><con:property><con:name>etf.LastEditor</con:name></con:property><con:property><con:name>etf.ExpectedResults</con:name></con:property><con:property><con:name>etf.CreationDate</con:name></con:property><con:property><con:name>etf.LastUpdateDate</con:name></con:property><con:property><con:name>etf.Version</con:name></con:property><con:property><con:name>etf.AssociatedRequirements</con:name></con:property><con:property><con:name>etf.Status</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="f9e282c5-9970-476c-8414-b840effb574a"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="51062a74-24b3-417d-a6b1-fea76936b067" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed to let the Tester check a link to the WFS Capabilities,  if the same data set is available as a WFS 2.0.0 Direct Access Download Service.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="e7139814-6e2e-46a0-9840-f5a4966e1fc3" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="b5d07157-04fd-49a7-abe9-ea9fa99df135" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2e97c6ff-cd40-4841-9e5a-75dd43206104" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1b6abbe5-c210-4935-b480-5f9ef24744a1" name="Check link to WFS Capabilities document"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.notExists(
	"/atom:feed",
	"TR.manual.checkLinkToDirectAccessDownloadService"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5d7ccb56-cc7d-4517-81df-0efb0cca5c92" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Links dataset metadata records" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if each feed entry has a link to a Dataset metadata record.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 14: Each feed 'entry' in a 'Download Service Feed' shall contain a link to a
Dataset metadata record. This link shall have a 'rel' attribute with a value of
'describedby' and a 'type' attribute with a value 'application/xml'</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-links-dataset-metadata-records" target="_blank">Abstract Test Case 'Download Service feed links dataset metadata records'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Service Feed" id="1b3fcafb-e884-4894-994c-60e9ca525c83"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="0320016b-9c74-4ee3-abc0-7b1f742e0230" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the dataset metadata links are set.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="735c1133-f7b2-450d-a76d-2233016fe4b2" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="d0edfa98-cf55-4959-9fd2-40a0d7ea2c78" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="006e73e0-f55c-4a0e-bb00-f8a0b67c55bf" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="725bc702-044a-4404-b09e-d001ca93d527" name="Link to Dataset Metadata record exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[string-length(atom:link[@rel='describedby' and @type='application/xml']/@href)=0]",
  "TR.missingLinkToDatasetMetadataRecord"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="11de8ff5-6025-4a1c-939a-f65cda991b16" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights element" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if it has a rights element.
<br/>
<br/>
<b>Known limitations: </b> The ATS states that the test case needs to check wheter the value is 'alphanumeric'. This is inappropriate, since the value can contain characters that are not in the range of A-Z,a-z and 0-9, for instance text strings in greek.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 10: The 'rights' element of a feed shall contain information about rights or
restrictions for that feed.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-rights-element" target="_blank">Abstract Test Case 'Download Service feed rights element'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Service Feed" id="c0e89d68-2fb5-49e6-a001-cfdfe37ac91d"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="76668009-1ac5-44e8-976b-6f43113b72d6" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the it provides rights information.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="fc854807-b285-4a38-8aa5-d97cd2044247" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="db8d397e-7760-4c2b-b638-65772e0ccc9e" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a38a26e9-f9de-4f40-aac8-916fc234e34c" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7e9e0ae5-ed9e-4d50-9a00-7c38bd6601fd" name="Feed contains rights information"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/atom:feed/atom:rights",
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1756fabf-84f1-47e0-87da-bafd72512291" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Self-reference link" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if it provides a self-reference link.
<br/>
<br/>
<b>TODO:</b> The ATS states that hreflang should be compared to /atom:feed/atom:title/@xml:lang . This seems inappropriate -at least an additional comparison against /atom:feed/@xml:lang is required.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 7: The 'Download Service Feed' shall contain an Atom 'link' element that
contains an HTTP URI for the 'Download Service Feed' document. The value
of the 'rel' attribute of this element shall be 'self', the 'hreflang' attribute shall
use the appropriate language code and the value of the 'type' attribute shall
be 'application/atom+xml'.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-self-reference-link" target="_blank">Abstract Test Case 'Download Service feed: self-reference link'</a>]]></con:description><con:settings/><con:testStep type="calltestcase" name="OpenSearch Description link exists" id="07e52606-e155-4314-9ddd-9f1b498690be"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6359d6da-1e37-423f-b543-018979b665e2</con:targetTestCase><con:properties><con:property><con:name>openSearchLanguages</con:name><con:value>no-languages-found</con:value></con:property></con:properties><con:returnProperties><con:entry>openSearchLang</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="cfb4cf5f-e35c-490c-bcd4-b740bd221c02"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="9244b877-f160-4793-83c6-13ca5da35ccb" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the self-refernce link is correct.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="0b0380eb-e5be-47d2-844a-8c4c766e8cee" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="d0f601f2-18e6-4480-a57e-2c0756bd4b79" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fec3dd1f-b041-4127-a910-21fcb7bde22a" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9ce5a9ab-ca95-470e-8927-d52b82092e69" name="Self reference equals the Download Service feed URI"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.xtf.*
SOAPUI_I.init(log, context, messageExchange)
final ProjectHelper ph = new ProjectHelper()
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.equals(
  "/atom:feed/atom:link[@rel='self' and @type='application/atom+xml']/@href",
  "/atom:feed/atom:link with @rel='self'",
  messageExchange.getEndpoint(),
  "TR.incorrectFeedSelfReference"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="544cf934-0fe3-4865-88b5-5e12285a393f" name="Self link has proper language references"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.xtf.*
SOAPUI_I.init(log, context, messageExchange)
final ProjectHelper ph = new ProjectHelper()
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

String languages = context.expand( '${OpenSearch Description link exists#openSearchLanguages}' )
log.info("Language: "+languages)

a.exists(
  "/atom:feed/atom:link[@rel='self' and @type='application/atom+xml' and (@hreflang=/atom:feed/@xml:lang or @hreflang=/atom:feed/atom:title/@xml:lang or contains('"+languages+"', @hreflang))]",
  "TR.incorrectFeedSelfReferenceLang"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4675f14c-ae5a-4fde-8c41-9d6b9be5cac0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Title" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if it each entry has a title.
<br/>
<br/>
<b>Known limitations: </b> The ATS states that the test case needs to check wheter the value is 'alphanumeric'. This is inappropriate, since the value can contain characters that are not in the range of A-Z,a-z and 0-9, for instance text strings in greek.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 18: The 'title' element of a feed entry in a Download Service Feed shall be
populated with a human readable title for the feed entry.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-entry-titles" target="_blank">Abstract Test Case 'Download Service feed: entry titles'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Service Feed" id="247f8881-c8e2-462d-a999-96144faee1f3"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="c4176801-6a75-402f-9e1b-493bd8fc9363" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the title is set for each feed entry.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="526d5b82-8ec4-4823-ad22-92e52bcc063e" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="c47d84e2-2b36-4260-abdc-4341b2e5ec51" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="545cc87f-3d0f-4e4d-9378-38476dc21cc7" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0af8c7c0-4fac-49df-b817-86b11bb9f69e" name="Each entry has a title"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[string-length(atom:title)=0]",
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9f5a4899-7076-4aae-b859-6881f870bc41" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Updated feed element date" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if each feed entry provides a 'updated' element.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 19: The 'updated' element of a feed entry in a Download Service Feed shall
contain the date, time and timezone at which the feed entry was last updated.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-updated-element-date" target="_blank">Abstract Test Case 'Download Service feed updated element date'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Service Feed" id="f590f109-ddde-4c22-8f11-1beedc7628d5"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2b7d94dd-0727-4a24-aa9f-daa548aae112" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if provides update information.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="81652ee1-8d6a-4bd7-b73c-7ce6643f4fb1" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="ef9d4618-e673-44c8-baf3-1b4cffe84e9f" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dbeab8fb-c972-4cd3-8de1-663d96d54a8d" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="44374564-e394-4c06-b685-46c9369e29d1" name="Each entry has an element updated"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[year-from-dateTime(xs:dateTime(atom:updated)) &lt;=0]",
  "TR.missingFeedUpdatedInformation"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0c0bf78b-b1e9-46d8-9869-dd3529d51884" name="Date is not before the year 2012"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.isFalse(
  "//atom:entry/atom:updated/year-from-dateTime( xs:dateTime( . ) ) &lt; 2012",
  "TR.dateIsBefore2012"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="afc0153c-5f03-4e66-b0d6-4f866a13fcbb" name="Date is not in the future"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.TimeUtils;
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

final String now = TimeUtils.dateToIsoString( new Date() )

a.isFalse(
  "//atom:entry/atom:updated/xs:dateTime(.) > xs:dateTime('"+now+"')",
  "TR.dateIsInTheFuture"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="59e31b8c-2277-4491-b38b-9b067fd88f9b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Updated element" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if it provides a 'updated' element.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 11: The 'updated' element of a feed shall contain the date, time and timezone at
which the feed was last updated.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-updated-element" target="_blank">Abstract Test Case 'Download Service feed updated element'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Service Feed" id="236bb0dd-3eda-46cd-83c4-7cc7f2fd5b3a"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="02c15ede-d199-41cd-9f60-8d389f4f5da6" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if each title has an element 'updated'.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="1a696ecb-91f0-4291-992d-d50309f756c9" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="e568e2ef-2bf6-4f33-a532-0a8109262273" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="97f57414-5b41-465a-95b0-596c884bc25a" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f8c029e9-6cb9-4b9a-9477-255e4e130ff2" name="Feed contains updated information"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.isTrue(
  "year-from-dateTime(xs:dateTime(/atom:feed/atom:updated)) > 0",
  "TR.missingFeedUpdatedInformation"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="94ae8e41-ca18-4c83-87d8-81de55891d86" name="Date is not before the year 2012"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.isFalse(
  "//atom:entry/atom:updated/year-from-dateTime( xs:dateTime( . ) ) &lt; 2012",
  "TR.dateIsBefore2012"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68cf959b-8629-4c39-89f2-1988e0fa5487" name="Date is not in the future"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.TimeUtils;
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

final String now = TimeUtils.dateToIsoString( new Date() )

a.isFalse(
  "//atom:entry/atom:updated/xs:dateTime(.) > xs:dateTime('"+now+"')",
  "TR.dateIsInTheFuture"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4abfa6f3-4dd7-4a6e-8a07-c172ecf0ed3c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Provide a title element" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if it provides a 'title' element.
<br/>
<br/>
<b>Known limitations: </b> The ATS states that the test case needs to check wheter the value is 'alphanumeric'. This is inappropriate, since the value can contain characters that are not in the range of A-Z,a-z and 0-9, for instance text strings in greek.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 5: The 'title' element of an Atom feed shall be populated with a human readable
title for the feed.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-title" target="_blank">Abstract Test Case 'Download service feed: Provide a title element'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Service Feed" id="c5359a5b-67d8-4b76-aa50-1db7b317029f"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="6bb51bba-5cc1-400c-bbb0-f3ca1c1c05c8" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if it provides a title.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="816b487c-0309-416b-a9b0-2cf5ed326e08" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="4caf026b-3e5e-4dfc-8a35-502c2a0d8c0f" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8aaec96a-4930-40b4-a515-51a2cd999a8d" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9e5db714-8cae-4709-8efd-c793aca80c4c" name="Feed has a title"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/atom:feed/atom:title",
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3b1cf94e-b83c-4c56-9ba5-2bd801010ea4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Separate entries per dataset" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks that each each dataset has a separate entry in the service feed.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 1: Pre-defined Dataset Download Service implementations shall publish separate
datasets as individual entries within an Atom feed.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-entry-per-dataset" target="_blank">Abstract Test Case 'Download service feed: separate entries per dataset'</a>]]></con:description><con:settings/><con:testStep type="testcasedependency" name="Test Case Dependency" id="71933598-4183-43b0-8ba7-cd280b7b59eb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>f3bbb312-6c4a-423a-80cc-0dcce1e9a5c9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="061da0c4-6109-4cff-ba9a-3e4f4eeba872"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="dd90b4db-6b80-41d1-8d41-cb05d4ed35bb" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks that each each dataset has a separate entry in the service feed.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="bdbe3b9d-e494-4266-ae6d-b2c20457ab73" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="f0eeaa26-2b57-4570-a892-40ca0d642d10" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6e15e5c8-d02f-4e2e-b88d-776004dd6ef0" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b18b17b8-8e7f-4df0-9b8c-ce9ac27b4405" name="Dataset identifiers (spatial_dataset_identifier_namespace + spatial_dataset_identifier_code combination) are unique"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.equalPathValues(
	"count(//*:entry[*:spatial_dataset_identifier_code = following-sibling::*/*:spatial_dataset_identifier_code and "+
	"*:spatial_dataset_identifier_namespace = following-sibling::*/*:spatial_dataset_identifier_namespace])",
	"0",
	"TR.uniqueDatasetIdentifiers"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4546bada-0307-42ec-883b-25494233e9a5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Links dataset feed" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if each feed entry contains exactly one dataset feed link with a 'rel' attribute with the value 'alternate' and a 'type' attribute with the 'value' 'application/atom+xml'.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 15: Each feed 'entry' in a 'Download Service Feed' shall contain a single link to a
'Dataset Feed'. This link shall have a 'rel' attribute with a value of 'alternate'
and a 'type' attribute with a value 'application/atom+xml'.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-links-dataset-feed" target="_blank">Abstract Test Case 'Download Service feed links dataset feed'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Service Feed" id="dafcef94-9aa0-44aa-815b-5966d1813b17"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="72c19462-d84d-4250-bc97-d494cdc995c4" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the dataset feed links are correct.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="33789d28-70d9-49eb-be72-66ea2805a04e" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="e50f5512-6bbb-48c5-a298-9e89a65270dc" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bf1d2fe5-b910-4765-8631-b27b1cd16200" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bdd67613-ea66-4e61-a9c5-3bcfb6430d42" name="Each entry has exactly one Dataset Feed link"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "/atom:feed/atom:entry[count(atom:link[@rel='alternate' and @type='application/atom+xml'])!=1]",
  "TR.invalidDatasetFeedLinks"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b0be137f-b987-4050-9991-9939c14558fc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Provide link to metadata record for download service" searchProperties="true"><con:description><![CDATA[The test case requests the Download Service feed and checks if it provides a link to a metadata record.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 6: The 'Download Service Feed' shall contain an Atom 'link' element that links to
the metadata record for this Download Service. The value of the 'rel' attribute
of this element shall be 'describedby' and the value of the 'type' attribute shall
be either 'application/xml'.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/download-service-feed-link-to-metadata-record" target="_blank">Abstract Test Case 'Download service feed: Provide link to metadata record for the download service'</a>]]></con:description><con:settings/><con:testStep type="properties" name="Transfer_Properties" id="96ce6b09-638f-40cd-919b-785cb006117d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>metadataDocumentURL</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceLocatorURL</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="62c56e18-3a6f-4c85-befc-56f47c597583"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="dd2eb123-ceeb-45fd-a67b-de70abdda745" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks that the  metadata record for the download service exists.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="51637bcb-84c0-43de-a410-39cfe7214d42" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="314faeb2-54f4-4cf8-b096-2c8ebab24f95" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="77ef7c73-a8e2-4d40-b296-0f88e45b239f" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a0e0a10e-dd0e-4d2a-99af-1380b78c632e" name="Link to metadata record for the download service exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/atom:feed/atom:link[@rel='describedby' and @type='application/xml' or @type='application/vnd.ogc.csw.GetRecordByIdResponse_xml']",
  "TR.missingLinkToMetadataRecordForDownloadService"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Extract metadata document URL" id="63db16c5-c828-4922-95dd-5db67bc9c203"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Extract metadata document URL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Service Feed</con:sourceStep><con:sourcePath>/*:feed/*:link[@rel='describedby' and (@type='application/xml' or @type='application/vnd.ogc.csw.GetRecordByIdResponse_xml')]/@href</con:sourcePath><con:targetType>metadataDocumentURL</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="Get Metadata Record" id="6a7c69f4-362d-4ea1-8992-19f8f0392b09"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="7386cbe9-a76f-4ee9-9071-aed62255c472" name="Get Metadata Record" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the  metadata record from the Service Feed.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${Transfer_Properties#metadataDocumentURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="c94062c4-1c8b-485d-8ddc-ccf5c342bc6a" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="3b6a24fe-a470-4fb1-829c-52baad1dba5d" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="234062a4-45c2-4013-9038-71b8cc9a7d36" name="Root element 'MD_Metadata' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.isTrue(
	"exists(/gmd:MD_Metadata) or ( count(/*) = 1 and exists(/*/gmd:MD_Metadata) )", 
	"TR.missingMDMetadataRootElement"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7e59dfea-4fb9-404d-a382-0fb3a0038862" name="Resource Locator exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "//gmd:distributionInfo/*/gmd:transferOptions/*/gmd:onLine/*/gmd:linkage/gmd:URL",
  "TR.missingLinkageResourceLocator"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Extract Resource Locator" id="18c66972-5d73-4718-8e9c-439d4032a9fe"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Extract Resource Locator</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Metadata Record</con:sourceStep><con:sourcePath>//*:distributionInfo/*/*:transferOptions/*/*:onLine/*/*:linkage/*:URL</con:sourcePath><con:targetType>resourceLocatorURL</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed from Resource Locator" id="72da1012-15a7-43d6-98d7-d734ec85b613"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="fe29b9d9-c657-464b-a8cc-95d55b6d1598" name="Get Service Feed from Resource Locator" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the document from the Resource Locator and compares the describedby link from the 'Get Service Feed' step with the describedby link from this response.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${Transfer_Properties#resourceLocatorURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="0a21f0ad-a0b9-4d69-a258-51b0555add42" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="0600ff93-ca28-4e15-aeda-2e5ff799aadf" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="56c9a2f1-63ec-4664-8791-fa8b1c231df9" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d38c5dbf-c4ef-4c7e-93e3-4592b895e41c" name="The describedby link from the first response equals the describedby from this response"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.equalPathValuesInStep(
  "/*:feed/*:link[@rel='describedby' and @type='application/xml' or @type='application/vnd.ogc.csw.GetRecordByIdResponse_xml']/@href",
  "Get Service Feed"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="Dataset Feed" id="07c1c315-c45c-4dd5-8be3-6dd12604b337"><con:description>Test module for checking the Dataset Feeds that are referenced by the Download Service Feed.
&lt;br/>&lt;br/>
&lt;b>Known limitations: &lt;/b> Response schema validation is not implemented yet.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="79c5ab9a-fc31-4ecb-8161-4f01fdc7b964" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Check all Feed entries" searchProperties="true"><con:description>Technical Test Case which iterates over all Dataset feed entries in the Download Service Feed. This test case requires the Test Case 'Links dataset feed' in the 'Download Service Feed' Test Suite to pass.</con:description><con:settings/><con:testStep type="properties" name="Transfer_Properties" id="cd9fd714-929c-4557-acf1-bf5e4f7623b7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>serviceFeedXml</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="testcasedependency" name="Each feed entry contains a single dataset feed link" id="d46091ed-55ea-4804-b575-d8921a120ffe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>4546bada-0307-42ec-883b-25494233e9a5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="58b7f026-abf7-4aa2-8352-b12bba979e8e"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="34a87167-81b3-4b6f-808b-c3018cfa1b73" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks the contact information.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="7e59dda7-5894-467a-8898-aab1452b2ca8" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="1d5ee48b-e87f-4c0c-92da-f34bed36185c" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="aeb0ef4a-6785-4e05-867a-a582eebea1f6" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="2a0045bd-d9f0-462c-95f3-340afb510c4a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Transfer Service Feed</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Service Feed</con:sourceStep><con:targetType>serviceFeedXml</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Check all feed entries" id="6cda6835-bf50-4a54-945f-de1cb4f4df90"><con:description>Iterate over all Feed entries.</con:description><con:settings/><con:config><script>import de.interactive_instruments.xtf.*;
SOAPUI_I.init(log,context,testRunner);

ProjectHelper ph = new ProjectHelper();
def serviceFeedXmlHolder = ph.getTransferPropertyAsXml("serviceFeedXml")

def feedEntryURLs = serviceFeedXmlHolder.getNodeValues("/*:feed/*:entry/*:link[@rel='alternate' and @type='application/atom+xml']/@*:href");
log.info("feedEntryURLs: " + feedEntryURLs);

// clear url to test
testRunner.testCase.testSuite.setPropertyValue("feedEntryURL","")

// Check all except the last one
for(int i=0; i&lt;feedEntryURLs.size()-1; i++) {
	final String feedEntryURL = feedEntryURLs[i]
	log.info("Checking URL: " + feedEntryURL)
	testRunner.testCase.testSuite.setPropertyValue("feedEntryURL",feedEntryURL)
}

log.info("Checking URL: " + feedEntryURLs.last())
testRunner.testCase.testSuite.setPropertyValue("feedEntryURL",feedEntryURLs.last())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5cfc2aa9-1e9d-4e1d-a494-49e80907620b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Contact information" searchProperties="true"><con:description><![CDATA[Checks that the feed provides contact information about the individual or organisation responsible for the feed. The author name and email address must be provided.
<br/>
<br/>
<b>Known limitations: </b> The ATS states that the test case needs to check wheter the value is 'alphanumeric'. This is inappropriate, since the value can contain characters that are not in the range of A-Z,a-z and 0-9, for instance text strings in greek.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 25: The 'author' element of a 'Dataset Feed' shall contain current contact information for an individual or organisation responsible for the feed. At the minimum, a name and email address shall be provided as contact information.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-contact-information" target="_blank">Abstract Test Case 'Dataset feed contact information'</a>]]></con:description><con:settings/><con:testStep type="testcasedependency" name="Initialization and basic checks passed" id="6911c18d-4c5b-4d61-bb81-13c1d8f6e591"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ce5a6d78-3a71-4ded-8b2e-fcc4d71d6849</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Dataset Feed" id="ed487595-c12b-42bb-9251-842d352f151b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="43404583-9214-49e4-b7b3-4a3dd3015d56" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="e057985c-82b5-4f78-ba3a-14f5ec7a0e48" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="42507c13-e6d6-4919-93b4-407ad56671b9" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7b7e68a2-367c-4164-83e7-493f2855b1ad" name="Root element 'feed' exists"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f2f63ec7-376e-4a0c-a2fe-6595c3d9592b" name="Feed contains author"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/atom:feed/atom:author/atom:name",
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a3416904-5bc6-45f4-a331-0abf7f0b87fa" name="Feed contains author email"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/atom:feed/atom:author/atom:email",
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="34ccb113-ed5a-40fc-bd4c-1f8c53b447cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HTTP URI" searchProperties="true"><con:description><![CDATA[
Checks that dataset feed provides the HTTP URI of the feed as feed id.
<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 22: The 'id' element of a 'Dataset Feed' shall contain an HTTP URI which dereferences to the feed.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-id" target="_blank">Abstract Test Case 'Dataset feed HTTP URI'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="2aa9841c-d552-45fe-b35a-d4b1659a3855"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="d066d3e5-03ff-4c78-902e-e4c634412eaf" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="ed94db52-6a1d-4103-8645-2128cd464847" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5bf2efd6-136a-4a17-bb8c-ae862a731fbd" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c6c5b1fb-fb8d-4031-876f-e56f61ec96f4" name="Feed id is an URI"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "/atom:feed[substring(atom:id,1,4)!='http']",
  "TR.idNotAnURI"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Transfer ID" id="f3779bf4-fde8-4992-8d34-445f10f7ac23"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Fedd ID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Dataset Feed</con:sourceStep><con:sourcePath>/*:feed/*:id</con:sourcePath><con:targetType>Endpoint</con:targetType><con:targetStep>Get Dataset Feed by ID</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="Get Dataset Feed by ID" id="a6112087-5531-41d1-bfb0-8515d76785cc"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="806c19c1-90ad-44f7-aa9c-c1c9ec9102da" name="Get Dataset Feed by ID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.gis-rest.nrw.de/atomFeed/rest/atom/ce127d47-27d1-4f49-a4dc-65cc1dac339e</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="96b34215-995a-4f6c-b5b3-5d0c38e02647" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="1344e9c6-84c8-4e25-a9fb-9bb384a6f9a0" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8da901fc-2e5f-4b3a-ad5c-dfa6ce85da6a" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9ea79d5a-86ed-4dde-85e6-ab0acf6bbb8a" name="Feed ID equals request URL"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.xtf.*
SOAPUI_I.init(log, context, messageExchange)
final ProjectHelper ph = new ProjectHelper()
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.equals(
  "/atom:feed/atom:id",
  "/atom:feed/atom:id",
  messageExchange.getEndpoint(),
  "TR.feedIdDoesNotReferToEndpoint"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="568e315d-81c7-426d-8e06-d90ada499d9c" name="Response equals response from test step 'Get Dataset Feed'"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.TranslatableAssertionError;

def response = context.expand( '${Get Dataset Feed#Response}' )

if( response.toString() != messageExchange.getResponseContent().toString() ) {
	throw new TranslatableAssertionError("TR.responseNotEqual", "testStep", "Get Dataset Feed");
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5c0ebf08-068d-4973-87b5-0290707fedbf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Download dataset link" searchProperties="true"><con:description><![CDATA[
Test if at least one feed entry is available with at least one link to download a file.
<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 26: Each 'Dataset Feed' shall contain at least one feed entry containing links to download the pre-defined dataset (e.g. as a GML file).</li>
<li>TG Requirement 29: Each feed entry shall contain an Atom 'link' element that links to the pre- defined dataset file described by the entry. The value of the 'rel' attribute of this element shall be 'alternate' and a 'length' attribute (providing the length of the linked resource in octets) shall be provided if possible. Where a dataset is provided in multiple physical files, additional 'link' elements shall be provided in the feed entry, one link for each physical file.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-link-download-dataset" target="_blank">Abstract Test Case 'Link download dataset'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="013a9576-bdf0-4f2c-8521-6e50e3a10ab3"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="3f4b836e-2b53-452c-b27b-a92b3ccdffd5" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" id="d40a2381-4226-4c44-9b39-f31aa7080c68" name="Feed title exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.existsNonEmptyText("/atom:feed/atom:title");</scriptText></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="b69b2305-f8e9-48a5-9dde-1795f5bf7de9" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="3bb3fe48-5cc6-46c2-bb42-94ea3d263aed" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a4ab80d7-03f1-4607-aba7-3fdc48a5d084" name="At least one feed entry is available with at least one link to download a file"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "//atom:entry/atom:link[(@rel='alternate' and @type!='application/atom+xml' ) or (@rel='section')]/@href",
  "TR.missingOneFeedEntryWithDlFile"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Transfer URL" id="8ee30acb-5c8a-4205-8874-55ba86bf8a9c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Trasnfer URL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Dataset Feed</con:sourceStep><con:sourcePath>//*:entry/*:link[(@rel='alternate' and @type!='application/atom+xml' ) or (@rel='section')]/@href</con:sourcePath><con:targetType>Endpoint</con:targetType><con:targetStep>Get file</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="Get file" id="004bc31a-bb94-4a8b-a741-1d9a9000e54d"><con:settings/><con:config method="HEAD" xsi:type="con:HttpRequest" id="0d2db526-c9e6-4c36-b7a0-45b9ac48ff1c" name="Get file" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://www.opengeodata.nrw.de/produkte/infrastruktur_bauen_wohnen/borisplus/BRW/BRW2017_EPSG25832_SHAPE.zip</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="f99befdc-93e5-4089-8926-af36a5a35494" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="e3345203-a8f6-4db5-bf12-814533a4625d" name="HTTP status code is 200, 204, 301, 302 or 303"><con:configuration><codes>200, 204, 301, 302, 303</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Get Dataset Feed and check optional length attributes" id="f518a901-93c1-4613-a6c1-b41d6faf0a5f"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="94f85aec-ddb7-45aa-b303-7495896be8f8" name="Get Dataset Feed and check optional length attributes" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>A link "length" attribute (providing the length of the linked resource in octets *) must be provided if possible.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" id="6d506ce6-087f-451b-94ce-7d58a8edae2f" name="Feed title exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.existsNonEmptyText("/atom:feed/atom:title");</scriptText></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="505e624d-ec6b-48a5-a0f6-925c25cf1452" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="1a1bd393-4cdd-4204-aa58-445458503c79" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f6549364-26ac-4a4a-8f6e-78588a6d68eb" name="Download link has length attribute"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "//atom:entry/atom:link[(@rel='alternate' and @type!='application/atom+xml' and number(@length) > 0) or (@rel='section')]/@href",
  "TR.manual.checkLengthOfDlFile"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="77a041d1-0eb0-46f0-8d57-08f5283556ea" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights element" searchProperties="true"><con:description><![CDATA[Check that the feed's rights element exists.
<br/>
<br/>
<b>Known limitations: </b> The ATS states that the test case needs to check wheter the value is 'alphanumeric'. This is inappropriate, since the value can contain characters that are not in the range of A-Z,a-z and 0-9, for instance text strings in greek.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 23: The 'rights' element of a 'Dataset Feed' shall contain information about rights or restrictions for that feed.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-rights-element" target="_blank">Abstract Test Case 'Rights element'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="fb0b0344-5d6b-4293-8839-b249ddc9fbee"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="378493be-54a9-4190-8084-91a154b5910d" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="cd901e00-008b-42d5-bbae-cf0793bcf243" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="c370ce35-d06c-42a3-8875-fbe4555a9296" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b1ff6b41-ee24-47e8-aad5-693419310aa4" name="Feed contains rights information"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/atom:feed/atom:rights",
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9d8b99ed-1360-4d01-ad39-4b167f8dcca6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Title" searchProperties="true"><con:description><![CDATA[Check that the feed's title is non-empty text.
<br/>
<br/>
<b>Known limitations: </b> The ATS states that the test case needs to check wheter the value is 'alphanumeric'. This is inappropriate, since the value can contain characters that are not in the range of A-Z,a-z and 0-9, for instance text strings in greek.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 21: The 'title' element of a 'Dataset Feed' shall be populated with a human readable title for the feed.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-title" target="_blank">Abstract Test Case 'Title'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="bab92e23-e681-41e9-980f-59794067365d"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2967c321-9292-4236-8576-cd39564ee1b8" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="957ff43d-aaee-449a-9c05-ae93e373cfc1" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="446b58f4-85b6-4892-aad0-9c2f7939a82d" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267fb057-fd3c-4cd8-bc35-19cc199575cf" name="Feed title exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.existsNonEmptyText("/atom:feed/atom:title");</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0218d717-6b00-460d-94cc-48039accb6ea" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Updated element" searchProperties="true"><con:description><![CDATA[
Check if the updated element provides a valid date. The date must not be in the future or before the year 2012.

<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 24: The 'updated' element of a 'Dataset Feed' shall contain the date, time and timezone at which the feed was last updated.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-updated-element" target="_blank">Abstract Test Case 'Updated element'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="7d57ba11-1df9-4bb2-aa77-440a313392fd"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="9659e8c0-ebfc-4256-851e-3723b3544117" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="ad8d88cd-6673-4ab1-ad28-a320bc7e2d74" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="1690699e-6bcd-4c07-bd29-aced03506d36" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e785106d-a4fe-448f-8167-9eeb514661e7" name="Updated element exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.isTrue(
  "year-from-dateTime(xs:dateTime(/atom:feed/atom:updated)) > 0",
  "TR.missingFeedUpdatedInformation"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="efdd906b-d2f5-435e-a7b9-4a0ae838388f" name="Date is not before the year 2012"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.isFalse(
  "//atom:entry/atom:updated/year-from-dateTime( xs:dateTime( . ) ) &lt; 2012",
  "TR.dateIsBefore2012"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ca40e458-362b-440c-a992-6efabf463339" name="Date is not in the future"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.TimeUtils;
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

final String now = TimeUtils.dateToIsoString( new Date() )

a.isFalse(
  "//atom:entry/atom:updated/xs:dateTime(.) > xs:dateTime('"+now+"')",
  "TR.dateIsInTheFuture"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8d0d9cdd-efca-42e8-ad1f-7eb66aa638d5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Each entry has CRS information" searchProperties="true"><con:description><![CDATA[
Check that each entry in the Dataset feed one valid category element is provided for the CRS.
<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 35: Each CRS representation shall have a 'category' element which refers to the CRS definition and code.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-crs" target="_blank">Abstract Test Case 'Each entry has CRS information'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="b84cb78c-b67f-451a-a4b3-510178c03621"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="4d0ac461-85b7-48ab-bcb4-6333af27dcd2" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="5686bf92-0937-43f9-894c-a6fbfcce14d9" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="3f955f5f-aa23-4e9c-b2b6-ced8d7e6a5ef" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c5baa617-99df-453c-89d5-889050c29330" name="Each entry has an element category, including a term and label, to refer to CRSs"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[count(atom:category[string-length(@term)>0 and string-length(@label)>0])&lt;1]",
  "TR.missingCategory"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b2a3b021-7992-4db1-ae8a-f4b214e54a23" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Language for download link" searchProperties="true"><con:description><![CDATA[Check that each entry which has more than one download link provides the hreflang attribute to indicate the language of the target dataset.
<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 31: Where alternative language representations of datasets are linked to, the 'hreflang' attribute of the link element shall be used to indicate the language of the target dataset as described in the Atom specification.</li>
<li>TG Requirement 38: Where a feed is made available in alternative languages, links shall be provided to these alternative representations. These links shall each use the 'hreflang' attribute to indicate the language of the alternative representation. The value of the 'rel' attribute for these link elements this element shall be 'alternate'.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-dataset-language" target="_blank">Abstract Test Case 'Language for download link'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="207c5c35-db32-41ba-879e-1e808b7489c6"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="bb96c81b-4f19-4bb3-b457-57beb6c32a22" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="7e4fda51-4006-4f3e-a6f4-7db68392fc11" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="49422432-0c1b-4af3-bfa2-251d5ae79228" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f0a33a4d-c92f-4baf-85cb-b4abbc0ba1ce" name="If an entry has more than 1 download link, test that each of these download links provides the hreflang attribute"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.xtf.*
SOAPUI_I.init(log, context, messageExchange)
final ProjectHelper ph = new ProjectHelper()
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.isTrue(
  "count(//*:entry/*:link[(@rel='alternate' and @type!='application/atom+xml') or (@rel='section')])=1 or "+ 
  "count(//*:entry/*:link[(@rel='alternate' and @type!='application/atom+xml') or (@rel='section')]/@hreflang) = "+ 
  "count(//*:entry/*:link[(@rel='alternate' and @type!='application/atom+xml') or (@rel='section')])",
  "TR.missingLanguageForDownloadLink"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="55c069c6-94a5-4651-9af9-8246cc146022" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Links for Spatial Object Types" searchProperties="true"><con:description><![CDATA[
Test if the dataset feed contains at least one link to a registry
<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 28: Each feed shall contain an Atom 'link' element for each INSPIRE Spatial Object Type in the dataset. The link shall refer to the INSPIRE Registry unless the data does not conform to any Data Specification in which case a link to a local definition of the Spatial Object Type shall be used instead. The value of the 'rel' attribute of this element shall be 'describedby'. For definitions in the
INSPIRE registry the value of the 'type' attribute shall be 'text/html'.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-links-spatial-object-types" target="_blank">Abstract Test Case 'Links for Spatial Object Types'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="7b0a0bbe-f703-489c-8693-efcaf6161199"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="caec50a1-baa2-4695-a03e-01f50ff5da42" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="76133e1d-5614-401d-852e-4ef8815a1cef" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="abd27331-1785-46d9-86f2-d2139848a4c7" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f8519e33-7b0f-41c1-8b4f-1c2ba30b2a17" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d82ba567-ee3b-4df4-be82-dc754c146e97" name="Test if the dataset feed contains at least one link to a registry"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
	"/atom:feed/atom:link[@rel='describedby' and @type='text/html']", 
	"TR.missingLinkToRegistry"
);

a.existsNonEmptyText(
	"/atom:feed/atom:link[@rel='describedby' and @type='text/html']/@href",
	"/atom:feed/atom:link[@rel='describedby' and @type='text/html']/@href", 
	"TR.missingLinkToRegistry"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="59246a83-610b-4a03-9864-c882200e24ab" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Multiple links for multiple physical files" searchProperties="true"><con:description><![CDATA[
Test for dataset which are provided in multiple physical files, that each file is linked via a separate link element. Each of these link elements shall have a "rel" value equal to "section".
<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 32: Where a dataset is provided in multiple physical files: each file shall be linked to via a separate 'link' element. Each of these 'link' elements shall have a 'rel' value equal to 'section'.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-multiple-files" target="_blank">Abstract Test Case 'Multiple links for multiple physical files'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="34caf1a6-eb2a-449d-9fb0-713f1dc1cabc"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="56368c53-c490-4470-8c9b-ba4e8077306c" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="f1af7b9e-1d16-4c06-8661-46de0db09a2b" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="dbc6c6c4-09ef-47de-afe4-7fcea6ee8422" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="63eeee36-af99-4c6b-8afb-470859d16828" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3c96db82-a589-4a37-bcfd-73164aa74438" name="Number of section links must not be exactly 1"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.notExists(
	"//*:entry[count(./*:link[@rel='section']) eq 1]",
	"TR.multipleLinksForMultipleFilesExpected"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6e6a47ed-d7b8-406a-9cd5-e1abf4652cf0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Separate entries for each format/CRS combination" searchProperties="true"><con:description><![CDATA[Test that the Dataset Feed contains separate entries for each format/CRS combination in which the pre-defined dataset is made available for download.
<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 27: Each 'Dataset Feed' shall contain separate entries for each format/CRS combination in which the pre-defined dataset is available to download.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-entries" target="_blank">Abstract Test Case 'Separate entries for each format/CRS combination'</a>]]></con:description><con:settings/><con:testStep type="properties" name="Transfer_Properties" id="db77efab-6a81-4e08-814d-cad3b6af1275"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>categories</con:name><con:value>http://www.opengis.net/def/crs/EPSG/0/25832,http://www.opengis.net/def/crs/EPSG/0/25832,http://www.opengis.net/def/crs/EPSG/0/25832,http://www.opengis.net/def/crs/EPSG/0/25832,http://www.opengis.net/def/crs/EPSG/0/25832,http://www.opengis.net/def/crs/EPSG/0/25832,http://www.opengis.net/def/crs/EPSG/0/25832</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="testcasedependency" name="CRS information" id="1c20a4dc-c5ee-4442-8014-8910c2ac9b4e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b87b5132-cb6c-44cb-9215-e588fc1e3344</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="c2cdbb58-dbd6-4d34-a2a8-a6ae9b81320a"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="cef2891e-75e0-4ba7-9040-4b74f2b82a78" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks the CRS information.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d70a53f2-2100-4d59-b44a-2e26834d370e" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="755b16af-dd85-46d3-8215-9cd4a75b6e6f" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d7cfd878-1d91-4cf2-88b7-2f353a6cef78" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ca90b1e6-1fba-41f6-a573-07f914e4d335" name="Each entry has an element category, including a term and label, to refer to CRSs."><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[count(atom:category[string-length(@term)>0 and string-length(@label)>0])&lt;1]",
  "TR.missingCategory"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="a0a2ff26-1e10-40ab-960c-4423c452a197"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Categories</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Service Feed</con:sourceStep><con:sourcePath>string-join(//*:entry/*:category[string-length(@term)>0 and string-length(@label)>0]/@term, ',')</con:sourcePath><con:targetType>categories</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="Get Dataset Feed" id="76d165b9-d41b-45eb-b7e6-27fc900f7f15"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="e3bc1024-36a3-4a7a-804d-f9c1da35c6a4" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Dataset Feed and checks the CRS and alternate link combinations.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="a2fd9611-3fc5-4fb3-a708-e5400fd2b9c0" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="03b95227-e284-4279-87f2-9928c6a4eccc" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="450d4218-9461-496d-aa2f-33a2b3b8389b" name="Root element 'feed' exists"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="c15a6218-8819-40b8-a364-eb9720a3838b" name="Exactly one category per entry"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.equals(
	"count(//atom:entry[count(atom:category[@term])>1])",
	"//atom:entry[count(atom:category[@term])>1]",
	"0",
	"TR.exactlyOneCategoryPerEntry"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="acf3709f-6fc4-4d4c-b025-2b49f702bbc5" name="Exactly one alternate link type per Dataset feed entry"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.equals(
	"count(//atom:entry[count(distinct-values(atom:link[@rel='alternate']/@type))>1])",
	"//atom:entry[count(distinct-values(atom:link[@rel='alternate']/@type))>1]",
	"0",
	"TR.exactlyOneAlternateLinkTypePerEntry"
);</scriptText></con:configuration></con:assertion><con:assertion type="XQuery Match" id="81bdd847-687d-4597-ba58-99963ff3635a" name="Alternate link types and CRS combinations are unique"><con:configuration><path><![CDATA[<etfTranslate what='TR.uniqueAlternateLinkTypes'>
{

    let $sortedValues := for $entry in //*:entry
    order by $entry/*:category[1]/@term, $entry/*:link[@rel = 'alternate'][1]/@type
    return concat('CRS ', $entry/*:category[1]/@term, ' with type ', $entry/*:link[@rel = 'alternate'][1]/@type, '   ')
    
    let $duplicates := $sortedValues[let $pos := position() return . = $sortedValues[$pos+1]]
    let $duplicateCount := count( $duplicates )
    let $distinctDuplicates := distinct-values( $duplicates )
    
    return if ($duplicateCount > 0) then 
        (<count> { $duplicateCount } </count>,<duplicates> { $distinctDuplicates } </duplicates>) 
        else ()

}
</etfTranslate>]]></path><content>&lt;etfTranslate what='TR.uniqueAlternateLinkTypes'/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e118dccc-6f1b-4376-a577-7e8ae13cd41e" name="Category terms in this Dataset feed exist in the Download Service Feed"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

final String terms = context.expand( '${Transfer_Properties#categories}' );
log.info("Download Service Feed terms: "+terms);

a.notExists(
	"//atom:entry/atom:category[string-length(@term)>0 and string-length(@label)>0 and not(contains('"+terms+"', @term))]",
	"TR.atLeastOneCategoryNotInServiceFeed"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7e03feba-57eb-4ca1-bb30-1c265f65a03f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Use INSPIRE media-types only" searchProperties="true"><con:description><![CDATA[Test that only media types listed in the INSPIRE media-types register are used.
<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 30: The 'type' attribute of the link element shall be used to indicate the media type of resource that will be returned if the link is resolved. A valid media type must be used for the value of this attribute; if the media type is not registered with IANA it should still follow the conventions for unregistered media types.</li>
<li>TG Requirement 34: Only media types listed in the INSPIRE media-types register shall be used.</li>

</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-link-media-type" target="_blank">Abstract Test Case 'Use INSPIRE media-types only'</a>]]></con:description><con:settings/><con:testStep type="properties" name="Transfer_Properties" id="3bda7cfc-b100-44bb-90e6-c3592561f0e1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>mediaTypes</con:name><con:value>x-shapefilex-filegdbgml+xmlx-gmzvnd.google-earth.kml+xmlvnd.google-earth.kmzx-ecwx-ascii-gridx-oracledumpx-lasx-lazx-tabx-tab-rasterx-worldfile tiffjp2 csv</con:value></con:property><con:property><con:name>mediaTypeUrl</con:name><con:value>https://inspire.ec.europa.eu/media-types/text</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Get INSPIRE Media Types" id="8ef21a6b-902d-4585-ae34-e5af27262ef2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Get INSPIRE Media Types" id="b759303e-f4cd-4dce-bdca-814f46ad1175" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Get the list of INSPIRE media types from https://inspire.ec.europa.eu/media-types with 'Accept'-Header 'application/atom+xml'</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/atom+xml" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://inspire.ec.europa.eu/media-types</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="c947b341-320a-4f0b-96aa-3a351ee25a10" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="HTTP status code is 200" id="e3c9511c-4101-4915-81b9-aba6e2072815"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="44852025-6fca-456f-acf1-95e7c7f2dd8a" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3df8c60f-a520-4f3a-afa0-1446c757112c" name="ID is INSPIRE media types"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists(
	"/atom:feed/atom:id[contains(., '://inspire.ec.europa.eu/media-types')]",
);</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Iterate over Media Type entries" id="0b46fce1-085e-4564-b97c-dce9ed762b8f"><con:settings/><con:config><script>import de.interactive_instruments.xtf.*;
SOAPUI_I.init(log,context,testRunner);
import de.interactive_instruments.UriUtils;

ProjectHelper ph = new ProjectHelper();
def xmlHolder = ph.getTestStepResult("Get INSPIRE Media Types")

def mediaTypeUrls = xmlHolder.getNodeValues( "/*:feed/*:entry/*:link[@rel='self']/@href" );
def mediaBaseTypes = xmlHolder.getNodeValues( "/*:feed/*:entry/*:title" );
log.info("mediaTypeUrls: " + mediaTypeUrls);

// clear url to test
ph.setTransferProperty("mediaTypeUrl", "")
ph.setTransferProperty("mediaTypes", "")

for(int i=0; i &lt; mediaTypeUrls.size(); i++) {
	final String url = mediaTypeUrls[i];
	final String baseType = mediaBaseTypes[i];

	log.info("Using URL: "+url)
	ph.setTransferProperty("mediaTypeUrl", url)
	ph.runTestStep("Get INSPIRE Media Subtype");
	def respXmlHolder = ph.getTestStepResult("Get INSPIRE Media Subtype")
	def extractedMediaTypes = respXmlHolder.getNodeValue( "string-join(/*:feed/*:entry/*:title, '')" );
	final String mediaTypes = ph.getTransferProperty("mediaTypes")
	if(mediaTypes!="") {
		ph.setTransferProperty("mediaTypes", mediaTypes+" "+extractedMediaTypes)
	}else{
		ph.setTransferProperty("mediaTypes", extractedMediaTypes)
	}
}

ph.disableTestSteps(["Get INSPIRE Media Subtype"]);</script></con:config></con:testStep><con:testStep type="httprequest" name="Get INSPIRE Media Subtype" id="0531fe14-2169-4a9e-a1da-30040ea73277" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Get INSPIRE Media Subtype" id="4396cec5-e91d-45ec-96ba-ff4adfc3d10e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Get the list of INSPIRE media sub types with 'Accept'-Header 'application/atom+xml'</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/atom+xml" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${Transfer_Properties#mediaTypeUrl}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" id="7b4d43eb-cfbd-47b2-aeae-9d1fc802d78d" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="HTTP status code is 200" id="7389eee5-84b7-4333-8848-9f5b394c9d67"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="75bb53c4-17e8-4cb4-b6c6-72a5c6cc1819" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>Transfer_Properties#mediaTypeUrl</con:name><con:value>Transfer_Properties#mediaTypeUrl</con:value><con:style>TEMPLATE</con:style><con:default>Transfer_Properties#mediaTypeUrl</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get Dataset Feed" id="af1e117e-aac8-4ada-8750-6eaee997df3c"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="e46405cb-0bb3-406c-8bb6-ae9a1dbcf338" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Get the Dataset Feed and check if it contains valid INSPIRE media types</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="b6a56e5f-482f-4b20-85d3-6b052872f9d4" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="f2e49918-0cf7-4e6d-8c6c-941ef3f85113" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9bc2521f-a127-45d6-aaaa-18f9b623ab84" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="XQuery Match" id="b88e3063-f589-47ef-8ef3-18a87d85c4f6" name="Only media types listed in the INSPIRE media-types register at https://inspire.ec.europa.eu/media-types/ shall be used"><con:configuration><path><![CDATA[declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

<etfTranslate what="TR.notAnInspireMediaType">
{
for $entry in //atom:entry
where contains('${#mediaTypes}', $entry/atom:link[@rel='alternate']/@type)!=true
return
(<links>$entry/atom:link[@rel='alternate']/@href</links>,
<ids>$entry/atom:id</ids>,
<types>$entry/atom:link[@rel='alternate']/@type</types>)
}
</etfTranslate>]]></path><content>&lt;etfTranslate what="TR.notAnInspireMediaType"/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0eac5cf6-1464-47d2-acfe-ff4ad8290993" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Provide guidance for downloading multiple physical files" searchProperties="true"><con:description><![CDATA[Test that a description of the dataset structure is provided either in an atom "content" element as free text, or in an external document which is the target of another "link" element where a dataset is provided in multiple physical files.<br/>
<br/>
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 33: Where a dataset is provided in multiple physical files: a description of the dataset structure shall be provided EITHER in an atom 'content' element as free text, OR in an external document which is the target of another 'link' element. Where a 'link' element is used this element shall have a 'rel' value equal to 'alternate' and a suitable media type shall be used for the 'type' value.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-atom/3.1/atom-pre-defined/dataset-feed-multiple-files-description" target="_blank">Abstract Test Case 'Provide guidance for downloading multiple physical files'</a>]]></con:description><con:settings/><con:testStep type="httprequest" name="Get Dataset Feed" id="76ab47a4-4bb4-494d-8f01-66088b6ef856"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="f9fc89e9-96cd-4f0b-bee2-472464788b5f" name="Get Dataset Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#feedEntryURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="10178b9c-8e01-498c-8975-2d49fff98a21" name="HTTP status code is 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="15995736-59e8-4c5e-ba0a-bb0c23659a96" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1d15c470-afac-43ee-a42f-677acd4d2ea7" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f22143da-6d29-44de-8723-b11e85e7b441" name="Guidance exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.isTrue(
	"empty(//atom:entry[./atom:link[@rel='section'] and count(./atom:link[@rel='alternate'])=0 and count(./atom:content) = 0])",
	"TR.missingGuidanceForDownloadingMultipleFiles"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TODO Feed Elements Mandatory" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="01859f31-5d26-452b-a2cc-6d99b91117a1" disabled="true"><con:settings/><con:testStep type="properties" name="Properties" id="618c326c-1e73-4fb4-a71a-d5ce4ae7d62c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>feedXml</con:name><con:value><![CDATA[<feed xmlns="http://www.w3.org/2005/Atom" xmlns:georss="http://www.georss.org/georss" xmlns:inspire_dls="http://inspire.ec.europa.eu/schemas/inspire_dls/1.0">
   <title>INSPIRE Download Service Feed: Atom-Feed Digitale Orthophotos BodenauflÃ¶sung 20 cm</title>
   <link href="https://www.opengeodata.nrw.de/produkte/geobasis/dop/dop20/index.html" rel="alternate" title="HTML Version: Atom-Feed Digitale Orthophotos BodenauflÃ¶sung 20 cm" type="text/html"/>
   <link href="https://apps.geoportal.NRW.de/soapServices/CSWStartup?Service=CSW&amp;Version=2.0.2&amp;Request=GetRecordById&amp;ElementSetName=full&amp;outputSchema=http://www.isotc211.org/2005/gmd&amp;Id=c72796a4-71af-421d-8a2e-d220f9de6c94" rel="describedby" title="Download Service Feed Metadata" type="application/xml"/>
   <link href="https://www.opengeodata.nrw.de/produkte/geobasis/dop/dop20/c72796a4-71af-421d-8a2e-d220f9de6c94" hreflang="de" rel="self" title="INSPIRE Download Service Feed: Atom-Feed Digitale Orthophotos BodenauflÃ¶sung 20 cm" type="application/atom+xml"/>
   <author>
      <name>Geobasis NRW</name>
      <email>geobasis@bezreg-koeln.nrw.de</email>
   </author>
   <subtitle type="html">Download des NRW-Datenbestands Digitale Orthophotos BodenauflÃ¶sung 20 cm (DOP20) als Atom-Feed.</subtitle>
   <id>https://www.opengeodata.nrw.de/produkte/geobasis/dop/dop20/c72796a4-71af-421d-8a2e-d220f9de6c94</id>
   <rights>Nutzungsbedingungen: Ab 01.01.2017 gelten die Lizenzbedingungen â€žDatenlizenz Deutschland - Namensnennung - Version 2.0â€œ bzw. â€ždl-de/by-2-0â€� (https://www.govdata.de/dl-de/by-2-0) mit den dort geforderten Angaben zum Quellenvermerk. Als Rechteinhaber und Bereitsteller ist â€žLand NRWâ€œ, sowie das Jahr des Datenbezugs in Klammern, als Datensatz (URI) ist der Ressourcen-Identifikator https://registry.gdi-de.org/id/de.nw/DOP20 anzugeben. HaftungsbeschrÃ¤nkung - FÃ¼r die KompatibilitÃ¤t der zur VerfÃ¼gung gestellten Daten oder eines Dienstes mit den Systemen des Nutzers, die inhaltliche Richtigkeit, eine bestimmte DatenqualitÃ¤t oder die dauerhafte Bereitstellung wird keine Haftung Ã¼bernommen. Davon ausgenommen sind SchadensersatzansprÃ¼che auf Grund einer Verletzung des Lebens, des KÃ¶rpers und der Gesundheit. Ebenfalls ausgenommen ist die Haftung fÃ¼r SchÃ¤den, die auf einer vorsÃ¤tzlichen oder grob fahrlÃ¤ssigen Pflichtverletzung beruhen. Eine Ã¼ber gesetzliche SchadensersatzansprÃ¼che hinausgehende Haftung ist ausgeschlossen.</rights>
   <updated>2017-01-16T22:00:00Z</updated>
   <entry>
      <title>INSPIRE Dataset Feed: Digitale Orthophotos BodenauflÃ¶sung 20 cm</title>
      <link href="https://www.opengeodata.nrw.de/produkte/geobasis/dop/dop20/f76697a2-42d8-486e-9f30-c3b4c71506e2" rel="alternate" title="INSPIRE Dataset Feed: Digitale Orthophotos BodenauflÃ¶sung 20 cm" type="application/atom+xml"/>
      <link href="https://www.opengeodata.nrw.de/produkte/geobasis/dop/dop20/index.html" rel="alternate" title="HTML Version: Digitale Orthophotos BodenauflÃ¶sung 20 cm" type="text/html"/>
      <link href="https://apps.geoportal.NRW.de/soapServices/CSWStartup?Service=CSW&amp;Version=2.0.2&amp;Request=GetRecordById&amp;ElementSetName=full&amp;outputSchema=http://www.isotc211.org/2005/gmd&amp;Id=f76697a2-42d8-486e-9f30-c3b4c71506e2" rel="describedby" title="INSPIRE Dataset Feed: Digitale Orthophotos BodenauflÃ¶sung 20 cm" type="application/xml"/>
      <category label="EPSG:25832" term="http://www.opengis.net/def/crs/EPSG/0/25832"/>
      <author>
         <name>Geobasis NRW</name>
         <email>geobasis@bezreg-koeln.nrw.de</email>
      </author>
      <id>https://www.opengeodata.nrw.de/produkte/geobasis/dop/dop20/c72796a4-71af-421d-8a2e-d220f9de6c94</id>
      <updated>2017-02-28T22:00:00Z</updated>
      <summary type="html"><![CDATA[Orthophotos sind hochauflÃ¶sende, verzerrungsfreie, maÃŸstabsgetreue Abbildungen der ErdoberflÃ¤che. Sie werden durch photogrammetrische Verfahren in Kenntnis der Orientierungsparameter und unter Hinzunahme eines Digitalen GelÃ¤ndemodells aus Luftbildern hergestellt, die als Senkrechtaufnahmen vorliegen. Digitale Orthophotos sind georeferenziert, liegen flÃ¤chendeckend vor und werden in einem 3-jÃ¤hrigen Zyklus erneuert. Sie werden nach dem Produktstandard des Landes, der auf den Festlegungen eines AdV-Standards (AdV Arbeitsgemeinschaft der Vermessungsverwaltungen der LÃ¤nder) beruht, hergestellt und nach ihrer BodenauflÃ¶sung (cm pro Pixel; Ground Sample Distance, GSD) bezeichnet. Digitale Orthophotos DOP20 weisen eine BodenauflÃ¶sung von 20cm/Pixel auf. Es handelt sich um 4-Kanal Multispektralbilder mit der Kanalbelegung RGBI (Rot-GrÃ¼n-Blau-Infrarot). </br></br><strong>Hinweis:</strong> Diese Daten stehen unter der <a href="https://www.govdata.de/dl-de/by-2-0" target="_blank">Datenlizenz Deutschland Namensnennung 2.0</a>, Bereitsteller: Land NRW (2017). Informationen zum korrekten Quellenvermerk finden Sie <a href="http://www.bezreg-koeln.nrw.de/brk_internet/geobasis/lizenzbedingungen_geobasis_nrw.pdf" target="_blank">hier</a>.</br></br><strong>WeiterfÃ¼hrende Informationen:</strong></br><a target="_blank" href="http://www.bezreg-koeln.nrw.de/brk_internet/geobasis/luftbilderzeugnisse/digitale_orthophotos/index.html">http://www.bezreg-koeln.nrw.de/brk_internet/geobasis/luftbilderzeugnisse/digitale_orthophotos/index.html</a></br><a target="_blank" href="https://www.geoportal.nrw/suche?lang=de&searchTerm=f76697a2-42d8-486e-9f30-c3b4c71506e2">Metadaten im GEOportal.NRW</a>]]]]>><![CDATA[</summary>
      <georss:box>50.30 5.80 52.60 9.50</georss:box>
      <inspire_dls:spatial_dataset_identifier_code>DOP20</inspire_dls:spatial_dataset_identifier_code>
      <inspire_dls:spatial_dataset_identifier_namespace>https://registry.gdi-de.org/id/de.nw</inspire_dls:spatial_dataset_identifier_namespace>
   </entry>
</feed>]]></con:value></con:property><con:property><con:name>dataFeedURL</con:name><con:value>https://www.opengeodata.nrw.de/produkte/geobasis/dop/dop20/f76697a2-42d8-486e-9f30-c3b4c71506e2</con:value></con:property><con:property><con:name>dataSetURL</con:name><con:value>https://www.opengeodata.nrw.de/produkte/geobasis/dop/dop20/dop20_05366044_ZÃ¼lpich_EPSG25832_JPEG2000.zip</con:value></con:property><con:property><con:name>dataFeedURLEncoded</con:name><con:value>https://www.opengeodata.nrw.de/produkte/geobasis/dop/dop20/f76697a2-42d8-486e-9f30-c3b4c71506e2</con:value></con:property><con:property><con:name>mediaTypes</con:name><con:value>application/x-shapefile,application/x-filegdb,image/tiff,application/gml+xml,application/x-gmz,application/vnd.google-earth.kml+xml,application/vnd.google-earth.kmz,image/jp2,application/x-ecw,application/x-ascii-grid,application/x-oracledump,application/x-las,application/x-laz,application/x-tab,application/x-tab-raster,text/csv,application/x-worldfile</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="GetServiceFeed" id="6a056425-bb10-4c60-825f-918a41486935"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetServiceFeed" id="ac3742b1-1677-4051-96ef-df26b26d0987" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Service Feed available" id="72b3ddf5-299c-4614-98a5-6d6bff20f601"><con:configuration><codes>200,301,302,303</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransferFeed" id="e9094e32-3be8-4bb5-b6c5-01fa6784827e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="false" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>feedXml</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetServiceFeed</con:sourceStep><con:sourcePath/><con:targetType>feedXml</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="RunTestsForAllDatasetFeeds" id="1d725a88-4a09-4d3c-86f2-a5a530c5788e"><con:settings/><con:config><script>props = testRunner.testCase.testSteps['Properties']

// Start parsing of Service Feed
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def feedXmlHolder = groovyUtils.getXmlHolder(props.getPropertyValue("feedXml"))
feedXmlHolder.namespaces["atom"] = "http://www.w3.org/2005/Atom";
feedXmlHolder.namespaces["xlink"] = "http://www.w3.org/1999/xlink";

// Pull out the URLs of the Dataset Feeds
def dataFeedUrlNodes = feedXmlHolder.getNodeValues("//atom:entry/atom:link[@rel='alternate' and @type='application/atom+xml']/@href");

// clear url to run the Dataset Feed tests, set the url to the serviceEndpoint to be sure.
props.setPropertyValue("dataFeedURL",testRunner.testCase.testSuite.project.getPropertyValue("serviceEndpoint"))

// now run Feed test for each dataFeedUrl, to validate Dataset feeds
for( i in dataFeedUrlNodes )
{
   i=i.replaceAll("%7B","{")
   i=i.replaceAll("%7D","}")
   log.info("The Atom feed refers to Dataset Feeds. Now checking Dataset Feed with URL: " + i)
   props.setPropertyValue("dataFeedURL",i)
   props.setPropertyValue("dataFeedURLEncoded",i.replaceAll("&amp;","&amp;amp;"))
   testRunner.runTestStepByName("ValidateDatasetFeed")
   // testRunner.runTestStepByName("Tracer")
   testRunner.runTestStepByName("PropertyTransferDatasetFeedXml")
   testRunner.runTestStepByName("RunTestsForAllDatasetUrls")
   testRunner.runTestStepByName("ResolveDatasetLink")
   // testRunner.runTestStepByName("Run TestCase M-04: Dataset Metadata Mandatory")
}
</script></con:config></con:testStep><con:testStep type="httprequest" name="ValidateDatasetFeed" id="d4c09a50-2618-4207-ae0d-0d5f772b840c"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="ValidateDatasetFeed" id="bf868eb4-63ab-413f-aad3-6a4e2ac465e5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#dataFeedURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-04##AtomLinkSelf: Feed link to self exists and has proper language references" id="a0acb1e7-be24-468d-8647-fc0603312ea6"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $linkself:=/atom:feed/atom:link[@rel='self' and @type='application/atom+xml' and @hreflang=//atom:feed/atom:title/@xml:lang]/@href
return
if ($linkself='${#dataFeedURLEncoded}')
then ""
else "The Atom feed does NOT contain a link to itself including a language reference. Check the element /atom:feed/atom:link with @rel='self'."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req20: Feed title exists" id="8523ae5b-baf3-42e3-9f97-4b75c2d41df2"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $title:=/atom:feed/atom:title
return
if (string-length($title)=0)
then "The Atom feed does NOT contain a Feed Title."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req21: Feed id refers to self URL" id="fed3a553-ca1f-4d25-9d19-bf83d617f84d"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $atomid:=/atom:feed/atom:id
return
if ($atomid!='${#dataFeedURLEncoded}')
then concat("The Atom feed id ", $atomid," does NOT refer to the self URL (",'${#dataFeedURLEncoded}',").")
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req22: Feed rights element exists" id="e8aaf0c5-a1eb-4795-abdf-50eed952c424"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $rights:=/atom:feed/atom:rights
return
if (string-length($rights)=0)
then "The Atom feed does NOT contain rights information."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req23: Feed updated element exists and contains a date and time" id="484655d1-a8b6-45ba-b895-a323cb52f05b"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $updated:=year-from-dateTime(xs:dateTime(/atom:feed/atom:updated))
return
if ($updated > 0)
then ""
else "The Atom feed does NOT contain updated information."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req24: Feed contains an author name and email address" id="6ed3a5ef-f791-4252-93b1-1237a811e900"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $author:=/atom:feed/atom:author[string-length(./atom:name)>0 and string-length(./atom:email)>0]
return
if (exists($author))
then ""
else "The Atom feed does NOT contain an author name and/or email address."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req25-28-31: Feed contains at least one entry for data, with a link to the dataset and length set or a section link in case of multiple files." id="f506f6b8-3b2c-472f-aa14-cdb03782748f"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $nrdatalinks:=count(//atom:entry/atom:link[(@rel='alternate' and @type!='application/atom+xml' and number(@length) > 0) or (@rel='section')])
return
if ($nrdatalinks > 0)
then ""
else "The Atom feed does NOT contain any entries with a correct link for data. Check if the entries contain alternate links (not referring to another Atom feed) or section links for multiple files."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req26a: Dataset feeds contain seperate entries for each format/CRS combination. Each entry link for download has one / the same (media)type" id="3c9cdf67-38ba-4a51-85b0-a470a4ca411e"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[./atom:link[@rel='alternate' and @type!=../atom:link[1][@rel='alternate']/@type]]
return
concat ("The entry with id: ",$entry/atom:id," does not contain separate entries for each media type/CRS combination. This entry's link for download has different (media) types.")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req26b: Dataset feeds contain seperate entries for each format/CRS combination. Each entry has the same CRS category elements" id="3edea1b7-a51a-477a-a819-7a1b163feab6"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[./atom:category[@term!=../atom:category[1]/@term]]
return
concat ("The entry with id: ",$entry/atom:id," does not contain separate entries for each media type/CRS combination. This entry's category terms are not the same, indicating that multiple CRSes are offered in the same entry.")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req27: Feed contains at least one link to Spatial Object descriptions (in text/html)" id="299103d0-5167-4cf4-b64c-a251f7b0f894"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $sodesc:=/atom:feed/atom:link[@rel='describedby' and @type='text/html']
return
if (exists($sodesc))
then ""
else " there is no link to a Spatial Object description. That is: a link with type='text/html' and rel='describedby'."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req31: If a section link is provided (for multiple files) then there should be more than 1 section link" id="fa8fff6a-c9e8-4b7e-8997-6d29163359a3"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[count(./atom:link[@rel='section'])=1]
return
concat ("If a section link is provided (for multiple files) then there should be more than 1 section link. The entry with id ", $entry/atom:id ,  " has only 1 section link.")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req32: If multiple files are provided, then the links shall be of rel='section' and there shall be a content element or alternate link as a description" id="36243a7d-204a-4d0b-b1ce-da634f14d302"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[./atom:link[@rel='section'] and count(./atom:link[@rel='alternate'])=0 and count(./atom:content) = 0]
return
concat ("If multiple files are provided, then the links shall be of rel='section' and there shall be a content element or alternate link as a description. The entry with id ", $entry/atom:id ,  " does not have this.")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req34: Only media types listed in the INSPIRE media-types register at https://inspire.ec.europa.eu/media-types/ shall be used." id="4b9ecdf9-3b55-45f6-9343-d08cb5d04b56"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where contains('${#mediaTypes}', $entry/atom:link[@rel='alternate']/@type)!=true
return
concat("The alternate link ",$entry/atom:link[@rel='alternate']/@href," for entry with id ",$entry/atom:id," offers a media type '",$entry/atom:link[@rel='alternate']/@type,"' that is not in the INSPIRE list at https://inspire.ec.europa.eu/media-types/. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req35: Each entry shall have an element category for the CRS" id="86273ea9-66e7-41d8-a171-3a8db6cbbcfc"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[count(./atom:category[string-length(@term)>0 and string-length(@label)>0])!=1]
return
concat ("Each entry shall have one element category for the CRS. The entry with id ", $entry/atom:id ,  " does not have 1 element, but :" , count(./atom:category[string-length(@term)>0 and string-length(@label)>0]), ". ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransferDatasetFeedXml" id="35970b91-614b-4bda-90a2-ab30e9a1e739"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>dataFeedXml</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>ValidateDatasetFeed</con:sourceStep><con:sourcePath/><con:targetType xsi:nil="true"/><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="RunTestsForAllDatasetUrls" id="5ea3f9f5-ea00-4ce2-b94f-60274c759d85"><con:settings/><con:config><script>props = testRunner.testCase.testSteps['Properties']

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def feedXmlHolder = groovyUtils.getXmlHolder(testRunner.testCase.testSuite.project.getPropertyValue("dataFeedXml"))
feedXmlHolder.namespaces["atom"] = "http://www.w3.org/2005/Atom";
feedXmlHolder.namespaces["xlink"] = "http://www.w3.org/1999/xlink";

// Pull out the dataSetUrlNodes
def dataSetUrlNodes = feedXmlHolder.getNodeValues("//atom:entry/atom:link[(@rel='alternate' or @rel='section') and @type!='application/atom+xml']/@href");

// Then run Feed test for each dataSetUrl
for( i in dataSetUrlNodes )
{
   i=i.replaceAll("%7B","{")
   i=i.replaceAll("%7D","}")
   log.info("The Atom feed refers to a dataset to download at the URL: " + i)
   props.setPropertyValue("dataSetURL",i)
   testRunner.runTestStepByName("ResolveDatasetLink")
   // testRunner.runTestStepByName("Tracer")
}</script></con:config></con:testStep><con:testStep type="httprequest" name="ResolveDatasetLink" id="59a32c2c-e930-4fa5-ac61-f2f94d55bdb8"><con:settings/><con:config method="HEAD" xsi:type="con:HttpRequest" name="ResolveDatasetLink" id="c7b20ade-cf00-46e8-9f46-e437f393da54" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#dataSetURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" name="Response starts within 30 seconds (using HTTP HEAD)" id="fced5ec0-ac9b-4792-bba9-0d1682a5c048"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../logs/traces/</con:value></con:property><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>ValidateDatasetFeed</con:value></con:property><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:28:59.403+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:28:59.404+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value/></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>feedEntryURL</con:name><con:value/></con:property></con:properties></con:testSuite><con:testSuite id="c4154735-aa8a-40cb-9bbf-fba0ef78c7e2" name="OpenSearch Description"><con:description>Test module for checking the OpenSearch Description which is referenced by a Service Feed.
&lt;br/>&lt;br/>
&lt;b>Known limitations: &lt;/b> Response schema validation is not implemented yet.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="c7150cb1-fa7f-4589-9871-330bca1aa351" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get OpenSearch Description link" searchProperties="true"><con:description>Technical Test Case to retrieve and set theURL to the OpenSearch Description. This Test Case depends on the Test Case 'Link to OpenSearch Description document' in the 'Download Service Feed' test module.</con:description><con:settings/><con:testStep type="testcasedependency" name="OpenSearch Description link exists" id="3713d57c-f2b6-4c66-819f-49c493039e5f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6359d6da-1e37-423f-b543-018979b665e2</con:targetTestCase><con:properties><con:property><con:name>openSearchLanguages</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get Service Feed" id="f150efa8-92d2-4fab-bfdf-e1ffbe8ff684"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="cd189a05-957c-490a-9fb3-966394eab9e4" name="Get Service Feed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and set the URL to the OpenSearch description.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="b98e8d08-b750-4911-a3ed-a1b55ea4f400" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="8c018d06-fce0-4029-9c58-62e544d85b07" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3cee0dcc-2196-40ab-bd5f-a2ef0ed0d0d8" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Extract Link" id="ca77c4d7-4c4f-43b6-ba39-28644250d284"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Extract OpenSearch Description URL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get Service Feed</con:sourceStep><con:sourcePath>/*:feed/*:link[@rel='search' and @type='application/opensearchdescription+xml']/@href</con:sourcePath><con:targetType>openSearchURL</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2627cf68-632b-45bc-b53e-74edae092d3a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Provide languages" searchProperties="true"><con:description><![CDATA[The test case requests the OpenSearch Description document and checks if it provides at least one 'Language' element.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 45: For each language supported by the download service, the OpenSearch
description shall contain a 'Language' element that contains the language
code. The first 'Language' element shall contain the Default Language.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-service/master/atom-pre-defined/opensearch-description-provides-languages" target="_blank">Abstract Test Case 'OpenSearch Description provides languages'</a>]]></con:description><con:settings/><con:testStep type="testcasedependency" name="OpenSearch Description link exists" id="1a9f56cc-8f12-434b-a67f-0cd96d60af91"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6359d6da-1e37-423f-b543-018979b665e2</con:targetTestCase><con:properties><con:property><con:name>openSearchLanguages</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get OpenSearch Description" id="1f602fae-4534-4d14-9b57-46dcb2702372"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="91444c4d-bed0-40a9-b40a-6157493e409d" name="Get OpenSearch Description" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the dataset feed links are correct.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#openSearchURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="27a86dd2-6078-4fc4-bd6a-b0e62395b2e4" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="b5528c1c-abba-48af-84e7-c1a42b16ff4f" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dbfd8d9a-6b29-4929-b5e7-f8899be624c7" name="Root element 'OpenSearchDescription' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/os:OpenSearchDescription", "TR.missingOpenSearchDescriptionRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0ca5302c-48aa-4097-912f-266ed6f51e05" name="Description provides at least one Language"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Language",
  "TR.missingAtLeastOneOpenSearchDescriptionLanguage"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="458af16e-a708-4b83-96f2-f13ec03c6bfd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Spatial Dataset operation" searchProperties="true"><con:description><![CDATA[The test case requests the OpenSearch Description document and checks if all "Get Spatial Dataset" operation responses have the same content-type as the media-type in the OpenSearch Description.
<br />
<br />
Relevant Requirements:
<ul>
<li>TG Requirement 43:The OpenSearch description shall contain a 'Url' element that describes a
template URL for the Get Spatial Data Set operation. This template shall
accept the INSPIRE parameters 'crs', 'spatial_dataset_identifier_code',
'spatial_dataset_identifier_namespace' and the OpenSearch 'language'
parameter. The 'Url' element shall have an attribute 'type' with a value
corresponding to the media type of the result and an attribute 'rel' with the
value 'results'. </li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-service/master/atom-pre-defined/opensearch-description-one-url-get-spatial-dataset-operation" target="_blank">Abstract Test Case 'OpenSearch Description one URL Get Spatial Dataset operation'</a>]]></con:description><con:settings/><con:testStep type="testcasedependency" name="OpenSearch Description link exists" id="568f86c7-2e5c-419d-ba8b-50afb405ecd9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6359d6da-1e37-423f-b543-018979b665e2</con:targetTestCase><con:properties><con:property><con:name>openSearchLanguages</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="properties" name="Transfer_Properties" id="005c256d-3874-4590-b962-a215634d34ea"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>getSpatialDatasetUrl</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mimeType</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Get OpenSearch Description" id="c6f32dae-43d2-4dd7-9c6e-6d252e83886d"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="baabcfb3-6a2c-4951-bb3e-8e14feb39d2d" name="Get OpenSearch Description" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the OpenSearch Description.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#openSearchURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="c839657a-0d7c-49d9-8665-ee32690350db" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="2a9be6d6-6a7f-450c-b06b-04f9947d5ede" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="89094358-9df9-46f9-b3ee-11735bd3eaf8" name="Root element 'OpenSearchDescription' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/os:OpenSearchDescription", "TR.missingOpenSearchDescriptionRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="56bcbfd7-4d1e-40c9-a718-12f1b5f7e77f" name="Description provides at least one &quot;Url&quot; element that describes a template URL for the Get Spatial Data Set operation"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Url[@rel='results' and starts-with(@template,'http') and contains(@template,'crs') and contains(@template,'spatial_dataset_identifier_code') and contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]",
  "TR.missingAtLeastOneOpenSearchDescriptionUrl"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="74afa0d4-5f0e-4a47-b08f-7ca403dd85e3" name="At least one Language provided"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Query[@role='example' and @language] or /os:OpenSearchDescription/os:Language",
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="793e1bf6-1c47-4819-b552-1be93e488ee8" name="At least one CRS provided"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Query[@role='example' and @inspire_dls:crs]",
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ae479e65-ab3b-4e21-92ec-4acfdfcc8424" name="At least spatial_dataset_identifier_namespace and spatial_dataset_identifier_code provided"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Query[@role='example' and @inspire_dls:spatial_dataset_identifier_namespace and @inspire_dls:spatial_dataset_identifier_code]",
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Iterate over Get Spatial Dataset URL" id="b0803022-623e-456c-aa2e-bc968ee33150"><con:settings/><con:config><script><![CDATA[import de.interactive_instruments.xtf.*;
SOAPUI_I.init(log,context,testRunner);
import de.interactive_instruments.UriUtils;

ProjectHelper ph = new ProjectHelper();
def xmlHolder = ph.getTestStepResult("Get OpenSearch Description")

def getSpatialDataSetUrlTemplates = xmlHolder.getDomNodes(
	"/*:OpenSearchDescription/*:Url[@rel='results' and starts-with(@template,'http') and "+
	"contains(@template,'crs') and contains(@template,'spatial_dataset_identifier_code') and "+
	"contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]");
log.info("getSpatialDatasetUrls: " + getSpatialDataSetUrlTemplates);


def languages = xmlHolder.getNodeValues(
	"distinct-values((/*:OpenSearchDescription/*:Query[@role='example']/@language , /*:OpenSearchDescription/*:Language))");
log.info("languages: " + languages);

def namespaces = xmlHolder.getNodeValues(
	"/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:spatial_dataset_identifier_namespace");
log.info("namespaces: " + namespaces);

def codes = xmlHolder.getNodeValues(
	"/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:spatial_dataset_identifier_code");
log.info("codes: " + codes);

def crss = xmlHolder.getNodeValues(
	"distinct-values(/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:crs)");
log.info("CRSs: " + crss);

// clear url to test
ph.setTransferProperty("getSpatialDatasetUrl", "")

void replaceParameter(parameters, cleanParameters, templateKey, templateValue) {
	for ( e in parameters ) {
		def value = e.value[0]
		if(value.contains("{"+templateKey+"}") || value.contains("{"+templateKey+"?}")) {
			cleanParameters.put(e.key, templateValue);
		}
	}
}

def initDefaultParameters(parameters) {
	final Map<String, String> params = new HashMap<String, List<String>>();
	for ( e in parameters ) {
		def value = e.value[0]
		if(!(value.contains("{") && value.contains("}"))) {
			params.put(e.key, value);
		}
	}
	return params
}

def invokedUrls = [] as HashSet

for( node in getSpatialDataSetUrlTemplates ) {
	String getSpatialDataSetUrlTemplate = node.attributes.getNamedItem("template").getNodeValue()
	String mimeType = node.attributes.getNamedItem("type").getNodeValue()

	log.info("Using template URL: "+getSpatialDataSetUrlTemplate);
	def parameters = UriUtils.getQueryParameters(getSpatialDataSetUrlTemplate, false)
	final Map<String, String> cleanParameters = initDefaultParameters(parameters)
	final String endpoint = UriUtils.withoutQueryParameters(getSpatialDataSetUrlTemplate)

	for(int j=0; j<codes.size(); j++) {
		replaceParameter(parameters, cleanParameters, "inspire_dls:spatial_dataset_identifier_code", codes[j] )
		replaceParameter(parameters, cleanParameters, "inspire_dls:spatial_dataset_identifier_namespace", namespaces[j] )

		for(crs in crss) {
			replaceParameter(parameters, cleanParameters, "inspire_dls:crs", crs )

			for(language in languages) {
				replaceParameter(parameters, cleanParameters, "language", language )
				final String url = UriUtils.withQueryParameters(endpoint, cleanParameters)
				if(!invokedUrls.contains(url)) {
					log.info("Using URL: "+url)
					ph.setTransferProperty("getSpatialDatasetUrl", url)
					ph.setTransferProperty("mimeType", mimeType)
					ph.runTestStep("Get Spatial Dataset");
					invokedUrls.add(url);
				}
			}
		}
	}
}]]></script></con:config></con:testStep><con:testStep type="httprequest" name="Get Spatial Dataset" id="ea92f351-8560-4190-b129-202d1de67410"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="aedd00a3-7612-4084-8c64-19eff6289f73" name="Get Spatial Dataset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Checks if the content-type of the Get Spatial Dataset response equals the media-type from the Open Search Description document</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${Transfer_Properties#mimeType}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${Transfer_Properties#getSpatialDatasetUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="90ac1268-2c6a-46d4-94da-cb1a595847b2" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="4c8b189c-31ec-4098-8f45-6952a58780c6" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="75f52c4d-7efd-412d-b177-9c7b581e95d3" name="Response content-type equals media-type from Get Spatial Dataset URL"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.TranslatableAssertionError;

if(messageExchange.responseHeaders["Content-Type"]==null) {
	throw new TranslatableAssertionError("TR.missingContentType");
}
String mimeType = context.expand('${Transfer_Properties#mimeType}');

if(!messageExchange.responseHeaders['Content-Type'][0].contains(mimeType)) {
	throw new TranslatableAssertionError("TR.unexpectedContentType", "expected", mimeType, "actual", messageExchange.responseHeaders['Content-Type'][0]);
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4ab8b4e8-abd9-4c93-9fb4-ca1921cca478" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Describe Spatial Dataset operation" searchProperties="true"><con:description><![CDATA[The test case requests the OpenSearch Description document and checks if it provides an "Url" element that describes a template URL for the Describe Spatial Data Set operation.
<br />
<br />
Relevant Requirements:
<ul>
<li>TG Requirement 42: The OpenSearch description shall contain a 'Url' element that describes a
template URL for the Describe Spatial Data Set operation. This template shall
accept the INSPIRE parameters 'spatial_dataset_identifier_code',
'spatial_dataset_identifier_namespace' and the OpenSearch 'language'
parameter. The 'Url' element shall have an attribute 'type' with a value of
'application/atom+xml' and an attribute 'rel' with the value 'describedby'.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-service/master/atom-pre-defined/opensearch-description-url-describe-spatial-dataset-operation" target="_blank">Abstract Test Case 'OpenSearch Description URL Describe Spatial Dataset operation'</a>]]></con:description><con:settings/><con:testStep type="testcasedependency" name="OpenSearch Description link exists" id="703f1938-368b-4d87-8015-a91ba132f77f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6359d6da-1e37-423f-b543-018979b665e2</con:targetTestCase><con:properties><con:property><con:name>openSearchLanguages</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="properties" name="Transfer_Properties" id="0fe76109-9653-4fd6-b903-c78ee734dc9f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>describeSpatialDataSetUrl</con:name><con:value>http://www.gis-rest.nrw.de/atomFeed/rest/search/GetSpatialDataset?spatial_dataset_identifier_namespace=https://registry.gdi-de.org/id/de.nw&amp;spatial_dataset_identifier_code=OGANRWBORISBRW&amp;language=de</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>application/atom+xml</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Get OpenSearch Description" id="95ff121f-4671-4cdd-b851-ddb3119b7c96"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="1c1f1df6-2709-4bc2-a1c1-a7690c62d42c" name="Get OpenSearch Description" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the OpenSearch Description.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#openSearchURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1e8ab33-11a0-45da-b116-4a4c8ffa139c" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="ab501b29-1391-4093-87bf-5a67b23a451b" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f244d763-7392-49c7-aedc-74703bd8dcca" name="Root element 'OpenSearchDescription' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/os:OpenSearchDescription", "TR.missingOpenSearchDescriptionRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7263d98c-e24b-4f93-96f1-cb420ef57a95" name="Description provides at least one &quot;Url&quot; element that describes a template URL for the Describe Spatial Data Set operation"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Url[@rel='describedby' and @type='application/atom+xml' and starts-with(@template,'http') and contains(@template,'spatial_dataset_identifier_code') and contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]",
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a3d96fc4-8656-44a2-a219-261052291d3f" name="At least one Language provided"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Query[@role='example' and @language] or /os:OpenSearchDescription/os:Language",
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d6ecb614-9004-4d11-8e4c-26f2ce1a614f" name="At least spatial_dataset_identifier_namespace and spatial_dataset_identifier_code provided"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Query[@role='example' and @inspire_dls:spatial_dataset_identifier_namespace and @inspire_dls:spatial_dataset_identifier_code]",
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Iterate over Describe Spatial Dataset URL" id="9ac761b8-d714-444f-9b15-d3ac4a3dda9b"><con:settings/><con:config><script><![CDATA[import de.interactive_instruments.xtf.*;
SOAPUI_I.init(log,context,testRunner);
import de.interactive_instruments.UriUtils;

ProjectHelper ph = new ProjectHelper();
def xmlHolder = ph.getTestStepResult("Get OpenSearch Description")

def describeSpatialDataSetUrlTemplates = xmlHolder.getDomNodes(
	"/*:OpenSearchDescription/*:Url[@rel='describedby' and starts-with(@template,'http') and "+
	"contains(@template,'crs') and contains(@template,'spatial_dataset_identifier_code') and "+
	"contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]");
log.info("describeSpatialDataSetUrls: " + describeSpatialDataSetUrlTemplates);


def languages = xmlHolder.getNodeValues(
	"distinct-values((/*:OpenSearchDescription/*:Query[@role='example']/@language , /*:OpenSearchDescription/*:Language))");
log.info("languages: " + languages);

def namespaces = xmlHolder.getNodeValues(
	"/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:spatial_dataset_identifier_namespace");
log.info("namespaces: " + namespaces);

def codes = xmlHolder.getNodeValues(
	"/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:spatial_dataset_identifier_code");
log.info("codes: " + codes);

// clear url to test
ph.setTransferProperty("describeSpatialDataSetUrl", "")

void replaceParameter(parameters, cleanParameters, templateKey, templateValue) {
	for ( e in parameters ) {
		def value = e.value[0]
		if(value.contains("{"+templateKey+"}") || value.contains("{"+templateKey+"?}")) {
			cleanParameters.put(e.key, templateValue);
		}
	}
}

def initDefaultParameters(parameters) {
	final Map<String, String> params = new HashMap<String, List<String>>();
	for ( e in parameters ) {
		def value = e.value[0]
		if(!(value.contains("{") && value.contains("}"))) {
			params.put(e.key, value);
		}
	}
	return params
}

def invokedUrls = [] as HashSet

for( node in describeSpatialDataSetUrlTemplates ) {
	String describeSpatialDataSetUrlTemplate = node.attributes.getNamedItem("template").getNodeValue()
	String mimeType = node.attributes.getNamedItem("type").getNodeValue()

	log.info("Using template URL: "+describeSpatialDataSetUrlTemplate);
	def parameters = UriUtils.getQueryParameters(describeSpatialDataSetUrlTemplate, false)
	final Map<String, String> cleanParameters = initDefaultParameters(parameters)
	final String endpoint = UriUtils.withoutQueryParameters(describeSpatialDataSetUrlTemplate)

	for(int j=0; j<codes.size(); j++) {
		replaceParameter(parameters, cleanParameters, "inspire_dls:spatial_dataset_identifier_code", codes[j] )
		replaceParameter(parameters, cleanParameters, "inspire_dls:spatial_dataset_identifier_namespace", namespaces[j] )

			for(language in languages) {
				replaceParameter(parameters, cleanParameters, "language", language )
				final String url = UriUtils.withQueryParameters(endpoint, cleanParameters)
				if(!invokedUrls.contains(url)) {
					log.info("Using URL: "+url)
					ph.setTransferProperty("describeSpatialDataSetUrl", url)
					ph.setTransferProperty("mimeType", mimeType)
					ph.runTestStep("Describe Spatial Dataset");
					invokedUrls.add(url);
				}
			}
	}
}]]></script></con:config></con:testStep><con:testStep type="httprequest" name="Describe Spatial Dataset" id="1693ebfb-e21b-457b-9fe3-ebee745d2204"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="587079db-efb1-4b30-b66d-8d120515daec" name="Describe Spatial Dataset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Checks if the content-type of the Describe Spatial Dataset response equals 'application/atom+xml'.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/atom+xml" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${Transfer_Properties#describeSpatialDataSetUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d77ce483-2a5c-42af-b442-0043e535de70" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="a1a33924-7e37-4ae9-9d59-24c5bf976d8e" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fbb9511f-dd9a-4be4-b8ba-d35eb2039432" name="Response content-type is 'application/atom+xml'"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.TranslatableAssertionError;

if(messageExchange.responseHeaders["Content-Type"]==null) {
	throw new TranslatableAssertionError("TR.missingContentType");
}

if(!messageExchange.responseHeaders['Content-Type'][0].contains("application/atom+xml")) {
	throw new TranslatableAssertionError("TR.unexpectedContentType", "expected", "application/atom+xml", "actual", messageExchange.responseHeaders['Content-Type'][0]);
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="34cb9ce5-899c-4f79-bfea-80166b6f6287" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Query examples for each dataset" searchProperties="true"><con:description><![CDATA[The test case requests the OpenSearch Description document and checks if it provides a Describe Spatial Dataset and Get Spatial Dataset url.
For each category CRS from the Describe Spatial Dataset response a Get Spatial Dataset request with the CRS, the provided inspire_dls:spatial_dataset_identifier_code and inspire_dls:spatial_dataset_identifier_namespace is invoked.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 44: For each dataset available the OpenSearch description shall contain a 'Query'
element that has a 'role' attribute with the value 'example' and
'spatial_dataset_identifier_code' and 'spatial_dataset_identifier_namespace'
attributes together containing unique spatial dataset identifier. The value of the
'crs' and 'language' attributes shall be set to the values considered as the
default ones by the service provider. </li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-service/master/atom-pre-defined/opensearch-description-query-examples-for-each-dataset" target="_blank">Abstract Test Case 'OpenSearch Description Query examples for each dataset'</a>]]></con:description><con:settings/><con:testStep type="testcasedependency" name="OpenSearch Description link exists" id="6a075205-f19c-428c-90b0-f84aae3f4f1e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6359d6da-1e37-423f-b543-018979b665e2</con:targetTestCase><con:properties><con:property><con:name>openSearchLanguages</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Get Spatial Dataset operation link exists" id="b7539b87-0287-452d-a49a-e1c7c342eb8d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>458af16e-a708-4b83-96f2-f13ec03c6bfd</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="testcasedependency" name="Describe Spatial Dataset operation link exists" id="16238c40-4837-4af2-80ef-27e917602b80"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>4ab8b4e8-abd9-4c93-9fb4-ca1921cca478</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="properties" name="Transfer_Properties" id="38efaf0c-95ee-4412-8a70-876873d66ce9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>describeSpatialDataSetUrl</con:name><con:value>http://www.gis-rest.nrw.de/atomFeed/rest/search/GetSpatialDataset?spatial_dataset_identifier_namespace=https://registry.gdi-de.org/id/de.nw&amp;spatial_dataset_identifier_code=OGANRWBORISBRW&amp;language=de</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>application/atom+xml</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Get OpenSearch Description" id="0794eacb-a4a7-4a43-acc6-1f0dcb958bc8"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="dbf827f4-c8af-43ea-9054-5a11beacb2b6" name="Get OpenSearch Description" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the dataset feed links are correct.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#openSearchURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="cc65b492-6f51-40bd-a1f6-2b4fb6e8919e" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="cd7b5983-205a-4a5f-8ed9-acfb3adf3baa" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2ab6ede6-3e2a-4f3c-9dfe-8c61dc161e10" name="Root element 'OpenSearchDescription' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/os:OpenSearchDescription", "TR.missingOpenSearchDescriptionRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fac69c38-3e71-4586-a376-9504f2c3eb53" name="Description provides at least one &quot;Url&quot; element that describes a template URL for the Get Spatial Data Set operation"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Url[@rel='results' and starts-with(@template,'http') and contains(@template,'crs') and contains(@template,'spatial_dataset_identifier_code') and contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]",
  "TR.missingAtLeastOneOpenSearchDescriptionUrl"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c6baa4d2-7ab0-4861-af59-76cb9955bd99" name="At least spatial_dataset_identifier_namespace and spatial_dataset_identifier_code provided"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Query[@role='example' and @inspire_dls:spatial_dataset_identifier_namespace and @inspire_dls:spatial_dataset_identifier_code]"
);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fd3132fa-1ea8-420b-832a-12afda7a537d" name="At least one CRS provided"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Query[@role='example' and @inspire_dls:crs]"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Iterate over Describe Spatial Dataset URL" id="9858617d-7532-45ec-b33e-dc2ca953dec2"><con:settings/><con:config><script><![CDATA[import de.interactive_instruments.xtf.*;
SOAPUI_I.init(log,context,testRunner);
import de.interactive_instruments.UriUtils;

ProjectHelper ph = new ProjectHelper();
def xmlHolder = ph.getTestStepResult("Get OpenSearch Description")

def describeSpatialDataSetUrlTemplates = xmlHolder.getDomNodes(
	"/*:OpenSearchDescription/*:Url[@rel='results' and starts-with(@template,'http') and "+
	"contains(@template,'crs') and contains(@template,'spatial_dataset_identifier_code') and "+
	"contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]");
log.info("describeSpatialDataSetUrls: " + describeSpatialDataSetUrlTemplates);


def languages = xmlHolder.getNodeValues(
	"distinct-values((/*:OpenSearchDescription/*:Query[@role='example']/@language , /*:OpenSearchDescription/*:Language))");
log.info("languages: " + languages);

def namespaces = xmlHolder.getNodeValues(
	"/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:spatial_dataset_identifier_namespace");
log.info("namespaces: " + namespaces);

def codes = xmlHolder.getNodeValues(
	"/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:spatial_dataset_identifier_code");
log.info("codes: " + codes);

// clear url to test
ph.setTransferProperty("describeSpatialDataSetUrl", "")

void replaceParameter(parameters, cleanParameters, templateKey, templateValue) {
	for ( e in parameters ) {
		def value = e.value[0]
		if(value.contains("{"+templateKey+"}") || value.contains("{"+templateKey+"?}")) {
			cleanParameters.put(e.key, templateValue);
		}
	}
}

def initDefaultParameters(parameters) {
	final Map<String, String> params = new HashMap<String, List<String>>();
	for ( e in parameters ) {
		def value = e.value[0]
		if(!(value.contains("{") && value.contains("}"))) {
			params.put(e.key, value);
		}
	}
	return params
}

def invokedUrls = [] as HashSet

for( node in describeSpatialDataSetUrlTemplates ) {
	String describeSpatialDataSetUrlTemplate = node.attributes.getNamedItem("template").getNodeValue()
	String mimeType = node.attributes.getNamedItem("type").getNodeValue()

	log.info("Using template URL: "+describeSpatialDataSetUrlTemplate);
	def parameters = UriUtils.getQueryParameters(describeSpatialDataSetUrlTemplate, false)
	final Map<String, String> cleanParameters = initDefaultParameters(parameters)
	final String endpoint = UriUtils.withoutQueryParameters(describeSpatialDataSetUrlTemplate)

	for(int j=0; j<codes.size(); j++) {
		replaceParameter(parameters, cleanParameters, "inspire_dls:spatial_dataset_identifier_code", codes[j] )
		replaceParameter(parameters, cleanParameters, "inspire_dls:spatial_dataset_identifier_namespace", namespaces[j] )

			for(language in languages) {
				replaceParameter(parameters, cleanParameters, "language", language )
				final String url = UriUtils.withQueryParameters(endpoint, cleanParameters)
				if(!invokedUrls.contains(url)) {
					log.info("Using URL: "+url)
					ph.setTransferProperty("describeSpatialDataSetUrl", url)
					ph.setTransferProperty("mimeType", mimeType)
					ph.runTestStep("Describe Spatial Dataset");
					ph.runTestStep("Iterate over Get Spatial Dataset URL");
					invokedUrls.add(url);
				}
			}
	}
}]]></script></con:config></con:testStep><con:testStep type="httprequest" name="Describe Spatial Dataset" id="8dadd33c-6020-4533-827c-f01dbcebf4f2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="537e81ea-ecc6-4d0d-a717-0487a31b29b4" name="Describe Spatial Dataset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Checks if the content-type of the Get Spatial Dataset response equals the media-type from the Open Search Description document</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${Transfer_Properties#describeSpatialDataSetUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="b4f5a27b-e2d2-40d0-bcfc-c58962e49e58" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="bc1f86a5-e03a-43de-bb43-124085e61f12" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e3ad2fd7-379c-4d9f-807f-db7975c3b0e6" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dc98fad0-7697-479a-ac12-e9d4fd36242f" name="Each entry has an element category, including a term and label, to refer to CRSs"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.notExists(
  "//atom:entry[count(atom:category[string-length(@term)>0 and string-length(@label)>0])&lt;1]",
  "TR.missingCategory"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Iterate over Get Spatial Dataset URL" id="4a9036db-eb9c-458c-b8ad-58b3ff5b82a7"><con:settings/><con:config><script><![CDATA[import de.interactive_instruments.xtf.*;
SOAPUI_I.init(log,context,testRunner);
import de.interactive_instruments.UriUtils;

ProjectHelper ph = new ProjectHelper();
def xmlHolder = ph.getTestStepResult("Describe Spatial Dataset")

def getSpatialDataSetUrlTemplates = xmlHolder.getDomNodes(
	"/*:OpenSearchDescription/*:Url[@rel='results' and starts-with(@template,'http') and "+
	"contains(@template,'crs') and contains(@template,'spatial_dataset_identifier_code') and "+
	"contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]");
log.info("getSpatialDatasetUrls: " + getSpatialDataSetUrlTemplates);


def languages = xmlHolder.getNodeValues(
	"distinct-values((/*:OpenSearchDescription/*:Query[@role='example']/@language , /*:OpenSearchDescription/*:Language))");
log.info("languages: " + languages);

def namespaces = xmlHolder.getNodeValues(
	"/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:spatial_dataset_identifier_namespace");
log.info("namespaces: " + namespaces);

def codes = xmlHolder.getNodeValues(
	"/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:spatial_dataset_identifier_code");
log.info("codes: " + codes);

def crss = xmlHolder.getNodeValues(
	"distinct-values(/*:OpenSearchDescription/*:Query[@role='example']/@inspire_dls:crs)");
log.info("CRSs: " + crss);

// clear url to test
ph.setTransferProperty("getSpatialDatasetUrl", "")

void replaceParameter(parameters, cleanParameters, templateKey, templateValue) {
	for ( e in parameters ) {
		def value = e.value[0]
		if(value.contains("{"+templateKey+"}") || value.contains("{"+templateKey+"?}")) {
			cleanParameters.put(e.key, templateValue);
		}
	}
}

def initDefaultParameters(parameters) {
	final Map<String, String> params = new HashMap<String, List<String>>();
	for ( e in parameters ) {
		def value = e.value[0]
		if(!(value.contains("{") && value.contains("}"))) {
			params.put(e.key, value);
		}
	}
	return params
}

def invokedUrls = [] as HashSet

for( node in getSpatialDataSetUrlTemplates ) {
	String getSpatialDataSetUrlTemplate = node.attributes.getNamedItem("template").getNodeValue()
	String mimeType = node.attributes.getNamedItem("type").getNodeValue()

	log.info("Using template URL: "+getSpatialDataSetUrlTemplate);
	def parameters = UriUtils.getQueryParameters(getSpatialDataSetUrlTemplate, false)
	final Map<String, String> cleanParameters = initDefaultParameters(parameters)
	final String endpoint = UriUtils.withoutQueryParameters(getSpatialDataSetUrlTemplate)

	for(int j=0; j<codes.size(); j++) {
		replaceParameter(parameters, cleanParameters, "inspire_dls:spatial_dataset_identifier_code", codes[j] )
		replaceParameter(parameters, cleanParameters, "inspire_dls:spatial_dataset_identifier_namespace", namespaces[j] )

		for(crs in crss) {
			replaceParameter(parameters, cleanParameters, "inspire_dls:crs", crs )

			for(language in languages) {
				replaceParameter(parameters, cleanParameters, "language", language )
				final String url = UriUtils.withQueryParameters(endpoint, cleanParameters)
				if(!invokedUrls.contains(url)) {
					log.info("Using URL: "+url)
					ph.setTransferProperty("getSpatialDatasetUrl", url)
					ph.setTransferProperty("mimeType", mimeType)
					ph.runTestStep("Get Spatial Dataset");
					invokedUrls.add(url);
				}
			}
		}
	}
}]]></script></con:config></con:testStep><con:testStep type="httprequest" name="Get Spatial Dataset" id="3e55838a-6ac8-422c-84f3-a958d9956095"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="63775fb4-531b-4f13-9c75-2d4365bcecb2" name="Get Spatial Dataset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Checks if the content-type of the Get Spatial Dataset response equals the media-type from the Open Search Description document</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${Transfer_Properties#getSpatialDatasetUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="48c19232-171e-4726-80d5-e8e18c7ac347" name="HTTP status code 200,206,301,302 or 303 is returned"><con:configuration><codes>200,206,301,302,303</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="8bb0253c-0901-4714-babe-8175b5e71aa5" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="71d855f0-318b-4449-87cf-5841eb9f68e2" name="Root element 'feed' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/atom:feed", "TR.missingFeedRootElement");</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>Transfer_Properties#getSpatialDatasetUrl</con:name><con:value>Transfer_Properties#getSpatialDatasetUrl</con:value><con:style>TEMPLATE</con:style><con:default>Transfer_Properties#getSpatialDatasetUrl</con:default></con:parameter></con:parameters></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6b2a0d87-fca5-4e6d-ac49-3c338d08e10a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="URI to itself" searchProperties="true"><con:description><![CDATA[The test case requests the OpenSearch Description document and checks if it provides a self URL.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 40: The OpenSearch description shall contain a 'Url' element that describes an
HTTP URI for the OpenSearch Description document. The value of the 'rel'
attribute of this element shall be 'self', the value of the 'type' attribute shall be
'application/opensearchdescription+xml' and the value of the 'template'
attribute shall be the HTTP URI of the document. </li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-service/master/atom-pre-defined/opensearch-description-uri-to-itself" target="_blank">Abstract Test Case 'OpenSearch Description URI to itself'</a>]]></con:description><con:settings/><con:testStep type="testcasedependency" name="OpenSearch Description link exists" id="3cd2b17d-7d70-4bb5-b793-152e3cc8a262"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6359d6da-1e37-423f-b543-018979b665e2</con:targetTestCase><con:properties><con:property><con:name>openSearchLanguages</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="httprequest" name="Get OpenSearch Description" id="604e5275-94c1-4ee9-81a0-6dd5a9309d06"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="fd53fbe2-d9db-4efe-89a5-c64273a80851" name="Get OpenSearch Description" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the dataset feed links are correct.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#openSearchURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="07baa915-7c6b-4fad-b1bf-ef03d306dc85" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="de93e839-9029-4c1b-a47b-950437792241" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2efd175c-e24e-4924-9bdd-13237591a99f" name="Root element 'OpenSearchDescription' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/os:OpenSearchDescription", "TR.missingOpenSearchDescriptionRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b0365336-42e6-48a6-84f1-e0ea2ef34168" name="Self reference equals URL of requested resource"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
import de.interactive_instruments.xtf.*
SOAPUI_I.init(log, context, messageExchange)
final ProjectHelper ph = new ProjectHelper()
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.equals(
  "/os:OpenSearchDescription/os:Url[@rel='self' and @type='application/opensearchdescription+xml']/@template",
  "/os:OpenSearchDescription/os:Url",
  messageExchange.getEndpoint(),
  "TR.incorrectFeedSelfReference"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7369a02b-be8b-40fb-ae98-d16f93be2fa8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generic search queries URL" searchProperties="true"><con:description><![CDATA[The test case requests the OpenSearch Description document and checks if it provides an "Url" element that describes a template URL for generic search queries.
The resource at the URL is retrieved and checked if it returns HTML content.
<br/>
<br/>
Relevant Requirements:
<ul>
<li>TG Requirement 41: The OpenSearch description shall contain a 'Url' element that describes a
template URL for generic search queries. The value of the 'rel' attribute of this
element shall be 'results', the value of the 'type' attribute shall be 'text/html'.</li>
</ul>
<br/>
<br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/download-service/master/atom-pre-defined/opensearch-description-url-generic-search-queries" target="_blank">Abstract Test Case 'OpenSearch Description URL generic search queries'</a>]]></con:description><con:settings/><con:testStep type="testcasedependency" name="OpenSearch Description link exists" id="66b6fc90-c345-4864-a512-508acc63ca2d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6359d6da-1e37-423f-b543-018979b665e2</con:targetTestCase><con:properties><con:property><con:name>openSearchLanguages</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="properties" name="Transfer_Properties" id="0a0d3ba8-34c6-44b5-881b-e352ea3d6db6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>geneircSearchQueriesUrl</con:name><con:value>https://metaver.de/search/dls/service/E8014E42-E662-4D73-BF9A-4017CBB3D26A?q={searchTerms}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Get OpenSearch Description" id="d7849eeb-9029-4354-96fa-e3029f94c431"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="8941aea9-359d-4abf-8365-ae03aba4ff03" name="Get OpenSearch Description" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the dataset feed links are correct.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#openSearchURL}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="8cb55602-5705-4d92-8d35-08732f19ae81" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="16c6d755-39bc-4f78-8ece-4799d2d67acc" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5431e387-2cf1-46c2-bc0f-5f62496cda67" name="Root element 'OpenSearchDescription' exists"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);
a.exists("/os:OpenSearchDescription", "TR.missingOpenSearchDescriptionRootElement");</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6135b42e-8137-40d5-902b-5ff839d143e2" name="Description provides a template URL for generic search queries"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.*
final Assert a = new Assert(messageExchange, context, log, Assert.INSPIRE_DS_NS);

a.exists(
  "/os:OpenSearchDescription/os:Url[@rel='results' and @type='text/html']/@template",
  "TR.missingGenericSearchQueriesUrl"
);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Extract genric search queries URL" id="198ca8bf-9df4-4d1f-bc79-4908339a53d6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Generic search queries URL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get OpenSearch Description</con:sourceStep><con:sourcePath>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';

/os:OpenSearchDescription/os:Url[@rel='results' and @type='text/html']/@template
</con:sourcePath><con:targetType>geneircSearchQueriesUrl</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="Get resource at generic search quries URL" id="57097ab3-b698-4767-886b-45496e3bd4b6"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="fa50ac5f-3cae-450e-a398-fe4f52e17f92" name="Get resource at generic search quries URL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Requests the Service Feed and checks if the dataset feed links are correct.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${Transfer_Properties#geneircSearchQueriesUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="69821145-bef3-41af-adfe-226eaf86cd9a" name="HTTP status code 200 is returned"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="9dca43cb-4a8a-4789-ae48-450166a6ce0b" name="30 seconds timeout"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e182dea2-63b0-4dff-94fb-c815e45da6f6" name="Content-Type is HTML"><con:configuration><scriptText>import de.interactive_instruments.etf.suim.TranslatableAssertionError;

if(messageExchange.responseHeaders["Content-Type"]==null) {
	throw new TranslatableAssertionError("TR.missingContentType");
}

if(!messageExchange.responseHeaders['Content-Type'][0].startsWith('text/html')) {
	throw new TranslatableAssertionError("TR.unexpectedContentType", "expected", "text/html", "actual", messageExchange.responseHeaders['Content-Type'][0]);
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>openSearchURL</con:name><con:value>http://www.gis-rest.nrw.de/atomFeed/rest/search/GetDownloadServiceMetadata?service_identifier_code=c2195ebe-dad7-4f5e-9bc3-79a30d3373f3</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>serviceEndpoint</con:name><con:value/></con:property><con:property><con:name>etf.ignore.properties</con:name><con:value>authUser, authPwd, authMethod, serviceFeedXml, dataFeedXml, serviceMetadataUrl, MdIdentifiersList, mdIdentifiersDatasetMetadata, openSearchDescriptionUrl</con:value></con:property><con:property><con:name>authUser</con:name><con:value/></con:property><con:property><con:name>authPwd</con:name><con:value/></con:property><con:property><con:name>authMethod</con:name><con:value>basic</con:value></con:property><con:property><con:name>etf.tag.ids</con:name><con:value>EIDe51620af-bcf5-4719-ab0e-ef6226a572fa</con:value></con:property><con:property><con:name>etf.translation.template.collection.id</con:name><con:value>EIDfadd4929-fa60-4781-b658-703bbfe3f4eb</con:value></con:property><con:property><con:name>etf.supported.test.object.type.ids</con:name><con:value>EID49d881ae-b115-4b91-aabe-31d5791bce52</con:value></con:property><con:property><con:name>etf.author</con:name><con:value>Geonovum and interactive instruments</con:value></con:property><con:property><con:name>etf.last.editor</con:name><con:value>interactive instruments GmbH</con:value></con:property><con:property><con:name>etf.creation.date</con:name><con:value>2017-02-17T00:00:00</con:value></con:property><con:property><con:name>etf.version</con:name><con:value>1.0.5</con:value></con:property><con:property><con:name>etf.last.update.date</con:name><con:value>2019-09-24T14:42:00</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:beforeRunScript/><con:afterRunScript>import com.eviware.soapui.impl.wsdl.teststeps.HttpTestRequestStep;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep
import com.eviware.soapui.model.testsuite.TestStepResult;


// Get the "requirements" test step
def requirements = project.getTestSuiteByName("TestSetup")?.
	getTestCaseByName("Requirements")?.getTestStepByName("Requirements");

log.info("Results: ");
for( testSuiteR in runner?.getResults() ) {
	for( testCaseR in testSuiteR?.getResults() ) {
		for( testStepR in testCaseR?.getResults() ) {

			if(testStepR.getStatus()!=TestStepResult.TestStepStatus.OK) {
				if (testStepR.testStep instanceof HttpTestRequestStep || testStepR.testStep instanceof  RestTestRequestStep) {
					testStepR.testStep.testRequest.assertionList.each{
						// Extract ID which is seperated with a whitespace and a doublecolon
						String assertionName = it.name;
						if (assertionName.indexOf(": ") > -1) {
							String id = assertionName?.substring( 0, assertionName.indexOf(": ") );
							if(it.valid) {
								log.info("Assertion "+assertionName+" passed");
							}else if(it.failed) {
								log.error("Assertion "+assertionName+" failed with error:");
								log.error("  -   "+it.getErrors()[0].getMessage());
								log.error("  -   Requirements:");

								// Todo: Save the requirements as an object in a map
								requirements.getPropertyList().each {
									log.info(it.getName())
									if(it.getName().contains(id)) {
										log.error("   -   "+it.getName()+" :" );
										log.error("        "+it.getValue());
									}
								}
							}else{
								log.warn("Assertion "+assertionName+" is deactivated");
							}
						}
					}
				}
			}
		}
	}
}
</con:afterRunScript><con:sensitiveInformation/></con:soapui-project>
