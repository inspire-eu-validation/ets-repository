<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EIDdc4332a0-e79e-4e15-a9f6-32425fb1389c" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-hb/hb-as</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Application schema, Habitats and Biotopes</label>
	<description><![CDATA[This test suite examines requirements associated with the application schema.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/inspire-eu-validation/community/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as" target="_blank">Conformance Class 'Application Schema, Habitats and Biotopes'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-gml" target="_blank">Conformance Class 'GML application schemas, Habitats and Biotopes'</a></li></ul>]]></description>
	<reference>../../inspire-noggeo-bsxets.xq</reference>
	<version>0.1.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2020-10-21T11:00:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2020-10-21T11:00:00Z</lastUpdateDate>
	<tags>
		<tag ref="EID461f5a03-05f6-45d8-bc10-fbaf6483b9ff"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID1c48f426-e247-4a87-aa94-4336e17bc492"/>
	</dependencies>
	<testModules>
		<TestModule id="EID504482d1-07f2-4812-98ac-09d517939001">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EIDdc4332a0-e79e-4e15-a9f6-32425fb1389c"/>
			<testCases>
				<TestCase id="EIDf236236b-cc76-47f2-8c66-18c7b5054839">
					<label>Code lists</label>
					<description>Verify that code lists extensions can be accessed.</description>
					<parent ref="EID504482d1-07f2-4812-98ac-09d517939001"/>
					<testSteps>
						<TestStep id="EIDb26c8b43-d50a-478a-875c-c448b5aa43d8">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDf236236b-cc76-47f2-8c66-18c7b5054839"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID3b186120-a9eb-483f-a1c8-e2fc88d856a2">
									<label>hb-as.a.1: referenceHabitatTypeId</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#referenceHabitatTypeId'>referenceHabitatTypeId</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#validValue1'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HB_v3.0.pdf">INSPIRE Data Specification on Habitats and Biotopes, A.1.3</a>]]></description>
									<parent ref="EIDb26c8b43-d50a-478a-875c-c448b5aa43d8"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $property_string := 'referenceHabitatTypeId'
let $features_selected := $features[self::hb:Habitat]

let $messages := 

	for $feature in $features_selected/hb:habitat/hb:HabitatTypeCoverType
		let $envDom := $feature/hb:referenceHabitatTypeId

	let $urls := 
		for $x in $envDom/@xlink:href
			return $x

	let $map := local:check-resource-uris($urls, 30, true())
	let $invalid_urls :=
		for $href in $urls
			let $url := string($href)
			let $validuri := map:get($map, $url)
			return
				if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then $url
				else ()
		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElementHabitatBio',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityHabitatBio',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeHabitatBio',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})		
			else if (exists($envDom) and exists($envDom/@xlink:href) and ($envDom/@xlink:href = $invalid_urls)) then
				local:addMessage('TR.brokenLinkHabitatBio', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ',')})
			else (local:addMessage('TR.checkManuallyCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ',')}))

return
(if ($messages and ($messages/@ref = ('TR.missingElementHabitatBio','TR.wrongMultiplicityHabitatBio','TR.missingAttributeHabitatBio','TR.brokenLinkHabitatBio'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.checkManuallyCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementHabitatBio"/>
										<translationTemplate ref="TR.wrongMultiplicityHabitatBio"/>
										<translationTemplate ref="TR.missingAttributeHabitatBio"/>
										<translationTemplate ref="TR.brokenLinkHabitatBio"/>
										<translationTemplate ref="TR.checkManuallyCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDbb60945e-b372-499a-8c55-b20f515cb78e">
									<label>hb-as.a.2: referenceHabitatTypeScheme</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#referenceHabitatTypeScheme'>referenceHabitatTypeScheme</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HB_v3.0.pdf">INSPIRE Data Specification on Habitats and Biotopes, A.1.3</a>]]></description>
									<parent ref="EIDb26c8b43-d50a-478a-875c-c448b5aa43d8"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ReferenceHabitatTypeSchemeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ReferenceHabitatTypeSchemeValue/ReferenceHabitatTypeSchemeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'referenceHabitatTypeScheme'
let $features_selected := $features[self::hb:Habitat]

let $messages := 

	for $feature in $features_selected/hb:habitat/hb:HabitatTypeCoverType
		let $envDom := $feature/hb:referenceHabitatTypeScheme

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElementHabitatBio',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityHabitatBio',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeHabitatBio',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})		
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueHabitatBio',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementHabitatBio"/>
										<translationTemplate ref="TR.wrongMultiplicityHabitatBio"/>
										<translationTemplate ref="TR.missingAttributeHabitatBio"/>
										<translationTemplate ref="TR.disallowedCodeListValueHabitatBio"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID15bccab1-d180-4ab9-9bf0-b73e8b34a607">
									<label>hb-as.a.3: qualifierLocalName</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#qualifierLocalName'>qualifierLocalName</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#validValue3'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HB_v3.0.pdf">INSPIRE Data Specification on Habitats and Biotopes, A.1.3</a>]]></description>
									<parent ref="EIDb26c8b43-d50a-478a-875c-c448b5aa43d8"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/QualifierLocalNameValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/QualifierLocalNameValue/QualifierLocalNameValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'qualifierLocalName'
let $features_selected := $features[self::hb:Habitat]

let $messages_spec := 

	for $feature in $features_selected/hb:habitatSpecies/hb:HabitatSpeciesType/hb:localSpeciesName/hb:LocalNameType
		let $envDom := $feature/hb:qualifierLocalName

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElementHabitatBio',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityHabitatBio',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueHabitatBio',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $messages_ct := 

	for $feature in $features_selected/hb:habitat/hb:HabitatTypeCoverType/hb:localHabitatName/hb:LocalNameType
		let $envDom := $feature/hb:qualifierLocalName

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElementHabitatBio',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityHabitatBio',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueHabitatBio',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()			

let $messages_veg := 

	for $feature in $features_selected/hb:habitatVegetation/hb:HabitatVegetationType/hb:localVegetationName/hb:LocalNameType
		let $envDom := $feature/hb:qualifierLocalName

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElementHabitatBio',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityHabitatBio',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueHabitatBio',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()		

let $combined_messages := ($messages_spec, $messages_ct, $messages_veg)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementHabitatBio"/>
										<translationTemplate ref="TR.wrongMultiplicityHabitatBio"/>
										<translationTemplate ref="TR.disallowedCodeListValueHabitatBio"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDa38d9898-b1a8-467b-b86c-d43a73cd4c20">
									<label>hb-as.a.4: referenceSpeciesId</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#referenceSpeciesId'>referenceSpeciesId</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#validValue4'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HB_v3.0.pdf">INSPIRE Data Specification on Habitats and Biotopes, A.1.3</a>]]></description>
									<parent ref="EIDb26c8b43-d50a-478a-875c-c448b5aa43d8"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $euCodelist := 'https://inspire.ec.europa.eu/codelist/EuNomenCodeValue'
let $eunisCodelist := 'https://inspire.ec.europa.eu/codelist/EunisSpeciesCodeValue'
let $natureCodelist := 'https://inspire.ec.europa.eu/codelist/NatureDirectivesCodeValue'
let $features_selected := $features[self::hb:Habitat]
let $property_string := 'referenceSpeciesId'
let $messages :=
	for $feature in $features_selected
	let $urls := 
		for $x in $feature/hb:habitatSpecies/hb:HabitatSpeciesType/hb:referenceSpeciesId/@xlink:href
			return $x

	let $map := local:check-resource-uris($urls, 30, true())
	let $invalid_urls :=
		for $href in $urls
			let $url := string($href)
			let $validuri := map:get($map, $url)
			return
				if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then $url
				else ()
				
	let $envDom := $feature/hb:habitatSpecies/hb:HabitatSpeciesType/hb:referenceSpeciesId

	return
		if (exists($feature/hb:habitatSpecies/hb:HabitatSpeciesType) and not(exists($envDom))) then
			local:addMessage('TR.missingElementHabitatBio',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicityHabitatBio',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
		else if (exists($feature/hb:habitatSpecies/hb:HabitatSpeciesType) and not($envDom/@xlink:href)) then
			local:addMessage('TR.missingAttributeHabitatBio',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id),'attribute':'@xlink:href', 'property': $property_string}) 
		else if (exists($feature/hb:habitatSpecies/hb:HabitatSpeciesType) and not(starts-with($envDom/@xlink:href, 'http://www.eu-nomen.eu/portal/taxon.php?GUID=')) and not(starts-with($envDom/@xlink:href, 'https://eunis.eea.europa.eu/species/')) and not($envDom/@xlink:href = $invalid_urls)) then
			local:addMessage('TR.manual.disallowedCodeListValueHB',  map {'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $natureCodelist}) 
		else if($envDom/@xlink:href = $invalid_urls) then
			let $dummy := "aaa"
				return 
					if (starts-with($envDom/@xlink:href, 'http://www.eu-nomen.eu/portal/taxon.php?GUID=')) then
						local:addMessage('TR.disallowedCodeListValueHabitatBio',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $euCodelist}) 
					else if (starts-with($envDom/@xlink:href, 'https://eunis.eea.europa.eu/species/')) then
						local:addMessage('TR.disallowedCodeListValueHabitatBio',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $eunisCodelist}) 
					else (local:addMessage('TR.brokenLinkHabitatBio', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($envDom/@xlink:href, ',')}))
		else ()


return
(if ($messages and ($messages/@ref = ('TR.missingElementHabitatBio','TR.wrongMultiplicityHabitatBio','TR.missingAttributeHabitatBio','TR.brokenLinkHabitatBio','TR.disallowedCodeListValueHabitatBio'))) then 'FAILED'
else if($messages and $messages/@ref = ('TR.manual.disallowedCodeListValueHB')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementHabitatBio"/>
										<translationTemplate ref="TR.wrongMultiplicityHabitatBio"/>
										<translationTemplate ref="TR.missingAttributeHabitatBio"/>
										<translationTemplate ref="TR.disallowedCodeListValueHabitatBio"/>
										<translationTemplate ref="TR.manual.disallowedCodeListValueHB"/>
										<translationTemplate ref="TR.brokenLinkHabitatBio"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID96b51bdc-c3eb-4978-8935-2dbab2f99036">
									<label>hb-as.a.5: referenceSpeciesScheme</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#referenceSpeciesScheme'>referenceSpeciesScheme</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values#validValue5'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HB_v3.0.pdf">INSPIRE Data Specification on Habitats and Biotopes, A.1.3</a>]]></description>
									<parent ref="EIDb26c8b43-d50a-478a-875c-c448b5aa43d8"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ReferenceSpeciesSchemeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ReferenceSpeciesSchemeValue/ReferenceSpeciesSchemeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'referenceSpeciesScheme'
let $features_selected := $features[self::hb:Habitat]

let $messages := 

	for $feature in $features_selected/hb:habitatSpecies/hb:HabitatSpeciesType
		let $envDom := $feature/hb:referenceSpeciesScheme

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElementHabitatBio',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityHabitatBio',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeHabitatBio',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})		
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueHabitatBio',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementHabitatBio"/>
										<translationTemplate ref="TR.wrongMultiplicityHabitatBio"/>
										<translationTemplate ref="TR.missingAttributeHabitatBio"/>
										<translationTemplate ref="TR.disallowedCodeListValueHabitatBio"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EID4782af36-2786-4161-80ca-38f7e65c1fc3">
					<label>Specific requirements</label>
					<description>Verify that the features provided in the dataset adhere to the theme-specific requirements specified in the INSPIRE application schema.</description>
					<parent ref="EID504482d1-07f2-4812-98ac-09d517939001"/>
					<testSteps>
						<TestStep id="EIDa414432c-a22c-4709-9ae3-ec1df3a0c381">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID4782af36-2786-4161-80ca-38f7e65c1fc3"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID69c74c5d-bd05-4394-bc31-70cc65a63807">
									<label>hb-as.b.1: referenceHabitatTypeId</label>
									<description><![CDATA[Check that at least one habitat type according to a (pan-european) <a href = 'http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/specific-req#referenceHabitatTypeScheme'>referenceHabitatTypeScheme</a> listed in the <a href='http://inspire.ec.europa.eu/codelist/ReferenceHabitatTypeSchemeValue'>ReferenceHabitatTypeSchemeValue</a> code list is available (This encoding is intended to allow for queries on habitat types on a pan-European harmonized level).<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hb/master/hb-as/specific-req" target="_blank">Abstract Test Case 'Specific requirements'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_HB_v3.0.pdf">INSPIRE Data Specification on Habitats and Biotopes, A.1.8</a>]]></description>
									<parent ref="EIDa414432c-a22c-4709-9ae3-ec1df3a0c381"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ReferenceHabitatTypeSchemeValue'
let $property_string := 'referenceHabitatTypeScheme'
let $features_selected := $features[self::hb:Habitat]
let $urls := 
		for $x in $features_selected/hb:habitat/hb:HabitatTypeCoverType/hb:referenceHabitatTypeScheme/@xlink:href
				return $x		
let $filename := for $x in $features_selected
			return local:filename($x)	
let $map := local:check-resource-uris($urls, 30, true())
let $valid_urls :=
	for $href in $urls
		let $url := string($href)
		let $validuri := map:get($map, $url)
		return
			if (not ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$'))) then $url
			else ()
let $found := 

	for $feature in $features_selected/hb:habitat/hb:HabitatTypeCoverType

		let $envDom := $feature/hb:referenceHabitatTypeScheme

		return
			if ((count($envDom) = 1) and exists($envDom/@xlink:href) and ($envDom/@xlink:href = $valid_urls)) then
				true()
			else ()
let $messages := (if (not(true() = $found)) then
					local:addMessage('TR.constraintViolationHB', map { 'filename': distinct-values($filename), 'constraint': 'At least one habitat type according to a (pan-european) referenceHabitatTypeScheme listed in the ReferenceHabitatTypeSchemeValue code list is available', 'additionalInfo': ''})
				else())

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.constraintViolationHB"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>