<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID1f9bc92a-5879-4e9b-bcbe-1d2d0cab0aab" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-cp/cp-as</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Application Schema, Cadastral parcel</label>
	<description><![CDATA[This test suite examines requirements associated with the application schema.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/INSPIRE-MIF/helpdesk-validator/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-as" target="_blank">Conformance Class 'Application schema, Cadastral Parcels'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-gml" target="_blank">Conformance Class 'GML application schemas, Cadastral Parcels'</a></li></ul>]]></description>
	<reference>../../inspire-bsxets.xq</reference>
	<version>0.2.2</version>
	<author>PwC</author>
	<creationDate>2016-09-27T00:00:00Z</creationDate>
	<lastEditor>interactive instruments GmbH</lastEditor>
	<lastUpdateDate>2017-05-16T13:00:00Z</lastUpdateDate>
 	<tags>
		<tag ref="EID94000e12-3021-4ba6-827e-a59eefd7a3c8"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
 	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID18b742d0-15eb-421f-bbec-7c8c5cf7ee1a"/>
	</dependencies>	
	<testModules>
		<TestModule id="EID052df133-b598-4f1c-957f-8354751fc3c3">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EID1f9bc92a-5879-4e9b-bcbe-1d2d0cab0aab"/>
			<testCases>
  				<TestCase id="EID67cce5c3-336e-4a5b-b6be-4cc4a6daba61">
					<label>Modelling of object references</label>
					<description>Verify whether all instances of the spatial object type CadastralParcel carry as a thematic identifier the attribute nationalCadastralReference. This attribute must enable users to make the link with rights, owners and other cadastral information in national cadastral registers or equivalent.</description>
					<parent ref="EID052df133-b598-4f1c-957f-8354751fc3c3"/>
					<testSteps>
						<TestStep id="EIDbbccbf96-6daa-46f7-8bad-8563c0209295">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID67cce5c3-336e-4a5b-b6be-4cc4a6daba61"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EIDf9e38ad9-f997-4e26-8a4c-f5f7d82f48c4">
									<label>cp-as.a.1: Verify whether all instances of the spatial object type CadastralParcel carry as a thematic identifier the attribute nationalCadastralReference.</label>
									<description><![CDATA[Verify that all instances of the spatial object type CadastralParcel have as a thematic identifier the attribute nationalCadastralReference.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Annex II Section 6.3.2: Theme-specific Requirements. All instances of the spatial object type CadastralParcel shall carry as a thematic identifier the attribute nationalCadastralReference. This attribute must enable users to make the link with rights, owners and other cadastral information in national cadastral registers or equivalent.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-as/mor" target="_blank">Abstract Test Case 'Modelling of object references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_CP_v3.1.pdf">INSPIRE Data Specification on Cadastral Parcels, A.1.9</a>]]></description>
									<parent ref="EIDbbccbf96-6daa-46f7-8bad-8563c0209295"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $featuresWithErrors := $features[self::*:CadastralParcel and not(*:nationalCadastralReference)]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED', 
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   return local:addMessage('TR.emptyAttribute', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'attribute' : 'nationalCadastralReference' }))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.featuresWithErrors"/>
										<translationTemplate ref="TR.noUpperLevelArea"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDf76ab80a-9cd0-4b9a-ac2b-99f296f0f56d">
									<label>cp-as.a.2: Manual review - Verify that the value of the attribute nationalCadastralReference enables the users to make the link with rights, owners and other cadastral information in national cadastral registers or equivalent.</label>
									<description><![CDATA[Verify that the value of the attribute nationalCadastralReference enables the users to make the link with rights, owners and other cadastral information in national cadastral registers or equivalent.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Annex II Section 6.3.2: Theme-specific Requirements. All instances of the spatial object type CadastralParcel shall carry as a thematic identifier the attribute nationalCadastralReference. This attribute must enable users to make the link with rights, owners and other cadastral information in national cadastral registers or equivalent.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-as/mor" target="_blank">Abstract Test Case 'Modelling of object references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_CP_v3.1.pdf">INSPIRE Data Specification on Cadastral Parcels, A.1.9</a>]]></description>
									<parent ref="EIDbbccbf96-6daa-46f7-8bad-8563c0209295"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>NOT_APPLICABLE</expression>
									<testItemType ref="EIDb48eeaa3-6a74-414a-879c-1dc708017e11"/>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
 				<TestCase id="EID36322003-1c28-432b-8fcc-dceaa3ce8395">
					<label>Cadastral Boundaries</label>
					<description>Verify whether, if cadastral boundaries are provided, the cadastral boundaries corresponding to the outline of a cadastral parcel form closed ring(s).</description>
					<parent ref="EID052df133-b598-4f1c-957f-8354751fc3c3"/>
					<testSteps>
						<TestStep id="EID487e2252-6777-4f61-9e1f-7b97865ffeb2">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID36322003-1c28-432b-8fcc-dceaa3ce8395"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EIDbe281220-e6b9-47ab-925e-a41015b6337e">
									<label>cp-as.b.1: Cadastral boundaries corresponding to the outline of a cadastral parcel form closed ring(s).</label>
									<description><![CDATA[Check that cadastral boundaries corresponding to the outline of a cadastral parcel form closed ring(s).<br/><br/>
Known limitation: Currently the assertion is disabled as ETF version 1 does not support testing, if a line string is closed. Once all deployments of the INSPIRE validator use the ETF version 2 software, the test will be updated and enabled.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Annex II Section 6.3.2 (2): Theme-specific Requirements. If cadastral boundaries are provided, the cadastral boundaries corresponding to the outline of a cadastral parcel shall form closed ring(s).</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-as/cadastralBoundaries" target="_blank">Abstract Test Case 'Cadastral Boundaries'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_CP_v3.1.pdf">INSPIRE Data Specification on Cadastral Parcels, A.1.8</a>]]></description>
									<parent ref="EID487e2252-6777-4f61-9e1f-7b97865ffeb2"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $messages :=
(for $candidate in $features[self::*:CadastralParcel]
  return
  try {
  let $candidate_geometry := ggeo:getGeometry($candidate/@gml:id,$candidate/*:geometry/*[1])
  let $env := ggeo:envelope($candidate_geometry)
  let $other_features := ggeo:search($env[1],$env[2],$env[3],$env[4])
  let $onBoundary :=
  for $feature in $other_features[self::*:CadastralBoundary]
   return
   try {
   let $other_geometry := ggeo:getGeometry($feature/@gml:id,$feature/*:geometry/*[1])
   let $check := ggeo:relate($other_geometry, $candidate_geometry, 'FTFF*FT*T') 
	return if ($check) then $feature else ()
   } catch * { 
		let $dummy := local:log('Processing feature ' || string($feature/@gml:id) || '. Exception: ' || $err:code || ' - ' || $err:description || ' [' || $err:module || ', line: ' || $err:line-number || ', column: ' || $err:column-number || ']')
		return () (: silently record the exception in the log, but do not raise errors in the test report as parsing exceptions are already reported in assertion gmlas.d.11 :)
	}    
  return 
  if (not($onBoundary)) then () 
  else
    let $union := ggeo:union($onBoundary)
    (: TODO reduce to line strings that are not closed, requires a new isClosed() function in GmlGeoX :)
    let $linestrings := functx:get-matches($union,'LINESTRING\s?\([\d,\.\s]+\)')[fn:string-length(.)>0]
    let $dummy := local:log($candidate/@gml:id || ': ' || $union)
    return local:addMessage('TR.openBoundary', map { 'filename': local:filename($candidate), 'featureType' : local-name($candidate), 'gmlid': string($candidate/@gml:id), 'featureType2' : local-name($onBoundary[1]), 'gmlids': string-join($onBoundary/@gml:id, ''', '''), 'openBoundaries': fn:string-join($linestrings, ', ') })
   } catch * { 
		let $dummy := local:log('Processing feature ' || string($candidate/@gml:id) || '. Exception: ' || $err:code || ' - ' || $err:description || ' [' || $err:module || ', line: ' || $err:line-number || ', column: ' || $err:column-number || ']')
		return () (: silently record the exception in the log, but do not raise errors in the test report as parsing exceptions are already reported in assertion gmlas.d.11 :)
   })[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count(fn:distinct-values($messages//etf:argument[@token='gmlid']/text()))),
 $messages)
									</expression>
									<testItemType ref="EID92f22a19-2ec2-43f0-8971-c2da3eaafcd2"/>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
 				<TestCase id="EIDbf3c38ae-92d1-409e-8550-2680de04bfa1">
					<label>Code list values</label>
					<description>Verify whether all attributes whose value type is a code list take the values set out therein.</description>
					<parent ref="EID052df133-b598-4f1c-957f-8354751fc3c3"/>
					<testSteps>
						<TestStep id="EID1c04b5b9-e980-4722-8fed-ea7b0fdd26b2">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDbf3c38ae-92d1-409e-8550-2680de04bfa1"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID3b54e278-c15c-44b4-8314-ffba1225b32c">
									<label>cp-as.c.1: CadastralZoningLevel attributes</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II of the regulation. For this attribute, the allowed values are specified in code list <a href='http://inspire.ec.europa.eu/codelist/CadastralZoningLevelValue'>http://inspire.ec.europa.eu/codelist/CadastralZoningLevelValue</a>.<br/>For datasets using version 3 of the GML application schema, the value is the last path element of the code list value URI and it is in the child text node. For datasets using version 4 of the GML application schema, the value is in the xlink:href XML attribute and is the HTTP URI of the code list value.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): Types for the Exchange and Classification of Spatial Objects.  For the exchange and classification of spatial objects from data sets meeting the conditions laid down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): Types for the Exchange and Classification of Spatial Objects. The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code Lists and Enumerations. Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and
narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and
additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code Lists and Enumerations. Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Code Lists and Enumerations. Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Code Lists and Enumerations. Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_CP_v3.1.pdf">INSPIRE Data Specification on Cadastral Parcels, A.1.3</a>]]></description>
									<parent ref="EID1c04b5b9-e980-4722-8fed-ea7b0fdd26b2"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features3 := $features[self::cp3:CadastralZoning]
let $features4 := $features[self::cp:CadastralZoning]
let $messages := local:check-code-list-values($features3, $features4, 'level', 'http://inspire.ec.europa.eu/codelist/CadastralZoningLevelValue')
return (if ($messages) then 'FAILED' else 'PASSED', $messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.disallowedCodeListValue"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EID43f3aaa7-ea02-4435-9d05-78f5e48c463b">
					<label>Constraints</label>
					<description>Verify that the features provided in the dataset adhere to the constraints specified in the INSPIRE application schema.</description>
					<parent ref="EID052df133-b598-4f1c-957f-8354751fc3c3"/>
					<testSteps>
						<TestStep id="EID856a5b01-bfbf-45e0-9f01-7252eff56354">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID43f3aaa7-ea02-4435-9d05-78f5e48c463b"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
							<TestAssertion id="EID2be9a647-eee6-4a6e-b9cc-ec0220d0c6a7">
									<label>cp-as.d.1: Value of areaValue shall be given in square meters</label>
									<description><![CDATA[Value of areaValue shall be given in square meters<br/><br/>
OCL: "inv: self.areaValue.uom.uomSymbol='m2'".<br/><br/>
Verify that BasicPropertyUnit.areaValue.uom and CadastralParcel.areaValue.uom are given in 'm2'.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_CP_v3.1.pdf">INSPIRE Data Specification on Cadastral Parcels, A.1.6</a>]]></description>
									<parent ref="EID856a5b01-bfbf-45e0-9f01-7252eff56354"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := 'm2'
let $featuresWithErrors := $features[(self::*:CadastralParcel or self::*:BasicPropertyUnit) and *:areaValue and not (*:areaValue/@uom and *:areaValue/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:areaValue/@uom[not(. = $units)])
   let $missing := $feature[not(*:areaValue/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'areaValue', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'areaValue' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates> 
								</TestAssertion>
								<TestAssertion id="EID2c800fcb-3e82-4385-be9c-1fc6a761dc9b">
									<label>cp-as.d.2: Value of estimatedAccuracy shall be given in meters</label>
									<description><![CDATA[Value of estimatedAccuracy shall be given in meters<br/><br/>
OCL: "inv: self.estimatedAccuracy.uom.uomSymbol='m'".<br/><br/>
Verify that CadastralBoundary.estimatedAccuracy.uom and CadastralZoning.estimatedAccuracy.uom are given in 'm'.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_CP_v3.1.pdf">INSPIRE Data Specification on Cadastral Parcels, A.1.6</a>]]></description>
									<parent ref="EID856a5b01-bfbf-45e0-9f01-7252eff56354"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $units := 'm'
let $featuresWithErrors := $features[(self::*:CadastralBoundary or self::*:CadastralZoning) and *:estimatedAccuracy and not (*:estimatedAccuracy/@uom and *:estimatedAccuracy/@uom=$units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:estimatedAccuracy/@uom[not(. = $units)])
   let $missing := $feature[not(*:estimatedAccuracy/@uom)]
   return
     (for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'estimatedAccuracy', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }),
      if ($missing) then local:addMessage('TR.uomMissing', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'estimatedAccuracy' }) else ()))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.unknownUoM"/>
										<translationTemplate ref="TR.uomMissing"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates> 
								</TestAssertion>
								<TestAssertion id="EID1e7f2289-f7be-4db4-8673-e84d05a091bd">
									<label>cp-as.d.3: Type of geometry shall be GM_Surface or GM_MultiSurface</label>
									<description><![CDATA[Type of geometry shall be GM_Surface or GM_MultiSurface<br/><br/>
OCL "inv: geometry.oclIsKindOf(GM_Surface) or geometry.oclIsKindOf(GM_MultiSurface)".<br/><br/>
Verify that CadastralParcel.geometryType is a gml:Surface or gml:MutiSurface.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_CP_v3.1.pdf">INSPIRE Data Specification on Cadastral Parcels, A.1.6</a>]]></description>
									<parent ref="EID856a5b01-bfbf-45e0-9f01-7252eff56354"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $featuresToInspect := $features[self::*:CadastralParcel]
let $featuresWithErrors := $featuresToInspect[*:geometry/*[not(self::gml:Polygon or self::gml:Surface or self::gml:MultiSurface)]][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   return
     local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'constraint': 'Type of geometry shall be GM_Surface or GM_MultiSurface.', 'additionalInfo': 'Found: ''' || local-name($feature/*:geometry/*) || '''.' }))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.constraintViolation"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates> 
								</TestAssertion>
								<TestAssertion id="EID7c7de013-84bf-4e14-8831-912f1b328646">
									<label>cp-as.d.4: A lower level cadastral zoning shall be part of an upper level zoning.</label>
									<description><![CDATA[A lower level cadastral zoning shall be part of an upper level zoning.<br/><br/>
OCL: "inv: self.nationalLevel <> '1stOrder' implies self.level < self.upperLevelUnit.level".<br/><br/>
Verify that for a CadastralZoning not of the nationalLevel 1st Order, its own level is lower than the level of the CadastralZoning referenced in upperLevelUnit.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-cp/master/cp-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_CP_v3.1.pdf">INSPIRE Data Specification on Cadastral Parcels, A.1.6</a>]]></description>
									<parent ref="EID856a5b01-bfbf-45e0-9f01-7252eff56354"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $levels := ('2ndOrder', '3rdOrder')
let $candidates := $features[self::*:CadastralZoning and (cp3:level[1]/text()=$levels or substring-after(cp:level[1]/@xlink:href,'http://inspire.ec.europa.eu/codelist/CadastralZoningLevelValue/')=$levels)]
let $refcount := count($candidates/*:upperLevelUnit[not(@xsi:nil='true')]/@xlink:href)
let $dummy := if ($refcount>100) then local:log("Checking " || $refcount || " feature references - this may take awhile...") else ()
let $messages := 
  (for $candidate in $candidates
   order by $candidate/@gml:id
   let $level := if ($candidate[cp3:level[1]/text()='3rdOrder' or cp:level[1]/@xlink:href='http://inspire.ec.europa.eu/codelist/CadastralZoningLevelValue/3rdOrder']) then '2ndOrder'
                else if ($candidate[cp3:level[1]/text()='2ndOrder' or cp:level[1]/@xlink:href='http://inspire.ec.europa.eu/codelist/CadastralZoningLevelValue/2ndOrder']) then '1stOrder'
                else ()
   let $href := $candidate/*:upperLevelUnit[not(@xsi:nil='true')]/@xlink:href 
   let $element := local:return-reference($href)
   return
    if (not($element)) then () (: ignore unresolvable links here, this is handled by the information accessibility tests :)
    else if (not($element[self::*:CadastralZoning])) then local:addMessage('TR.unknownXMLResource2', map { 'filename': local:filename($candidate), 'featureType': local-name($candidate), 'gmlid': string($candidate/@gml:id), 'url': string($href), 'elementNameExpected': 'CadastralZoning', 'elementName': local-name($element), 'namespace': namespace-uri($element) })
    else if (not($element/cp3:level[1]/text()=$level or substring-after($element/cp:level[1]/@xlink:href,'http://inspire.ec.europa.eu/codelist/CadastralZoningLevelValue/')=$level)) then local:addMessage('TR.constraintViolation', map { 'filename': local:filename($candidate), 'featureType': local-name($candidate), 'gmlid': string($candidate/@gml:id), 'constraint': 'A lower level cadastral zoning shall be part of an upper level zoning.', 'additionalInfo': 'The level of the reference zone should be ''' || $level || ''', but the level is ''' || substring-after($element/cp3:level[1]/text() | $element/cp:level[1]/@xlink:href,'http://inspire.ec.europa.eu/codelist/CadastralZoningLevelValue/') || '''.' })
    else ())[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count(fn:distinct-values($messages//etf:argument[@token='gmlid']/text()))),
 $messages)										
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.constraintViolation"/>
										<translationTemplate ref="TR.unknownXMLResource2"/>
										<translationTemplate ref="TR.featuresWithErrors"/>
									</translationTemplates> 
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>							
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
