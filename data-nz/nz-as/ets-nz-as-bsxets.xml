<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID5aab5d8a-e432-47dd-b072-7cbf520035be" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-nz/nz-as</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Application schema, Natural Risk Zones</label>
	<description><![CDATA[This test suite examines requirements associated with the application schema.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/inspire-eu-validation/community/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as" target="_blank">Conformance Class 'Application Schema, Natural Risk Zones'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-gml" target="_blank">Conformance Class 'GML application schemas, Natural Risk Zones'</a></li></ul>]]></description>
  <reference>../../inspire-noggeo-bsxets.xq</reference>
	<version>0.1.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2020-07-10T13:30:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2020-08-31T11:00:00Z</lastUpdateDate>
	<tags>
		<tag ref="EID00d4d7af-152b-4644-aeda-c8983df4535f"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EIDeca530d8-a4c0-421a-b1c3-4409fe31e10b"/>
	</dependencies>
	<testModules>
		<TestModule id="EID1e2dd0b2-dbcd-404c-9f64-dfcd504f1303">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EID5aab5d8a-e432-47dd-b072-7cbf520035be"/>
			<testCases>

				<TestCase id="EID51545c50-5ce1-4585-95f5-16b40fe955a4">
					<label>Code list values</label>
					<description>Verify whether all attributes whose value type is a code list take the values set out therein.</description>
					<parent ref="EID1e2dd0b2-dbcd-404c-9f64-dfcd504f1303"/>
					<testSteps>
						<TestStep id="EIDb2d8500e-a670-4170-9c79-6cc0593b4030">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID51545c50-5ce1-4585-95f5-16b40fe955a4"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID206276fc-1547-406b-a1bc-0cb875dcdccb">
									<label>nz-as.a.1: hazardCategory</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:

<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>.
<br/><br/>The following check is performed for every feature in the dataset, for the 'narrower' codelist:
<ul><li>Check that all the <a href='http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/code-list-values#hazardCategory'>hazardCategory</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/codelist/NaturalHazardCategoryValue'>pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule. In particular, for the 'narrower' codelist the extended values shall refer to a parent value defined by the Implementing Rule. If the check fails report reviewCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf">INSPIRE Data Specification on Natural Risk Zones, A.4.2, (A.5.3.6.1)</a>]]></description>
									<parent ref="EIDb2d8500e-a670-4170-9c79-6cc0593b4030"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $codelist := 'http://inspire.ec.europa.eu/codelist/NaturalHazardCategoryValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/NaturalHazardCategoryValue/NaturalHazardCategoryValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'NaturalHazardCategoryValue'
let $features_selected := $features[self::nz-core:ObservedEvent|self::nz-core:HazardArea|self::nz-core:RiskZone|self::nz-core:ExposedElement]
let $messages :=
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'nz-core:ExposedElement') then
					$this_feature/nz-core:assessmentOfVulnerability
				else if(name($this_feature) = 'nz-core:RiskZone') then
					$this_feature/nz-core:sourceOfRisk
				else if(name($this_feature) = 'nz-core:ObservedEvent' or name($this_feature) = 'nz-core:HazardArea') then
					$this_feature/nz-core:typeOfHazard
				else ()
			
	for $actual_feature in $this_features
		let $feature := 
				if (name($actual_feature) = 'nz-core:assessmentOfVulnerability') then
					$actual_feature/nz-core:VulnerabilityAssessment/nz-core:sourceOfVulnerability
				else $actual_feature

		let $envDom := $feature/nz-core:NaturalHazardClassification

		return
			if((name($actual_feature/..) = 'nz-core:ExposedElement' and exists($envDom) and not(exists($envDom/nz-core:hazardCategory))) or (not(name($actual_feature/..) = 'nz-core:ExposedElement') and not(exists($envDom/nz-core:hazardCategory)))) then
				local:addMessage('TR.missingElementNaturalRiskZone',  map {'filename': local:filename($actual_feature/..), 'featureType':local-name($actual_feature/..), 'gmlid': string($actual_feature/../@*:id), 'property': 'nz-core:hazardCategory'}) 
			else if((name($actual_feature/..) = 'nz-core:ExposedElement' and exists($envDom) and not(exists($envDom/nz-core:hazardCategory/@xlink:href))) or (not(name($actual_feature/..) = 'nz-core:ExposedElement') and not(exists($envDom/nz-core:hazardCategory/@xlink:href)))) then
				local:addMessage('TR.missingAttributeRiskZone',  map {'filename': local:filename($actual_feature/..), 'featureType':local-name($actual_feature/..), 'gmlid': string($actual_feature/../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (count($envDom/nz-core:hazardCategory) > 1) then 
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation',  map {'filename': local:filename($actual_feature/..), 'featureType':local-name($actual_feature/..), 'id': string($actual_feature/../@*:id), 'element': 'nz-core:hazardCategory'}) 
			else if((name($actual_feature/..) = 'nz-core:ExposedElement' and exists($envDom) and not($envDom/nz-core:hazardCategory/@xlink:href = $valid_href)) or (not(name($actual_feature/..) = 'nz-core:ExposedElement') and not($envDom/nz-core:hazardCategory/@xlink:href = $valid_href))) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($actual_feature/..), 'featureType':local-name($actual_feature/..), 'gmlid': string($actual_feature/../@*:id), 'property': $property_string, 'value': string($envDom/nz-core:hazardCategory/@xlink:href), 'count': count($feature/nz-core:NaturalHazardClassification/nz-core:hazardCategory/@xlink:href = $envDom/@xlink:href)}) 
			else ()
return
(if ($messages and not($messages/@ref = ('TR.manual.reviewCodeListValue'))) then 'FAILED' 
else if($messages/@ref = ('TR.manual.reviewCodeListValue') and not($messages/@ref != ('TR.manual.reviewCodeListValue'))) then 'PASSED_MANUAL' 
else if($messages and $messages/@ref != ('TR.manual.reviewCodeListValue')) then 'FAILED' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementNaturalRiskZone"/>
										<translationTemplate ref="TR.missingAttributeRiskZone"/>
										<translationTemplate ref="TR.wrongMultiplicitySpatialRepresentation"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID1be28c80-d444-4220-b510-ab666e91723a">
									<label>nz-as.a.2: exposedElementCategory</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:

<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>.
<br/><br/>The following check is performed for every feature in the dataset, for the 'open' codelist:
<ul><li>Check that all the <a href='http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/code-list-values#exposedElementCategory'>exposedElementCategory</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/codelist/ExposedElementCategoryValue'>pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule. If the check fails report reviewCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf">INSPIRE Data Specification on Natural Risk Zones, A.4.2, (A.5.3.6.1)</a>]]></description>
									<parent ref="EIDb2d8500e-a670-4170-9c79-6cc0593b4030"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ExposedElementCategoryValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ExposedElementCategoryValue/ExposedElementCategoryValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'ExposedElementCategoryValue'
let $features_selected := $features[self::nz-core:ExposedElementCoverage|self::nz-core:ExposedElement]
let $messages :=
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'nz-core:ExposedElement') then
					$this_feature/nz-core:assessmentOfVulnerability
				else if(name($this_feature) = 'nz-core:ExposedElementCoverage') then
					$this_feature/nz-core:typeOfElement
				else ()
			
	for $actual_feature in $this_features
		let $feature := 
				if (name($actual_feature) = 'nz-core:assessmentOfVulnerability') then
					$actual_feature/nz-core:VulnerabilityAssessment/nz-core:typeOfElement
				else $actual_feature

		let $envDom := $feature/nz-core:ExposedElementClassification

		return
			if(exists($envDom) and not(exists($envDom/nz-core:exposedElementCategory))) then
				local:addMessage('TR.missingElementNaturalRiskZone',  map {'filename': local:filename($actual_feature), 'featureType':local-name($actual_feature/..), 'gmlid': string($actual_feature/../@*:id), 'property': 'nz-core:exposedElementCategory'}) 
			else if(exists($envDom) and not(exists($envDom/nz-core:exposedElementCategory/@xlink:href))) then
				local:addMessage('TR.missingAttributeRiskZone',  map {'filename': local:filename($actual_feature), 'featureType':local-name($actual_feature/..), 'gmlid': string($actual_feature/../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (count($envDom/nz-core:exposedElementCategory) > 1) then 
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation',  map {'filename': local:filename($actual_feature), 'featureType':local-name($actual_feature/..), 'id': string($actual_feature/../@*:id), 'element': 'nz-core:hazardCategory'}) 
			else if(exists($envDom) and not($envDom/nz-core:exposedElementCategory/@xlink:href = $valid_href)) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($actual_feature), 'featureType':local-name($actual_feature/..), 'gmlid': string($actual_feature/../@*:id), 'property': $property_string, 'value': string($envDom/nz-core:exposedElementCategory/@xlink:href), 'count': count($feature/nz-core:NaturalHazardClassification/nz-core:hazardCategory/@xlink:href = $envDom/@xlink:href)}) 
			else ()
return
(if ($messages and not($messages/@ref = ('TR.manual.reviewCodeListValue'))) then 'FAILED' 
else if($messages/@ref = ('TR.manual.reviewCodeListValue') and not($messages/@ref != ('TR.manual.reviewCodeListValue'))) then 'PASSED_MANUAL' 
else if($messages and $messages/@ref != ('TR.manual.reviewCodeListValue')) then 'FAILED' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementNaturalRiskZone"/>
										<translationTemplate ref="TR.missingAttributeRiskZone"/>
										<translationTemplate ref="TR.wrongMultiplicitySpatialRepresentation"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>


				<TestCase id="EID633b69a5-17f4-423c-ab6a-4725ba278ad7">
					<label>Constraints</label>
					<description>Verify that the features provided in the dataset adhere to the constraints specified in the INSPIRE application schema.</description>
					<parent ref="EID1e2dd0b2-dbcd-404c-9f64-dfcd504f1303"/>
					<testSteps>
						<TestStep id="EID14411563-bf1b-4d3a-8a9d-1f60901ea1bc">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID633b69a5-17f4-423c-ab6a-4725ba278ad7"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>


								<TestAssertion id="EID5ebcc7d0-d296-45a6-a479-dad4d75fe01e">
									<label>nz-as.b.1: sourceOfSpatialRepresentation</label>
									<description><![CDATA[Check that if the sourceOfSpatialRepresentation association role is empty, the geometry of the ExposedElement spatial object shall be provided. If the exposed element spatial object is provided with a spatial representation, then the object does not have to be linked to any other spatial object defined in another INSPIRE theme. If the exposed element spatial object is NOT provided with a spatial representation, then it shall reference another object defined in another INSPIRE theme by using the association sourceOfSpatialRepresentation.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf">INSPIRE Data Specification on Natural Risk Zones, A.4.2, (A.5.3.6.1)</a>]]></description>
									<parent ref="EID14411563-bf1b-4d3a-8a9d-1f60901ea1bc"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features_selected := $features[self::nz-core:ExposedElement]
let $urlssp := $features_selected/nz-core:sourceOfSpatialRepresentation/@xlink:href
let $mapsp := local:check-resource-uris($urlssp, 30, true())
let $urlsg := $features_selected/nz-core:geometry/@xlink:href
let $mapg := local:check-resource-uris($urlsg, 30, true())
let $messages :=
	for $feature in $features_selected
		return
			if (not(exists($feature/nz-core:geometry)) and not(exists($feature/nz-core:sourceOfSpatialRepresentation))) then 
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': ' sourceOfSpatialRepresentation association role or geometry are present', 'additionalInfo':''})
			else if (count($feature/nz-core:sourceOfSpatialRepresentation) > 1) then
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation', map {'filename': local:filename($feature), 'id': string($feature/@*:id), 'element': 'nz-core:sourceOfSpatialRepresentation'}) 
			else if (count($feature/nz-core:geometry) > 1) then
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation', map {'filename': local:filename($feature), 'id': string($feature/@*:id), 'element':'nz-core:geometry'}) 
			else if (not(exists($feature/nz-core:geometry)) and exists($feature/nz-core:sourceOfSpatialRepresentation)) then 
				let $dummy := "this variable is needed here to do not receive an incomplete if expression error"
				return
				if (not(exists($feature/nz-core:sourceOfSpatialRepresentation/@xlink:href)) and not(exists($feature/nz-core:sourceOfSpatialRepresentation/@nilReason)) and not(has-children($feature/nz-core:sourceOfSpatialRepresentation))) then
						local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'sourceOfSpatialRepresentation association role or geometry are present', 'additionalInfo':''})
				else if (exists($feature/nz-core:sourceOfSpatialRepresentation/@xlink:href)) then
					let $url := string($feature/nz-core:sourceOfSpatialRepresentation/@xlink:href)
					let $validuri := map:get($mapsp, $url)
					return 
						if ($validuri = 'notHTTP') then
							local:addMessage('TR.urlNotHttp', map { 'filename': local:filename($feature), 'id': string($feature/@*:id), 'url': $url })
						else if ($validuri = 'idNotFound') then
							local:addMessage('TR.idNotFound', map { 'filename': local:filename($feature), 'id': string($feature/@*:id), 'url': $url })
						else if (starts-with($validuri, 'EXCEPTION')) then
							local:addMessage('TR.resourceNotAccessibleException', map { 'filename': local:filename($feature), 'id': string($feature/@*:id), 'url': $url, 'message': substring-after($validuri, 'EXCEPTION ') })
						else if (matches($validuri,'^\d{3}$')) then
							local:addMessage('TR.resourceNotAccessible', map { 'filename': local:filename($feature), 'id': string($feature/@*:id), 'url': $url, 'status' : $validuri })
						else ()
				else ()
			else if (not(exists($feature/nz-core:sourceOfSpatialRepresentation)) and exists($feature/nz-core:geometry)) then 
				let $dummy := "this variable is needed here to do not receive an incomplete if expression error"
				return
				if (not(exists($feature/nz-core:geometry/@xlink:href)) and not(exists($feature/nz-core:geometry/@nilReason)) and not(has-children($feature/nz-core:geometry))) then
						local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'sourceOfSpatialRepresentation association role or geometry are present', 'additionalInfo':''})
				else if (exists($feature/nz-core:geometry/@xlink:href)) then
					let $url := string($feature/nz-core:geometry/@xlink:href)
					let $validuri := map:get($mapg, $url)
					return 
						if ($validuri = 'notHTTP') then
							local:addMessage('TR.urlNotHttp', map { 'filename': local:filename($feature), 'id': string($feature/@*:id), 'url': $url })
						else if ($validuri = 'idNotFound') then
							local:addMessage('TR.idNotFound', map { 'filename': local:filename($feature), 'id': string($feature/@*:id), 'url': $url })
						else if (starts-with($validuri, 'EXCEPTION')) then
							local:addMessage('TR.resourceNotAccessibleException', map { 'filename': local:filename($feature), 'id': string($feature/@*:id), 'url': $url, 'message': substring-after($validuri, 'EXCEPTION ') })
						else if (matches($validuri,'^\d{3}$')) then
							local:addMessage('TR.resourceNotAccessible', map { 'filename': local:filename($feature), 'id': string($feature/@*:id), 'url': $url, 'status' : $validuri })
						else ()
				else ()
			else ()
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicitySpatialRepresentation"/>
										<translationTemplate ref="TR.urlNotHttp"/>
										<translationTemplate ref="TR.idNotFound"/>
										<translationTemplate ref="TR.resourceNotAccessibleException"/>
										<translationTemplate ref="TR.resourceNotAccessible"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>

								<TestAssertion id="EID7d010fd2-29e5-4756-a0da-01a9cdfb87f5">
									<label>nz-as.b.2: LevelOrIntensity</label>
									<description><![CDATA[Check that for the data type LevelOrIntensity either the qualitative value or the quantitative value is provided.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf">INSPIRE Data Specification on Natural Risk Zones, A.4.2, (A.5.3.6.1)</a>]]></description>
									<parent ref="EID14411563-bf1b-4d3a-8a9d-1f60901ea1bc"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features_selected := $features[self::nz-core:*]
let $messages :=
	for $feature in $features_selected//nz-core:LevelOrIntensity
		return
			if (count($feature/nz-core:qualitativeValue) = 0 and count($feature/nz-core:quantitativeValue) = 0) then
				local:addMessage('TR.missingElementNaturalRiskZone',  map {'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'property':'nz-core:qualitativeValue or nz-core:quantitativeValue'}) 
			else if (count($feature/nz-core:qualitativeValue) > 1) then
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation', map {'filename': local:filename($feature), 'id': string($feature/@*:id), 'element':'nz-core:qualitativeValue'}) 
			else if (count($feature/nz-core:quantitativeValue) > 1) then
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation', map {'filename': local:filename($feature), 'id': string($feature/@*:id), 'element':'nz-core:quantitativeValue'}) 
			else if (exists($feature/nz-core:qualitativeValue) and exists($feature/nz-core:quantitativeValue) and string-length($feature/nz-core:quantitativeValue) = 0 and not(exists($feature/nz-core:quantitativeValue/@nilReason)) and string-length($feature/nz-core:qualitativeValue) = 0 and not(exists($feature/nz-core:qualitativeValue/@nilReason))) then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'qualitativeValue or quantitativeValue roles must not be empty', 'additionalInfo':''})
			else if (not(exists($feature/nz-core:quantitativeValue) and (string-length($feature/nz-core:quantitativeValue) != 0 or exists($feature/nz-core:quantitativeValue/@nilReason))) and exists($feature/nz-core:qualitativeValue) and string-length($feature/nz-core:qualitativeValue) = 0 and not(exists($feature/nz-core:qualitativeValue/@nilReason))) then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'qualitativeValue or quantitativeValue roles must not be empty', 'additionalInfo':''})
			else if (not(exists($feature/nz-core:qualitativeValue) and (string-length($feature/nz-core:qualitativeValue) != 0 or exists($feature/nz-core:qualitativeValue/@nilReason))) and exists($feature/nz-core:quantitativeValue) and string-length($feature/nz-core:quantitativeValue) = 0 and not(exists($feature/nz-core:quantitativeValue/@nilReason))) then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'qualitativeValue or quantitativeValue roles must not be empty', 'additionalInfo':''})
			else ()
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementNaturalRiskZone"/>
										<translationTemplate ref="TR.wrongMultiplicitySpatialRepresentation"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDc8408080-a82f-4683-a86b-381a181705c6">
									<label>nz-as.b.3: LikelihoodOfOccurrence</label>
									<description><![CDATA[Check that for the data type LikelihoodOfOccurrence either the qualitative likelihood or the quantitative likelihood is provided.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf">INSPIRE Data Specification on Natural Risk Zones, A.4.2, (A.5.3.6.1)</a>]]></description>
									<parent ref="EID14411563-bf1b-4d3a-8a9d-1f60901ea1bc"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features_selected := $features[self::nz-core:*]
let $messages :=
	for $feature in $features_selected//nz-core:LikelihoodOfOccurrence
		return
			if ((count($feature/nz-core:qualitativeLikelihood) = 0) and (count($feature/nz-core:quantitativeLikelihood) = 0)) then
				local:addMessage('TR.missingElementNaturalRiskZone',  map {'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'property':'nz-core:qualitativeLikelihood or nz-core:quantitativeLikelihood'}) 
			else if (count($feature/nz-core:qualitativeLikelihood) > 1) then
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation', map {'filename': local:filename($feature), 'id': string($feature/@*:id), 'element':'nz-core:qualitativeLikelihood'}) 
			else if (count($feature/nz-core:quantitativeLikelihood) > 1) then
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation', map {'filename': local:filename($feature), 'id': string($feature/@*:id), 'element':'nz-core:quantitativeLikelihood'}) 
			else if (exists($feature/nz-core:qualitativeLikelihood) and exists($feature/nz-core:quantitativeLikelihood) and not(has-children($feature/nz-core:quantitativeLikelihood)) and not(exists($feature/nz-core:quantitativeLikelihood/@nilReason)) and string-length($feature/nz-core:qualitativeLikelihood) = 0 and not(exists($feature/nz-core:qualitativeLikelihood/@nilReason))) then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'qualitativeLikelihood or quantitativeLikelihood roles must not be empty', 'additionalInfo':''})
			else if (not(exists($feature/nz-core:quantitativeLikelihood) and (has-children($feature/nz-core:quantitativeLikelihood) or exists($feature/nz-core:quantitativeLikelihood/@nilReason))) and exists($feature/nz-core:qualitativeLikelihood) and string-length($feature/nz-core:qualitativeLikelihood) = 0 and not(exists($feature/nz-core:qualitativeLikelihood/@nilReason))) then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'qualitativeLikelihood or quantitativeLikelihood roles must not be empty', 'additionalInfo':''})
			else if (not(exists($feature/nz-core:qualitativeLikelihood) and (string-length($feature/nz-core:qualitativeLikelihood) != 0 or exists($feature/nz-core:qualitativeLikelihood/@nilReason))) and exists($feature/nz-core:quantitativeLikelihood) and not(has-children($feature/nz-core:quantitativeLikelihood)) and not(exists($feature/nz-core:quantitativeLikelihood/@nilReason))) then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'qualitativeLikelihood or quantitativeLikelihood roles must not be empty', 'additionalInfo':''})
			else ()
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementNaturalRiskZone"/>
										<translationTemplate ref="TR.wrongMultiplicitySpatialRepresentation"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EID1c6ce428-fbef-420f-a54d-68defa32c3ff">
					<label>domainSet Constraints</label>
					<description>Verify that the features provided in the dataset adhere to the constraints specified in the INSPIRE application schema.</description>
					<parent ref="EID1e2dd0b2-dbcd-404c-9f64-dfcd504f1303"/>
					<testSteps>
						<TestStep id="EID4571cd3b-09ba-4902-8321-5d402219b6f5">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID1c6ce428-fbef-420f-a54d-68defa32c3ff"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID1be760b5-0976-4999-bc89-865ea86ce933">
									<label>nz-as.c.1: domainSet</label>
									<description><![CDATA[Check that the domainSet shall be a rectified grid or referenceable grid and that The check is performed on all the different feature types that can be present in the dataset:<ul>
<li>ExposedElementCoverage</li>
<li>HazardCoverage</li>
<li>ObservedEventCoverage</li>
<li>RiskCoverage</li></ul>.<br/><br/>The element ReferenceableGrid is not available as subtype of the element domainSet, so only the RectifiedGrid element is checked.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/domainSet-constraint" target="_blank">Abstract Test Case 'domainSet Constraint'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf">INSPIRE Data Specification on Natural Risk Zones, A.4.2, (A.5.3.6.1)</a>]]></description>
									<parent ref="EID4571cd3b-09ba-4902-8321-5d402219b6f5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features_selected := $features[self::nz-core:ExposedElementCoverage|self::nz-core:HazardCoverage|self::nz-core:ObservedEventCoverage|self::nz-core:RiskCoverage]
let $messages :=
	for $feature in $features_selected
		for $f in $feature/gml:domainSet
		return
			if (count($f/gml:RectifiedGrid) = 0) then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'RectifiedGrid role must not be empty', 'additionalInfo':''})	
			else if (count($f/gml:RectifiedGrid) > 1) then
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation',  map {'filename': local:filename($feature), 'id': string($feature/@*:id), 'element':'gml:RectifiedGrid'}) 
			else ()
return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicitySpatialRepresentation"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>

				<TestCase id="EIDd72743c3-a819-4cc2-98ae-be2845e6177f">
					<label>rangeSet Constraints</label>
					<description>Verify that the features provided in the dataset adhere to the constraints specified in the INSPIRE application schema.</description>
					<parent ref="EID1e2dd0b2-dbcd-404c-9f64-dfcd504f1303"/>
					<testSteps>
						<TestStep id="EID20823e52-0ab9-4874-97e6-85f6dcb14102">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDd72743c3-a819-4cc2-98ae-be2845e6177f"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID43cf5f07-d750-4220-93d3-7d3866f4c496">
									<label>nz-as.d.1: rangeSet</label>
									<description><![CDATA[The following checks shall be performed for every feature in the dataset.<ul>
<li>ExposedElementCoverage: The rangeSet shall be the level, or intensity, of the vulnerability assessment.</li>
<li>HazardCoverage: The rangeSet shall be described by magnitude or intensity, or by the likelihood of occurence.</li>
<li>ObservedEventCoverage: The rangeSet shall be described by magnitude or intensity, or by the likelihood of occurence.</li>
<li>RiskCoverage: The rangeSet shall be described by level or intensity.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/rangeSet-constraint" target="_blank">Abstract Test Case 'rangeSet Constraint'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf">INSPIRE Data Specification on Natural Risk Zones, A.4.2, (A.5.3.6.1)</a>]]></description>
									<parent ref="EID20823e52-0ab9-4874-97e6-85f6dcb14102"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>NOT_APPLICABLE</expression>
									<testItemType ref="EIDb48eeaa3-6a74-414a-879c-1dc708017e11"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicitySpatialRepresentation"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>

				<TestCase id="EIDd3f70a5b-437b-4a95-9d35-44bb0ca02b51">
					<label>Risk zone theme-specific requirements</label>
					<description>Verify that the features provided in the dataset adhere to the theme-specific requirements specified in the INSPIRE application schema.</description>
					<parent ref="EID1e2dd0b2-dbcd-404c-9f64-dfcd504f1303"/>
					<testSteps>
						<TestStep id="EID59d0a1f0-b186-427c-b042-f72eaf1518bb">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDd3f70a5b-437b-4a95-9d35-44bb0ca02b51"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID19c62442-80d7-4dd3-9b6d-fe59e92a8f1e">
									<label>nz-as.e.1: RiskZone.source</label>
									<description><![CDATA[Check that if a RiskZone is associated with a HazardArea, the RiskZone and the HazardArea shall overlap.
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/riskZone-geometry" target="_blank">Abstract Test Case 'Risk zone theme-specific requirements'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf">INSPIRE Data Specification on Natural Risk Zones, A.4.2, (A.5.3.6.1)</a>]]></description>
									<parent ref="EID59d0a1f0-b186-427c-b042-f72eaf1518bb"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features_selected := $features[self::nz-core:RiskZone]
let $features_hazard := $features[self::nz-core:HazardArea]/@*:id
let $messages :=
	for $feature in $features_selected
		let $urls := 
			for $x in $feature/nz-core:source/@xlink:href
				return
					if (starts-with(string($x), '#')) then ()
					else string($x)					

		let $map := local:check-resource-uris($urls, 30, true())
		
		let $valid_urls := 
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then ()
					else $url
		
		let $invalid_urls := 
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then $url
					else ()
					
		let $ids := 
			for $x in $feature/nz-core:source/@xlink:href
				return
					if (starts-with(string($x), '#')) then string($x)
					else ()

		let $valid_ids :=
			for $x in $ids
				return
					if (starts-with(string($x), '#')) then
						if (not(substring(string($x), 2) = $features_hazard)) then ()
						else string($x)
					else ()
	
		let $invalid_ids :=
			for $x in $ids
				return
					if (starts-with(string($x), '#')) then
						if (not(substring(string($x), 2) = $features_hazard)) then string($x)
						else ()
					else ()

		return
			if (not(exists($feature/nz-core:source))) then
				local:addMessage('TR.missingElementNaturalRiskZone',  map {'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'property':'nz-core:source'}) 
			else if (count($feature/nz-core:source) != 1) then
				local:addMessage('TR.wrongMultiplicitySpatialRepresentation', map {'filename': local:filename($feature), 'id': string($feature/@*:id), 'element':'nz-core:source'}) 
			else if (count($invalid_ids) != 0 or count($invalid_urls) != 0) then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'RiskZone and the HazardArea shall overlap', 'additionalInfo':''})
			else if (count($valid_urls) != 0) then
				let $aaa := 'aaa'
					for $url in $valid_urls
						return local:addMessage('TR.manual.reviewConstraintOverlapUrlNaturalRisk', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': 'nz-core:source', 'value': $url, 'element':'HazardArea'}) 
			else if (count($valid_ids) != 0) then
				let $aaa := 'aaa'
					for $url in $valid_ids
						return local:addMessage('TR.manual.reviewConstraintOverlapIdNaturalRisk', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': 'nz-core:source', 'value': $url, 'element':'HazardArea'}) 
			else ()
return
(if ($messages and not($messages/@ref = ('TR.manual.reviewConstraintOverlapIdNaturalRisk')) and not($messages/@ref = ('TR.manual.reviewConstraintOverlapUrlNaturalRisk'))) then 'FAILED' 
else if($messages and ($messages/@ref = ('TR.manual.reviewConstraintOverlapIdNaturalRisk') or $messages/@ref = ('TR.manual.reviewConstraintOverlapUrlNaturalRisk'))) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementNaturalRiskZone"/>
										<translationTemplate ref="TR.wrongMultiplicitySpatialRepresentation"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDbef48ff1-837f-4b83-b2fe-873a2493588f">
									<label>nz-as.e.2: RiskZone.exposedElement</label>
									<description><![CDATA[Check that if a RiskZone is associated with an ExposedElement, the ExposedElement shall overlap with the RiskZone.
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-nz/master/nz-as/riskZone-geometry" target="_blank">Abstract Test Case 'Risk zone theme-specific requirements'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf">INSPIRE Data Specification on Natural Risk Zones, A.4.2, (A.5.3.6.1)</a>]]></description>
									<parent ref="EID59d0a1f0-b186-427c-b042-f72eaf1518bb"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features_selected := $features[self::nz-core:RiskZone]
let $features_exposed := $features[self::nz-core:ExposedElement]/@*:id
let $messages :=
	for $feature in $features_selected

		let $urls := 
			for $x in $feature/nz-core:exposedElement/@xlink:href
				return
					if (starts-with(string($x), '#')) then ()
					else string($x)						
					
		let $map := local:check-resource-uris($urls, 30, true())

		let $valid_urls := 
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then ()
					else $url

		let $invalid_urls := 
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then $url
					else ()
		let $ids := 
			for $x in $feature/nz-core:exposedElement/@xlink:href
				return
					if (starts-with(string($x), '#')) then string($x)
					else ()

		let $valid_ids :=
			for $x in $ids
				return
					if (starts-with(string($x), '#')) then
						if (not(substring(string($x), 2) = $features_exposed)) then ()
						else string($x)
					else ()

		let $invalid_ids :=
			for $x in $ids
				return
					if (starts-with(string($x), '#')) then
						if (not(substring(string($x), 2) = $features_exposed)) then string($x)
						else ()
					else ()

		return
			if (not(exists($features_selected/nz-core:exposedElement))) then
				local:addMessage('TR.missingElementNaturalRiskZone',  map {'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'property':'nz-core:exposedElement'}) 
			else if (count($invalid_urls) != 0 or count($invalid_ids) != 0) then
				local:addMessage('TR.constraintViolation', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@*:id), 'constraint': 'ExposedElement shall overlap with the RiskZone', 'additionalInfo':''})
			else if ((count($valid_urls) != 0) or (count($valid_ids) != 0)) then
				let $messageurl := for $url in $valid_urls
					return local:addMessage('TR.manual.reviewConstraintOverlapUrlNaturalRisk', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': 'nz-core:exposedElement', 'value': $url, 'element':'ExposedElement'}) 
				let $messageid := for $url in $valid_ids
					return local:addMessage('TR.manual.reviewConstraintOverlapIdNaturalRisk', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': 'nz-core:exposedElement', 'value': $url, 'element':'ExposedElement'})
				return ($messageurl, $messageid)
			else ()
return
(if ($messages and not($messages/@ref = ('TR.manual.reviewConstraintOverlapIdNaturalRisk')) and not($messages/@ref = ('TR.manual.reviewConstraintOverlapUrlNaturalRisk'))) then 'FAILED' 
else if($messages and ($messages/@ref = ('TR.manual.reviewConstraintOverlapIdNaturalRisk') or $messages/@ref = ('TR.manual.reviewConstraintOverlapUrlNaturalRisk'))) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementNaturalRiskZone"/>
										<translationTemplate ref="TR.wrongMultiplicitySpatialRepresentation"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>

			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
