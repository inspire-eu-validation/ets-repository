<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID01d98e39-6f16-4f8c-b776-6a2ce81efeba" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-br/br-as</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Application schema, Bio-geographical Regions</label>
	<description><![CDATA[This test suite examines requirements associated with the application schema.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/inspire-eu-validation/community/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-br/master/br-as" target="_blank">Conformance Class 'Application Schema, Bio-geographical Regions'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data-br/master/br-gml" target="_blank">Conformance Class 'GML application schemas, Bio-geographical Regions'</a></li></ul>]]></description>
	<reference>../../inspire-noggeo-bsxets.xq</reference>
	<version>0.1.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2021-01-27T15:30:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2021-01-27T15:30:00Z</lastUpdateDate>
	<tags>
		<tag ref="EIDb7bc5972-ca3a-4275-a9ba-c913d2b724a3"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EIDaa467ffe-2837-4e62-baba-09f9fcfd2600"/>
	</dependencies>
	<testModules>
		<TestModule id="EID83876681-e59e-40af-ae67-9683074bf03c">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EID01d98e39-6f16-4f8c-b776-6a2ce81efeba"/>
			<testCases>
				<TestCase id="EID19e63161-6474-48e2-9e03-ad8c7cf94567">
					<label>Code lists</label>
					<description>Verify whether all attributes whose value type is a code list take the values set out therein</description>
					<parent ref="EID83876681-e59e-40af-ae67-9683074bf03c"/>
					<testSteps>
						<TestStep id="EIDe1fad2bb-2250-4bab-ad76-1f1a2fde596e">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID19e63161-6474-48e2-9e03-ad8c7cf94567"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EIDef3375b3-bd50-44cf-bd4d-43844189bfd1">
									<label>br-as.a.1: regionClassificationLevel</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-br/master/br-as/code-list-values#regionClassificationLevel'>regionClassificationLevel</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-br/master/br-as/code-list-values#validValue1'>valid value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-br/master/br-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BR_v3.0.pdf">INSPIRE Data Specification on Bio-geographical Regions, A.1.3</a>]]></description>
									<parent ref="EIDe1fad2bb-2250-4bab-ad76-1f1a2fde596e"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/RegionClassificationLevelValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/RegionClassificationLevelValue/RegionClassificationLevelValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'RegionClassificationLevel'
let $features_selected := $features[self::br:Bio-geographicalRegion]

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/br:regionClassificationLevel

		return
			if (exists($feature) and not(exists($envDom))) then
				local:addMessage('TR.missingElementBioReg',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBioReg',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBioReg',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBioReg"/>
										<translationTemplate ref="TR.wrongMultiplicityBioReg"/>
										<translationTemplate ref="TR.disallowedCodeListBioReg"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID9f8c3223-af1a-4afe-b5a7-608eb354c0df">
									<label>br-as.a.2: regionClassification</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-br/master/br-as/code-list-values#regionClassification'>regionClassification</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-br/master/br-as/code-list-values#validValue2'>pre-defined value</a>.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-br/master/br-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BR_v3.0.pdf">INSPIRE Data Specification on Bio-geographical Regions, A.1.3</a>]]></description>
									<parent ref="EIDe1fad2bb-2250-4bab-ad76-1f1a2fde596e"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/RegionClassificationValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/RegionClassificationValue/RegionClassificationValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'RegionClassification'
let $features_selected := $features[self::br:Bio-geographicalRegion]
let $list := $features_selected/br:regionClassification/@xlink:href

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/br:regionClassification

		let $iterlist:= for $elem in $list
				return if ($elem = $envDom/@xlink:href)
					then $elem
					else ()

		return
			if (exists($feature) and not(exists($envDom))) then
				local:addMessage('TR.missingElementBioReg',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBioReg',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($feature) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBioReg',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
					local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'count': count($iterlist)-1 })
			else ()


return
	(if ($messages and not($messages/@ref = ('TR.manual.reviewCodeListValue'))) then 'FAILED' 
	else if($messages/@ref = ('TR.manual.reviewCodeListValue') and not($messages/@ref != ('TR.manual.reviewCodeListValue'))) then 'PASSED_MANUAL' 
	else if($messages and $messages/@ref != ('TR.manual.reviewCodeListValue')) then 'FAILED' 
	else 'PASSED',
	local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
	$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBioReg"/>
										<translationTemplate ref="TR.wrongMultiplicityBioReg"/>
										<translationTemplate ref="TR.missingAttributeBioReg"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>