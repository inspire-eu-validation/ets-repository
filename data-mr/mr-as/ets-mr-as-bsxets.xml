<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EIDda904b41-b762-4aca-8af4-204f427ba3e8" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-mr/mr-as</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Application schema, Mineral Resources</label>
	<description><![CDATA[This test suite examines requirements associated with the application schema.<br/><br/>
Note that since both code-list-valued properties of this application schema may be extended without restrictions, there is no test case for code list values.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/INSPIRE-MIF/helpdesk-validator/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as" target="_blank">Conformance Class 'Application schema, Mineral Resources'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-gml" target="_blank">Conformance Class 'GML application schemas, Mineral Resources'</a></li></ul>]]></description>
	<reference>../../inspire-noggeo-bsxets.xq</reference>
	<version>0.1.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2021-05-13T09:40:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2021-05-13T09:40:00Z</lastUpdateDate>
	<tags>
		<tag ref="EIDcf365ad1-38b9-4c3e-86ac-d75b1eccf97f"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID1b45ee05-c7f1-471c-89a4-5e603ce3f056"/>
	</dependencies>
	<testModules>
		<TestModule id="EID9a262a9b-d213-4acc-b467-470b49d4553b">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EIDda904b41-b762-4aca-8af4-204f427ba3e8"/>
			<testCases>
				<TestCase id="EIDdb310ddf-ada9-4083-9fd0-246bc0756d73">
					<label>Code list values</label>
					<description>Verify whether all attributes whose value type is a code list take the values set out therein.</description>
					<parent ref="EID9a262a9b-d213-4acc-b467-470b49d4553b"/>
					<testSteps>
						<TestStep id="EIDb39bb34b-ea16-4227-9af8-41209dfec66c">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDdb310ddf-ada9-4083-9fd0-246bc0756d73"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID05100efe-19d1-47b4-8953-df6087619516">
									<label>mr-as.a.1: classificationMethodUsed</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#classificationMethodUsed">classificationMethodUsed</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue1">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ClassificationMethodUsedValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ClassificationMethodUsedValue/ClassificationMethodUsedValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'classificationMethodUsed'
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]


let $list1 := $features_selected_mo/mr-core:oreAmount/mr-core:Endowment/mr-core:classificationMethodUsed/@xlink:href
let $list2 := $features_selected_mo/mr-core:oreAmount/mr-core:Reserve/mr-core:classificationMethodUsed/@xlink:href
let $list3 := $features_selected_mo/mr-core:oreAmount/mr-core:Resource/mr-core:classificationMethodUsed/@xlink:href
let $list4 := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:oreAmount/mr-core:Endowment/mr-core:classificationMethodUsed/@xlink:href
let $list5 := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:oreAmount/mr-core:Reserve/mr-core:classificationMethodUsed/@xlink:href
let $list6 := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:oreAmount/mr-core:Resource/mr-core:classificationMethodUsed/@xlink:href


let $list := ($list1, $list2, $list3, $list4, $list5, $list6)
let $messages_mo := 

	for $feature_o in $features_selected_mo/mr-core:oreAmount
		let $messages_en := 
			for $feature in $feature_o/mr-core:Endowment
				let $envDom := $feature/mr-core:classificationMethodUsed

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
							else()
					)
		let $messages_rese := 
			for $feature in $feature_o/mr-core:Reserve
				let $envDom := $feature/mr-core:classificationMethodUsed

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
								else()
					)
		let $messages_reso := 
			for $feature in $feature_o/mr-core:Resource
				let $envDom := $feature/mr-core:classificationMethodUsed

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
							else()
					)
		return($messages_en, $messages_rese, $messages_reso)


let $messages_mf :=
	for $feature_mf in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:oreAmount
		let $messages_en := 
			for $feature in $feature_mf/mr-core:Endowment
				let $envDom := $feature/mr-core:classificationMethodUsed

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
							else()
					)
		let $messages_rese := 
			for $feature in $feature_mf/mr-core:Reserve
				let $envDom := $feature/mr-core:classificationMethodUsed

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
							else()
					)
		let $messages_reso := 
			for $feature in $feature_mf/mr-core:Resource
				let $envDom := $feature/mr-core:classificationMethodUsed

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
							else()
						)
		return ($messages_en, $messages_rese, $messages_reso)

let $messages := ($messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDd22cfed8-ed04-4ca0-8aa6-5f204ff9055e">
									<label>mr-as.a.2: endusePotential</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#endusePotential">endusePotential</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue2">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/EndusePotentialValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/EndusePotentialValue/EndusePotentialValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'endusePotential'
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]

let $list_mo := $features_selected_mo/mr-core:endusePotential/@xlink:href 
let $list_mf := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:endusePotential/@xlink:href

let $list := ($list_mo, $list_mf)
let $messages_mo := 

	for $feature in $features_selected_mo
		let $envDom := $feature/mr-core:endusePotential

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)


let $messages_mf :=
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence
		let $envDom := $feature/mr-core:endusePotential

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages := ($messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDc20049d4-ec9e-499e-aea4-e5a7faf81939">
									<label>mr-as.a.3: activityType (ExplorationActivity FT)</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#activityTypeEA">activityType</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue3">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ExplorationActivityTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ExplorationActivityTypeValue/ExplorationActivityTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'activityType (ExplorationActivity FT)'
let $features_selected_ea := $features[self::mr-core:ExplorationActivity]
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]


let $list_ea := $features_selected_ea/mr-core:activityType/@xlink:href 
let $list_mo := $features_selected_mo/mr-core:explorationHistory/mr-core:ExplorationActivity/mr-core:activityType/@xlink:href
let $list_mf := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:explorationHistory/mr-core:ExplorationActivity/mr-core:activityType/@xlink:href


let $list := ($list_ea, $list_mo, $list_mf)


let $messages_ea :=
	for $feature in $features_selected_ea
		let $envDom := $feature/mr-core:activityType

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.manual.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages_mo := 
	for $feature in $features_selected_mo/mr-core:explorationHistory/mr-core:ExplorationActivity
	let $envDom := $feature/mr-core:activityType

	return
		if(not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
		else if (not(count($envDom) = count($envDom/@xlink:href))) then
			local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
		else (
			for $link in $envDom/@xlink:href
				let $iterlist:= for $elem in $list
					return if ($elem = $link)
						then $elem
						else ()
				return if (not($link = $valid_href)) then (
					local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
				)
				else()
		)


let $messages_mf :=
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:explorationHistory/mr-core:ExplorationActivity
		let $envDom := $feature/mr-core:activityType

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages := ($messages_ea, $messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDdea31829-25ee-470f-9044-f1a366b94720">
									<label>mr-as.a.4: explorationResult</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#explorationResult">explorationResult</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue4">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ExplorationResultValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ExplorationResultValue/ExplorationResultValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'explorationResult'
let $features_selected_ea := $features[self::mr-core:ExplorationActivity]
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]


let $list_ea := $features_selected_ea/mr-core:explorationResult/@xlink:href 
let $list_mo := $features_selected_mo/mr-core:explorationHistory/mr-core:ExplorationActivity/mr-core:explorationResult/@xlink:href
let $list_mf := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:explorationHistory/mr-core:ExplorationActivity/mr-core:explorationResult/@xlink:href


let $list := ($list_ea, $list_mo, $list_mf)


let $messages_ea :=

	for $feature in $features_selected_ea
		let $envDom := $feature/mr-core:explorationResult

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages_mo := 

	for $feature in $features_selected_mo/mr-core:explorationHistory/mr-core:ExplorationActivity
	let $envDom := $feature/mr-core:explorationResult

	return
		if(not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
		else if (not(count($envDom) = count($envDom/@xlink:href))) then
			local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
		else (
			for $link in $envDom/@xlink:href
				let $iterlist:= for $elem in $list
					return if ($elem = $link)
						then $elem
						else ()
				return if (not($link = $valid_href)) then (
					local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
				)
				else()
		)


let $messages_mf :=
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:explorationHistory/mr-core:ExplorationActivity
		let $envDom := $feature/mr-core:explorationResult

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages := ($messages_ea, $messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID974b9814-d4c8-40a5-a96a-23b8acc58fba">
									<label>mr-as.a.5: status</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#status">status</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue5">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/MineStatusValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/MineStatusValue/MineStatusValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'status'
let $features_selected_mi := $features[self::mr-core:Mine]
let $features_selected_mfo := $features[self::mr-core:MiningFeatureOccurrence]

let $list_mi := $features_selected_mi/mr-core:status/@xlink:href
let $list_mfo := $features_selected_mfo/mr-core:specification/mr-core:Mine/mr-core:status/@xlink:href


let $list := ($list_mi, $list_mfo)


let $messages_mi :=

	for $feature in $features_selected_mi
		let $envDom := $feature/mr-core:status

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages_mfo := 

	for $feature in $features_selected_mfo/mr-core:specification/mr-core:Mine
	let $envDom := $feature/mr-core:status

	return
		if(not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
		else if (not(count($envDom) = count($envDom/@xlink:href))) then
			local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
		else (
			for $link in $envDom/@xlink:href
				let $iterlist:= for $elem in $list
					return if ($elem = $link)
						then $elem
						else ()
				return if (not($link = $valid_href)) then (
					local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
				)
				else()
		)

let $messages := ($messages_mi, $messages_mfo)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID56917e3e-7b23-4e86-ad42-888610e6ed0a">
									<label>mr-as.a.6: mineralDepositGroup</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#mineralDepositGroup">mineralDepositGroup</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue6">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/MineralDepositGroupValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/MineralDepositGroupValue/MineralDepositGroupValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'mineralDepositGroup'
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]


let $list_mo := $features_selected_mo/mr-core:classification/mr-core:MineralDepositModel/mr-core:mineralDepositGroup/@xlink:href
let $list_mf := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:classification/mr-core:MineralDepositModel/mr-core:mineralDepositGroup/@xlink:href


let $list := ($list_mo, $list_mf)

let $messages_mo := 

	for $feature in $features_selected_mo/mr-core:classification/mr-core:MineralDepositModel
	let $envDom := $feature/mr-core:mineralDepositGroup

	return
		if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
		else if (not(count($envDom) = count($envDom/@xlink:href))) then
			local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
		else (
			for $link in $envDom/@xlink:href
				let $iterlist:= for $elem in $list
					return if ($elem = $link)
						then $elem
						else ()
				return if (not($link = $valid_href)) then (
					local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
				)
				else()
		)


let $messages_mf :=
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:classification/mr-core:MineralDepositModel
		let $envDom := $feature/mr-core:mineralDepositGroup

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages := ($messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID6bd5401a-1d5f-465f-babe-1b56d4f326dc">
									<label>mr-as.a.7: type</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#type">type</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue7">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/MineralOccurrenceTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/MineralOccurrenceTypeValue/MineralOccurrenceTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'type'
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]


let $list_mo := $features_selected_mo/mr-core:type/@xlink:href 
let $list_mf := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:type/@xlink:href


let $list := ($list_mo, $list_mf)


let $messages_mo :=

	for $feature in $features_selected_mo
		let $envDom := $feature/mr-core:type

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages_mf := 

	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence
		let $envDom := $feature/mr-core:type

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
		)



let $messages := ($messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID2f01edd5-674c-4f66-8961-5019b12c4f3d">
									<label>mr-as.a.8: activityType (MiningActivity FT)</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#activityTypeMA">activityType</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue8">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/MiningActivityTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/MiningActivityTypeValue/MiningActivityTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'activityType (MiningActivity FT)'
let $features_selected_ma := $features[self::mr-core:MiningActivity]
let $features_selected_mfo := $features[self::mr-core:MiningFeatureOccurrence]
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]


let $list1 := $features_selected_ma/mr-core:activityType/@xlink:href 
let $list2 := $features_selected_mfo/mr-core:specification/mr-core:Mine/mr-core:relatedActivity/mr-core:MiningActivity/mr-core:activityType/@xlink:href
let $list3 := $features_selected_mfo/mr-core:specification/mr-core:MiningActivity/mr-core:activityType/@xlink:href
let $list4 := $features_selected_mo/mr-core:resourceExtraction/mr-core:MiningActivity/mr-core:activityType/@xlink:href
let $list5 := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:resourceExtraction/mr-core:MiningActivity/mr-core:activityType/@xlink:href


let $list := ($list1, $list2, $list3, $list4, $list5)


let $messages_ma := 
	for $feature in $features_selected_ma
		let $envDom := $feature/mr-core:activityType

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)


let $messages_mfo := 


	for $feature_mfo in $features_selected_mfo/mr-core:specification
		let $messages_mi := 
			for $feature in $feature_mfo/mr-core:Mine/mr-core:relatedActivity/mr-core:MiningActivity
				let $envDom := $feature/mr-core:activityType

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
							else()
					)
		let $messages_ma := 
			for $feature in $feature_mfo/mr-core:MiningActivity
				let $envDom := $feature/mr-core:activityType

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
							else()
					)
		return($messages_mi, $messages_ma)


let $messages_mo := 


	for $feature in $features_selected_mo/mr-core:resourceExtraction/mr-core:MiningActivity
		let $envDom := $feature/mr-core:activityType

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)


let $messages_mf :=
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:resourceExtraction/mr-core:MiningActivity
		let $envDom := $feature/mr-core:activityType

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages := ($messages_ma, $messages_mfo, $messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID114ab2da-9fb1-4d08-a260-972808a97616">
									<label>mr-as.a.9: processingType</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#processingType">processingType</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue9">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ProcessingActivityTypeValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ProcessingActivityTypeValue/ProcessingActivityTypeValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'ProcessingActivityType'
let $features_selected_ma := $features[self::mr-core:MiningActivity]
let $features_selected_mfo := $features[self::mr-core:MiningFeatureOccurrence]
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]


let $list1 := $features_selected_ma/mr-core:processingType/@xlink:href 
let $list2 := $features_selected_mfo/mr-core:specification/mr-core:Mine/mr-core:relatedActivity/mr-core:MiningActivity/mr-core:processingType/@xlink:href
let $list3 := $features_selected_mfo/mr-core:specification/mr-core:MiningActivity/mr-core:processingType/@xlink:href
let $list4 := $features_selected_mo/mr-core:resourceExtraction/mr-core:MiningActivity/mr-core:processingType/@xlink:href
let $list5 := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:resourceExtraction/mr-core:MiningActivity/mr-core:processingType/@xlink:href


let $list := ($list1, $list2, $list3, $list4, $list5)


let $messages_ma := 
	for $feature in $features_selected_ma
		let $envDom := $feature/mr-core:processingType

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)


let $messages_mfo := 


	for $feature_mfo in $features_selected_mfo/mr-core:specification
		let $messages_mi := 
			for $feature in $feature_mfo/mr-core:Mine/mr-core:relatedActivity/mr-core:MiningActivity
				let $envDom := $feature/mr-core:processingType

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
							else()
					)
		let $messages_ma := 
			for $feature in $feature_mfo/mr-core:MiningActivity
				let $envDom := $feature/mr-core:processingType

				return
					if(not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
					else if (count($envDom) > 1) then 
						local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
					else if (not(count($envDom) = count($envDom/@xlink:href))) then
						local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
					else (
						for $link in $envDom/@xlink:href
							let $iterlist:= for $elem in $list
								return if ($elem = $link)
									then $elem
									else ()
							return if (not($link = $valid_href)) then (
								local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
							)
							else()
					)
		return($messages_mi, $messages_ma)


let $messages_mo := 


	for $feature in $features_selected_mo/mr-core:resourceExtraction/mr-core:MiningActivity
		let $envDom := $feature/mr-core:processingType

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)


let $messages_mf :=
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:resourceExtraction/mr-core:MiningActivity
		let $envDom := $feature/mr-core:processingType

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages := ($messages_ma, $messages_mfo, $messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDb7f49c64-3a63-4a71-8ca4-e63d4bc61790">
									<label>mr-as.a.10: category (Reserve data type)</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#classificationMethodRsv">category</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue10">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ReserveCategoryValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ReserveCategoryValue/ReserveCategoryValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'category (Reserve data type)'
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]


let $list_mo := $features_selected_mo/mr-core:oreAmount/mr-core:Reserve/mr-core:category/@xlink:href
let $list_mf := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:oreAmount/mr-core:Reserve/mr-core:category/@xlink:href


let $list := ($list_mo, $list_mf)
let $messages_mo := 


	for $feature in $features_selected_mo/mr-core:oreAmount/mr-core:Reserve
		let $envDom := $feature/mr-core:category

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages_mf :=
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:oreAmount/mr-core:Reserve
		let $envDom := $feature/mr-core:category

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages := ($messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDfdea62cf-fccc-4c44-87a6-8034388e32c1">
									<label>mr-as.a.11: category (Resource data type)</label>
									<description><![CDATA[Check that all the <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#classificationMethodRsc">category</a> elements has a xlink:href attribute pointing to a <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values#preDefinedValue11">pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid
down in Article 4 of Directive 2007/2/EC, Member States shall use the spatial object types and
associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the
themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data
types shall comply with the definitions and include the values set out in Annex II. The enumeration and
code list values are uniquely identified by language-neutral mnemonic codes for computers. The values
may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Codelists shall be of one of the following types, as specified in the Annexes:
<ol>
<li>code lists whose allowed values comprise only the values specified in this Regulation;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and narrower values defined by data providers;</li>
<li>code lists whose allowed values comprise the values specified in this Regulation and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>
For the purposes of points 2, 3 and 4, in addition to the allowed values, data providers may use the values specified in the relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value. Where the valid values of a hierarchical code list are specified in a table in this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where, for an attribute whose type is a code list as referred to in points 2, 3 or 4 of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.3, A.6.1</a>]]></description>
									<parent ref="EIDb39bb34b-ea16-4227-9af8-41209dfec66c"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ResourceCategoryValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ResourceCategoryValue/ResourceCategoryValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'category (Resource data type)'
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]


let $list_mo := $features_selected_mo/mr-core:oreAmount/mr-core:Resource/mr-core:category/@xlink:href
let $list_mf := $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:oreAmount/mr-core:Resource/mr-core:category/@xlink:href


let $list := ($list_mo, $list_mf)
let $messages_mo := 


	for $feature in $features_selected_mo/mr-core:oreAmount/mr-core:Resource
		let $envDom := $feature/mr-core:category

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages_mf :=
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:oreAmount/mr-core:Resource
		let $envDom := $feature/mr-core:category

		return
			if(not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else (
				for $link in $envDom/@xlink:href
					let $iterlist:= for $elem in $list
						return if ($elem = $link)
							then $elem
							else ()
					return if (not($link = $valid_href)) then (
						local:addMessage('TR.reviewCodeListValue', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($link, ','), 'count':  count($iterlist)-1})
					)
					else()
			)

let $messages := ($messages_mo, $messages_mf)

return
(if ($messages and ($messages/@ref = ('TR.missingElement','TR.wrongMultiplicity','TR.missingAttribute'))) then 'FAILED' 
else if($messages and $messages/@ref = ('TR.reviewCodeListValue')) then 'PASSED_MANUAL' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EID01b77339-1317-4fca-86c9-924c7a3ee484">
					<label>Specific requirements</label>
					<description>Verify that the following specific requirements are meet.</description>
					<parent ref="EID8105de22-3c7d-46fa-93c1-db50e2ad8de4"/>
					<testSteps>
						<TestStep id="EIDaef4e005-d48d-449f-9069-90687d5feb2d">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID01b77339-1317-4fca-86c9-924c7a3ee484"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EIDe1e8e05a-55fc-4331-b3b4-0c32f1b6241c">
									<label>mr-as.b.1: specification</label>
									<description>
										<![CDATA[Check whether all instances of MineralOccurrence spatial object type use for providing geometric properties the attribute Shape (GM_Object) defined by MappedFeature spatial object type (in Geology Data Specification).<br/><br/>
										Relevant requirements:
										<ul><li>IR Requirement Annex IV, Section 20.4: The type MappedFeature specified in Section 4.2.1.10 of Annex III shall be used to describe the geometric properties of MineralOccurrence spatial objects.</li></ul>
										Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-as/specific-req" target="_blank">Abstract Test Case 'Specific requirement', <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.8</a>]]></description>
									<parent ref="EIDaef4e005-d48d-449f-9069-90687d5feb2d"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $property_string := 'specification'
let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]
let $links := for $link in $features_selected_mf/ge:specification/@xlink:href
			return 
				if (starts-with($link, '#')) then
					substring($link,2)
				else ()

let $messages :=
	for $feature in $features_selected_mo
		let $envDom := $feature/@gml:id

		return
			if(not($envDom = $links)) then
				local:addMessage('TR.missingGeometry',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id)})
			else (
			)


return
(if ($messages) then 'FAILED' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingGeometry"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
