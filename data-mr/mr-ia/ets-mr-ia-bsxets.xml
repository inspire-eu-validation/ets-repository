<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID0ac8bdce-710a-4287-92ca-6444cbbb2263" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-mr/mr-ia</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Information accessibility, Mineral Resources</label>
	<description><![CDATA[This test suite examines a data set against the themespecific requirements related to the accessibility of resources referenced by the data.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/INSPIRE-MIF/helpdesk-validator/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia" target="_blank">Conformance Class 'Information accessibility, Mineral Resources'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data/master/information-accessibility" target="_blank">Conformance Class 'Information accessibility'</a></li>
</ul>]]></description>
	<reference>../../inspire-noggeo-bsxets.xq</reference>
	<version>0.1.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2021-05-13T13:00:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2021-05-13T13:00:00Z</lastUpdateDate>
	<tags>
		<tag ref="EIDcf365ad1-38b9-4c3e-86ac-d75b1eccf97f"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID499937ea-0590-42d2-bd7a-1cafff35ecdb"/>
	</dependencies>
	<testModules>
		<TestModule id="EID82f55df6-6730-4e18-a1b6-ad100aa08f2c">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EID0ac8bdce-710a-4287-92ca-6444cbbb2263"/>
			<testCases>
				<TestCase id="EID489fcb53-15b6-4703-93b1-94ddce73c386">
					<label>Code lists</label>
					<description>Verify that code lists extensions can be accessed.</description>
					<parent ref="EID82f55df6-6730-4e18-a1b6-ad100aa08f2c"/>
					<testSteps>
						<TestStep id="EID89b4bcc2-3215-4052-b3e8-1b438e00dee7">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID489fcb53-15b6-4703-93b1-94ddce73c386"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID7a2e8a9a-2575-4b14-b27a-4382160d045c">
									<label>mr-ia.a.1: CommodityCodeValue</label>
									<description><![CDATA[Verify that any code list extensions are publicly accessible via HTTP, i.e. inspect extensible code list valued property elements. If a reference (@xlink:href) has a value that does not start with http://inspire.ec.europa.eu/codelist/, verify that a HTTP GET request to the URI retrieves a document. <br/><br/>
Relevant requirements:
<ul><li>IR Requirement Article 6 (3): Code Lists and Enumerations. Where, for an attribute whose type is a code list as referred to in points (b), (c) or (d) of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/code-list" target="_blank">Abstract Test Case 'Code lists'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.5.1</a>]]></description>
									<parent ref="EID89b4bcc2-3215-4052-b3e8-1b438e00dee7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features_selected_co := $features[ self::mr-core:Commodity ]
let $features_selected_mo := $features[ self::mr-core:MineralOccurrence ]
let $features_selected_mf := $features[ self::ge:MappedFeature ]
let $property_string := 'CommodityCodeValue'
let $messages_co := 

	for $feature in $features_selected_co
		let $envDom := $feature/mr-core:commodity
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()

	return
		if (not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
		else if (not(count($envDom) = count($envDom/@xlink:href))) then
			local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id),'attribute':'@xlink:href', 'property': $property_string})
		else if (count($invalid_urls) > 0) then
			local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')}) 
		else ()

let $messages_mo := 

	for $feature in $features_selected_mo/mr-core:commodityDescription/mr-core:Commodity
		let $envDom := $feature/mr-core:commodity
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()

	return
		if (not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
		else if (not(count($envDom) = count($envDom/@xlink:href))) then
			local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id),'attribute':'@xlink:href', 'property': $property_string})
		else if (count($invalid_urls) > 0) then
			local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')}) 
		else ()


let $messages_mf := 

	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:commodityDescription/mr-core:Commodity
		let $envDom := $feature/mr-core:commodity
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()

	return
		if (not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string}) 
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
		else if (not(count($envDom) = count($envDom/@xlink:href))) then
			local:addMessage('TR.missingAttribute',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id),'attribute':'@xlink:href', 'property': $property_string})
		else if (count($invalid_urls) > 0) then
			local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')}) 
		else ()

let $messages := ($messages_co, $messages_mo, $messages_mf)

return 
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.missingAttribute"/>
										<translationTemplate ref="TR.brokenLink"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID4397804e-a998-48e7-a158-ba1587012b10">
									<label>mr-ia.a.2: ImportanceValue</label>
									<description><![CDATA[Verify that any code list extensions are publicly accessible via HTTP, i.e. inspect extensible code list valued property elements. If a reference (@xlink:href) has a value that does not start with http://inspire.ec.europa.eu/codelist/, verify that a HTTP GET request to the URI retrieves a document. <br/><br/>
Relevant requirements:
<ul><li>IR Requirement Article 6 (3): Code Lists and Enumerations. Where, for an attribute whose type is a code list as referred to in points (b), (c) or (d) of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/code-list" target="_blank">Abstract Test Case 'Code lists'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.5.1</a>]]></description>
									<parent ref="EID89b4bcc2-3215-4052-b3e8-1b438e00dee7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features_selected_co := $features[ self::mr-core:Commodity ]
let $features_selected_mo := $features[ self::mr-core:MineralOccurrence ]
let $features_selected_mf := $features[ self::ge:MappedFeature ]
let $property_string := 'ImportanceValue'
let $messages_co := 

	for $feature in $features_selected_co
		let $envDom := $feature/mr-core:commodityImportance
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()

	return
		if (not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
		else if (count($invalid_urls) > 0) then
			local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')}) 
		else ()

let $messages_mo := 

	for $feature in $features_selected_mo/mr-core:commodityDescription/mr-core:Commodity
		let $envDom := $feature/mr-core:commodityImportance
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()

	return
		if (not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
		else if (count($invalid_urls) > 0) then
			local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')}) 
		else ()


let $messages_mf := 

	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:commodityDescription/mr-core:Commodity
		let $envDom := $feature/mr-core:commodityImportance
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()

	return
		if (not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string}) 
		else if (count($envDom) > 1) then 
			local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
		else if (count($invalid_urls) > 0) then
			local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')}) 
		else ()

let $messages := ($messages_co, $messages_mo, $messages_mf)

return 
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.brokenLink"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID56305900-2b3b-4ef4-b2c4-ff353daac4a2">
									<label>mr-ia.a.3: MineralDepositTypeValue</label>
									<description><![CDATA[Verify that any code list extensions are publicly accessible via HTTP, i.e. inspect extensible code list valued property elements. If a reference (@xlink:href) has a value that does not start with http://inspire.ec.europa.eu/codelist/, verify that a HTTP GET request to the URI retrieves a document. <br/><br/>
Relevant requirements:
<ul><li>IR Requirement Article 6 (3): Code Lists and Enumerations. Where, for an attribute whose type is a code list as referred to in points (b), (c) or (d) of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/code-list" target="_blank">Abstract Test Case 'Code lists'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.5.1</a>]]></description>
									<parent ref="EID89b4bcc2-3215-4052-b3e8-1b438e00dee7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $features_selected_mo := $features[ self::mr-core:MineralOccurrence ]
let $features_selected_mf := $features[ self::ge:MappedFeature ]
let $property_string := 'MineralDepositTypeValue'

let $messages_mo := 

	for $feature in $features_selected_mo/mr-core:classification/mr-core:MineralDepositModel
		let $envDom := $feature/mr-core:mineralDepositType
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()

	return
		if (not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
		else if (count($invalid_urls) > 0) then
			local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')}) 
		else ()


let $messages_mf := 

	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:classification/mr-core:MineralDepositModel
		let $envDom := $feature/mr-core:mineralDepositType
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, 'http://inspire.ec.europa.eu/codelist/')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()

	return
		if (not(exists($envDom))) then
			local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string}) 
		else if (count($invalid_urls) > 0) then
			local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')}) 
		else ()

let $messages := ($messages_mo, $messages_mf)

return 
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.brokenLink"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EIDad9e5bf2-14cc-4f6e-8b86-002a13f04610">
					<label>Feature references</label>
					<description>Verify that referenced features can be retrieved.</description>
					<parent ref="EID82f55df6-6730-4e18-a1b6-ad100aa08f2c"/>
					<testSteps>
						<TestStep id="EID86c1cc97-45e9-4994-a645-b625573e358a">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDad9e5bf2-14cc-4f6e-8b86-002a13f04610"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID27c95b42-e90c-4abc-acda-044571edc8e0">
									<label>mr-ia.b.1: explorationHistory</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]
let $gml_ids := $features//@gml:id
let $property_string := 'explorationHistory'
let $messages_mo :=			
	for $feature in $features_selected_mo

		let $envDom := $feature/mr-core:explorationHistory
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()


let $messages_mf :=			
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence

		let $envDom := $feature/mr-core:explorationHistory
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()

let $messages:= ($messages_mo, $messages_mf)

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID61c74cda-e40d-4dfe-9146-3efe71f072bb">
									<label>mr-ia.b.2: classification</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]
let $gml_ids := $features//@gml:id
let $property_string := 'classification'
let $messages_mo :=			
	for $feature in $features_selected_mo

		let $envDom := $feature/mr-core:classification
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()


let $messages_mf :=			
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence

		let $envDom := $feature/mr-core:classification
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()

let $messages:= ($messages_mo, $messages_mf)

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDcfdb4e05-0b94-4007-8e0e-a8d968b332ba">
									<label>mr-ia.b.3: resourceExtraction</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]
let $gml_ids := $features//@gml:id
let $property_string := 'resourceExtraction'
let $messages_mo :=			
	for $feature in $features_selected_mo

		let $envDom := $feature/mr-core:resourceExtraction
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()


let $messages_mf :=			
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence

		let $envDom := $feature/mr-core:resourceExtraction
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()

let $messages:= ($messages_mo, $messages_mf)

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID8163fa76-ac34-4c1f-8555-9a182a2a50f4">
									<label>mr-ia.b.4: commodityDescription</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf := $features[self::ge:MappedFeature]
let $gml_ids := $features//@gml:id
let $property_string := 'commodityDescription'
let $messages_mo :=			
	for $feature in $features_selected_mo

		let $envDom := $feature/mr-core:commodityDescription
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()


let $messages_mf :=			
	for $feature in $features_selected_mf/ge:specification/mr-core:MineralOccurrence

		let $envDom := $feature/mr-core:commodityDescription
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()

let $messages:= ($messages_mo, $messages_mf)

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID2835e5f5-0d7d-4602-ae9d-b1b3a82046c8">
									<label>mr-ia.b.5: source</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected := $features[self::mr-core:Commodity]
let $gml_ids := $features//@gml:id
let $property_string := 'source'
let $messages :=			
	for $feature in $features_selected

		let $envDom := $feature/mr-core:source
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()



return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID4cd7d324-d4a9-45ff-b1bb-a525709792fe">
									<label>mr-ia.b.6: specification</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected := $features[self::mr-core:MiningFeatureOccurrence]
let $gml_ids := $features//@gml:id
let $property_string := 'specification'
let $messages :=			
	for $feature in $features_selected

		let $envDom := $feature/mr-core:specification
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()



return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID3ffe53b1-a885-40f2-8c1d-66b80a6c72d5">
									<label>mr-ia.b.7: relatedMine</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected_mi := $features[self::mr-core:Mine]
let $features_selected_mfo:= $features[self::mr-core:MiningFeatureOccurrence]
let $gml_ids := $features//@gml:id
let $property_string := 'relatedMine'
let $messages_mi :=			
	for $feature in $features_selected_mi

		let $envDom := $feature/mr-core:relatedMine
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()


let $messages_mfo :=			
	for $feature in $features_selected_mfo/mr-core:specification/mr-core:Mine

		let $envDom := $feature/mr-core:relatedMine
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()

let $messages:= ($messages_mi, $messages_mfo)

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDd5742595-70a7-4ae3-a778-e18d476373e3">
									<label>mr-ia.b.8: relatedActivity</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected_mi := $features[self::mr-core:Mine]
let $features_selected_mfo:= $features[self::mr-core:MiningFeatureOccurrence]
let $gml_ids := $features//@gml:id
let $property_string := 'relatedActivity'
let $messages_mi :=			
	for $feature in $features_selected_mi

		let $envDom := $feature/mr-core:relatedActivity
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()


let $messages_mfo :=			
	for $feature in $features_selected_mfo/mr-core:specification/mr-core:Mine

		let $envDom := $feature/mr-core:relatedActivity
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()

let $messages:= ($messages_mi, $messages_mfo)

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID54151ba6-9b03-4abb-9736-b647edff9264">
									<label>mr-ia.b.9: associatedMine</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected_ma := $features[self::mr-core:MiningActivity]
let $features_selected_mfo:= $features[self::mr-core:MiningFeatureOccurrence]
let $gml_ids := $features//@gml:id
let $property_string := 'associatedMine'
let $messages_ma :=			
	for $feature in $features_selected_ma

		let $envDom := $feature/mr-core:associatedMine
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()


let $messages_mfo :=			
	for $feature in $features_selected_mfo/mr-core:specification/mr-core:MiningActivity

		let $envDom := $feature/mr-core:associatedMine
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()

let $messages:= ($messages_ma, $messages_mfo)

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDf447b997-3a16-4884-9850-56ab5f509fe6">
									<label>mr-ia.b.10: deposit</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected_ma := $features[self::mr-core:MiningActivity]
let $features_selected_mfo:= $features[self::mr-core:MiningFeatureOccurrence]
let $gml_ids := $features//@gml:id
let $property_string := 'deposit'
let $messages_ma :=			
	for $feature in $features_selected_ma

		let $envDom := $feature/mr-core:deposit
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()


let $messages_mfo :=			
	for $feature in $features_selected_mfo/mr-core:specification/mr-core:MiningActivity

		let $envDom := $feature/mr-core:deposit
		let $urls := 
			for $x in $envDom/@xlink:href
				return
				if (starts-with($x, '#')) then
					()
				else
					$x
		let $map := local:check-resource-uris($urls, 30, true())
		let $invalid_urls :=
			for $href in $urls
				let $url := string($href)
				let $validuri := map:get($map, $url)
				return
					if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
						$url
					else ()
		let $invalid_element_reference :=
			for $x in $envDom/@xlink:href
			return
				if (starts-with($x, '#')) then
					if (not(substring($x, 2) = $gml_ids)) then
						$x
					else ()
				else ()

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string}) 
			else if (count($envDom) > 1) then 
				local:addMessage('TR.wrongMultiplicity',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'element': $property_string, 'multiplicity': 1, 'count':count($envDom)})
			else if (count($invalid_urls) > 0) then
				local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
			else if (count($invalid_element_reference) > 0) then
				local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
			else ()

let $messages:= ($messages_ma, $messages_mfo)

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.wrongMultiplicity"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDfaa3ae8e-d42e-40eb-83a1-026adb938e5d">
									<label>mr-ia.b.11: commodityOfInterest</label>
									<description><![CDATA[Verify that any feature reference in an association role is publicly accessible via HTTP, i.e. inspect all relevant properties. If a reference (@xlink:href) has a value that starts with "#", verify that an element with a `gml:id` attribute with the referenced identifier exists in the same document. If the reference starts with "http", verify that a HTTP GET request to the URI retrieves an XML document.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-mr/master/mr-ia/features" target="_blank">Abstract Test Case 'Feature references'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_MR_v3.0.pdf">INSPIRE Data Specification on Mineral Resources, A.1.4</a>]]></description>
									<parent ref="EID86c1cc97-45e9-4994-a645-b625573e358a"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $features_selected_mo := $features[self::mr-core:MineralOccurrence]
let $features_selected_mf:= $features[self::ge:MappedFeature]
let $gml_ids := $features//@gml:id
let $property_string := 'commodityOfInterest'
let $messages_mo :=		
	for $feature_o in $features_selected_mo/mr-core:oreAmount
		let $messages_en :=
			for $feature in $feature_o/mr-core:Endowment/mr-core:measureDetails/mr-core:CommodityMeasure

				let $envDom := $feature/mr-core:commodityOfInterest
				let $urls := 
					for $x in $envDom/@xlink:href
						return
						if (starts-with($x, '#')) then
							()
						else
							$x
				let $map := local:check-resource-uris($urls, 30, true())
				let $invalid_urls :=
					for $href in $urls
						let $url := string($href)
						let $validuri := map:get($map, $url)
						return
							if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
								$url
							else ()
				let $invalid_element_reference :=
					for $x in $envDom/@xlink:href
					return
						if (starts-with($x, '#')) then
							if (not(substring($x, 2) = $gml_ids)) then
								$x
							else ()
						else ()

				return
					if (not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
					else if (count($invalid_urls) > 0) then
						local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
					else if (count($invalid_element_reference) > 0) then
						local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
					else ()

		let $messages_rese :=
			for $feature in $feature_o/mr-core:Reserve/mr-core:measureDetails/mr-core:CommodityMeasure

				let $envDom := $feature/mr-core:commodityOfInterest
				let $urls := 
					for $x in $envDom/@xlink:href
						return
						if (starts-with($x, '#')) then
							()
						else
							$x
				let $map := local:check-resource-uris($urls, 30, true())
				let $invalid_urls :=
					for $href in $urls
						let $url := string($href)
						let $validuri := map:get($map, $url)
						return
							if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
								$url
							else ()
				let $invalid_element_reference :=
					for $x in $envDom/@xlink:href
					return
						if (starts-with($x, '#')) then
							if (not(substring($x, 2) = $gml_ids)) then
								$x
							else ()
						else ()

				return
					if (not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
					else if (count($invalid_urls) > 0) then
						local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
					else if (count($invalid_element_reference) > 0) then
						local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
					else ()

		let $messages_reso :=
			for $feature in $feature_o/mr-core:Resource/mr-core:measureDetails/mr-core:CommodityMeasure

				let $envDom := $feature/mr-core:commodityOfInterest
				let $urls := 
					for $x in $envDom/@xlink:href
						return
						if (starts-with($x, '#')) then
							()
						else
							$x
				let $map := local:check-resource-uris($urls, 30, true())
				let $invalid_urls :=
					for $href in $urls
						let $url := string($href)
						let $validuri := map:get($map, $url)
						return
							if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
								$url
							else ()
				let $invalid_element_reference :=
					for $x in $envDom/@xlink:href
					return
						if (starts-with($x, '#')) then
							if (not(substring($x, 2) = $gml_ids)) then
								$x
							else ()
						else ()

				return
					if (not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
					else if (count($invalid_urls) > 0) then
						local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
					else if (count($invalid_element_reference) > 0) then
						local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
					else ()
		return ($messages_en, $messages_rese, $messages_reso)



let $messages_mf :=		
	for $feature_s in $features_selected_mf/ge:specification/mr-core:MineralOccurrence/mr-core:oreAmount
		let $messages_en :=
			for $feature in $feature_s/mr-core:Endowment/mr-core:measureDetails/mr-core:CommodityMeasure

				let $envDom := $feature/mr-core:commodityOfInterest
				let $urls := 
					for $x in $envDom/@xlink:href
						return
						if (starts-with($x, '#')) then
							()
						else
							$x
				let $map := local:check-resource-uris($urls, 30, true())
				let $invalid_urls :=
					for $href in $urls
						let $url := string($href)
						let $validuri := map:get($map, $url)
						return
							if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
								$url
							else ()
				let $invalid_element_reference :=
					for $x in $envDom/@xlink:href
					return
						if (starts-with($x, '#')) then
							if (not(substring($x, 2) = $gml_ids)) then
								$x
							else ()
						else ()

				return
					if (not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../../../..), 'featureType':local-name($feature/../../../../../..), 'gmlid': string($feature/../../../../../../@*:id), 'property': $property_string})
					else if (count($invalid_urls) > 0) then
						local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../../../../../..), 'featureType':local-name($feature/../../../../../..), 'gmlid': string($feature/../../../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
					else if (count($invalid_element_reference) > 0) then
						local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../../../../../..), 'featureType':local-name($feature/../../../../../..), 'gmlid': string($feature/../../../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
					else ()

		let $messages_rese :=
			for $feature in $feature_s/mr-core:Reserve/mr-core:measureDetails/mr-core:CommodityMeasure

				let $envDom := $feature/mr-core:commodityOfInterest
				let $urls := 
					for $x in $envDom/@xlink:href
						return
						if (starts-with($x, '#')) then
							()
						else
							$x
				let $map := local:check-resource-uris($urls, 30, true())
				let $invalid_urls :=
					for $href in $urls
						let $url := string($href)
						let $validuri := map:get($map, $url)
						return
							if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
								$url
							else ()
				let $invalid_element_reference :=
					for $x in $envDom/@xlink:href
					return
						if (starts-with($x, '#')) then
							if (not(substring($x, 2) = $gml_ids)) then
								$x
							else ()
						else ()

				return
					if (not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../../../..), 'featureType':local-name($feature/../../../../../..), 'gmlid': string($feature/../../../../../../@*:id), 'property': $property_string})
					else if (count($invalid_urls) > 0) then
						local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../../../../../..), 'featureType':local-name($feature/../../../../../..), 'gmlid': string($feature/../../../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
					else if (count($invalid_element_reference) > 0) then
						local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../../../../../..), 'featureType':local-name($feature/../../../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
					else ()

		let $messages_reso :=
			for $feature in $feature_s/mr-core:Resource/mr-core:measureDetails/mr-core:CommodityMeasure

				let $envDom := $feature/mr-core:commodityOfInterest
				let $urls := 
					for $x in $envDom/@xlink:href
						return
						if (starts-with($x, '#')) then
							()
						else
							$x
				let $map := local:check-resource-uris($urls, 30, true())
				let $invalid_urls :=
					for $href in $urls
						let $url := string($href)
						let $validuri := map:get($map, $url)
						return
							if ($validuri = 'notHTTP' or starts-with($validuri, 'EXCEPTION') or $validuri = 'idNotFound' or matches($validuri,'^\d{3}$')) then
								$url
							else ()
				let $invalid_element_reference :=
					for $x in $envDom/@xlink:href
					return
						if (starts-with($x, '#')) then
							if (not(substring($x, 2) = $gml_ids)) then
								$x
							else ()
						else ()

				return
					if (not(exists($envDom))) then
						local:addMessage('TR.missingElement',  map {'filename': local:filename($feature/../../../../../..), 'featureType':local-name($feature/../../../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
					else if (count($invalid_urls) > 0) then
						local:addMessage('TR.brokenLink', map {'filename': local:filename($feature/../../../../../..), 'featureType':local-name($feature/../../../../../..), 'gmlid': string($feature/../../../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_urls, ',')})
					else if (count($invalid_element_reference) > 0) then
						local:addMessage('TR.missingReferencedElement', map {'filename': local:filename($feature/../../../../../..), 'featureType':local-name($feature/../../../../../..), 'gmlid': string($feature/../../../../../../@*:id), 'property': $property_string, 'value': string-join($invalid_element_reference, ',')})
					else ()
		return ($messages_en, $messages_rese, $messages_reso)


let $messages:= ($messages_mo, $messages_mf)

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElement"/>
										<translationTemplate ref="TR.brokenLink"/>
										<translationTemplate ref="TR.missingReferencedElement"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>