<ExecutableTestSuite id="EID61070ae8-13cb-4303-a340-72c8b877b00a" xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data/data-consistency</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Data consistency, General requirements</label>
	<description><![CDATA[This test suite examines a data set against the basic requirements related to the consistency of the data. This test suite only examines requirements that are not specific to a data theme. Additional test cases will be defined per data theme, where needed.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b>]]></description>
	<reference>../../inspire-bsxets.xq</reference>
	<version>0.2.2</version>
	<author>interactive instruments GmbH</author>
	<creationDate>2016-08-15T00:00:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2021-10-29T09:45:00Z</lastUpdateDate>
	<tags>
		<tag ref="EIDaeed5629-2c33-4fa6-aa66-f59418abaa70"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
	  <testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID545f9e49-009b-4114-9333-7ca26413b5d4"/>
	</dependencies>
	<testModules>
	  <TestModule id="EIDcdde50c8-7645-4a51-9a91-8d7fd6c0ff0a">
		 <label>IGNORE</label>
		 <description>IGNORE</description>
		 <parent ref="EID61070ae8-13cb-4303-a340-72c8b877b00a"/>
		 <testCases>
			<TestCase id="EID34e2a27a-e57e-486a-a612-bfa89c963116">
			  <label>Version consistency</label>
			  <description>Verify that the information about a spatial object is consistent over time.</description>
			  <parent ref="EIDcdde50c8-7645-4a51-9a91-8d7fd6c0ff0a"/>
			  <testSteps>
				<TestStep id="EIDd42be9c8-dd7a-49f2-bb0e-fc2650d6ac5d">
					<label>IGNORE</label>
					<description>IGNORE</description>
					<parent ref="EID34e2a27a-e57e-486a-a612-bfa89c963116"/>
					<statementForExecution>not applicable</statementForExecution>
					<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
					<testAssertions>
					  <TestAssertion id="EIDc88de361-bf4d-4fdb-8cc0-68d1a62e5eae">
						 <label>dc.a.1: Version lifespan plausible</label>
						 <description><![CDATA[Verify that all endLifespanVersion values are from the allowed range. For all features verify that either
<ul>						 
<li>beginLifespanVersion or endLifespanVersion are missing or nil or</li>
<Li>endLifespanVersion is not before the value of beginLifespanVersion.</li>
</ul>]]></description>
						 <parent ref="EIDd42be9c8-dd7a-49f2-bb0e-fc2650d6ac5d"/>
						 <expectedResult>NOT_APPLICABLE</expectedResult>
						 <expression>
let $featuresWithErrors := $features[(*[self::*:beginLifespanVersion and not(@xsi:nil='true')] and *[self::*:endLifespanVersion and not(@xsi:nil='true')] and xs:dateTime(*:beginLifespanVersion[1]/text()) > xs:dateTime(*:endLifespanVersion[1]/text()))][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $begin := $feature/*[self::*:beginLifespanVersion][1]/text()
   let $end := $feature/*[self::*:endLifespanVersion][1]/text()
   return
     local:addMessage('TR.endTooEarly', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'begin': $begin, 'end': $end, 'propertyBegin': 'beginLifespanVersion', 'propertyEnd': 'endLifespanVersion' }))
									</expression>
						 <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.endTooEarly"/>
							<translationTemplate ref="TR.eaturesWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					  <TestAssertion id="EIDeaa9832a-a372-484a-b25b-c67e1c808e0f">
						 <label>dc.a.2: Unique identifier persistency</label>
						 <description><![CDATA[Verify that identifiers are persistent for a spatial object, i.e. inspect the documentation of the spatial data set and verify that rules for identifiers are specified in a way that the identifiers (namespace and localId) do not change during the life-cycle of a spatial object. If older versions of the data set are available compare the features and verify that the namespace and localId part of the INSPIRE identifiers have not changed between the versions.<br/><br/>]]></description>
						 <parent ref="EID871889b6-5664-4498-8762-849fb77a084f"/>
						 <expectedResult>NOT_APPLICABLE</expectedResult>
						 <expression>NOT_APPLICABLE</expression>
						 <testItemType ref="EIDb48eeaa3-6a74-414a-879c-1dc708017e11"/>
					  </TestAssertion>
					  <TestAssertion id="EID2b8243c8-e2e7-402d-97f1-86110b70e55e">
						 <label>dc.a.3: Spatial object type stable</label>
						 <description><![CDATA[Verify that the type of a spatial object is unchanged for different versions, i.e. inspect the documentation of the spatial data set and verify that rules for the mapping to the INSPIRE application schema are specified in a way that the spatial object type do not change during its life-cycle. If older versions of the data set are available compare the features and verify that the types of the features has not changed between the versions.<br/><br/>]]></description>
						 <parent ref="EID871889b6-5664-4498-8762-849fb77a084f"/>
						 <expectedResult>NOT_APPLICABLE</expectedResult>
						 <expression>NOT_APPLICABLE</expression>
						 <testItemType ref="EIDb48eeaa3-6a74-414a-879c-1dc708017e11"/>
					  </TestAssertion>
					</testAssertions>
				 </TestStep>
			  </testSteps>
			</TestCase>
			<TestCase id="EID4ca5564d-2643-4ee3-9ec9-bf97043d3fa0">
			  <label>Temporal consistency</label>
			  <description>Verify that the temporal validity of the real-world entity is consistent.</description>
			  <parent ref="EID073b8871-8ce0-4ba8-9b53-f1aec2019d3b"/>
			  <testSteps>
				<TestStep id="EID72a3ee32-8582-4f67-80a0-435f636f8cf3">
					<label>IGNORE</label>
					<description>IGNORE</description>
					<parent ref="EID4ca5564d-2643-4ee3-9ec9-bf97043d3fa0"/>
					<statementForExecution>not applicable</statementForExecution>
					<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
					<testAssertions>
					  <TestAssertion id="EIDcefa9614-ce69-43d4-bed5-7758e7d890a9">
						 <label>dc.b.1: Valid time plausible</label>
						 <description><![CDATA[For all features verify that either
<ul>
<li>validFrom or validTo are missing or nil or</li>
<li>validTo is not before the value of validFrom.</li></ul>]]></description>
						 <parent ref="EID72a3ee32-8582-4f67-80a0-435f636f8cf3"/>
						 <expectedResult>NOT_APPLICABLE</expectedResult>
						 <expression>
let $featuresWithErrors :=
	for $feature in $features
		let $validFrom := 
			if(not(contains($feature/*[local-name()='validFrom']/text(), 'T'))) then
				xs:dateTime(concat($feature/*[local-name()='validFrom']/text(), 'T00:00:00'))
			else		
				xs:dateTime($feature/*[local-name()='validFrom']/text())

		let $validTo := 
			if(not(contains($feature/*[local-name()='validTo']/text(), 'T'))) then
				xs:dateTime(concat($feature/*[local-name()='validTo']/text(), 'T00:00:00'))
			else 
				xs:dateTime($feature/*[local-name()='validTo']/text())

		let $featureWithErrors := $feature[*[self::*:validFrom and not(@xsi:nil='true')] and *[self::*:validTo and not(@xsi:nil='true')] and $validFrom >= $validTo][position() le $limitErrors]
		return $featureWithErrors
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $begin := $feature/*[self::*:validFrom][1]/text()
   let $end := $feature/*[self::*:validTo][1]/text()
   return
     local:addMessage('TR.endTooEarly', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'begin': $begin, 'end': $end, 'propertyBegin': 'validFrom', 'propertyEnd': 'validTo' }))
									</expression>
						 <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.endTooEarly"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					</testAssertions>
				 </TestStep>
			  </testSteps>
			</TestCase>
		 </testCases>
	  </TestModule>
	</testModules>
</ExecutableTestSuite>
