<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID09820daf-62b2-4fa3-a95f-56a0d2b7c4d8" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data/schemas</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: INSPIRE GML application schemas, General requirements</label>
	<description><![CDATA[This test suite examines GML documents against basic requirements for the GML encoding for spatial data sets in INSPIRE. This only covers application-schema-independent, generic requirements. Requirements related to specific application schemas are part of conformance classes with a dependency on this conformance class.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b>]]></description>
	<reference>../../inspire-bsxets.xq</reference>
	<version>0.2.8</version>
	<author>interactive instruments GmbH</author>
	<creationDate>2016-08-15T00:00:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2022-03-28T09:45:00Z</lastUpdateDate>
	<tags>
		<tag ref="EIDaeed5629-2c33-4fa6-aa66-f59418abaa70"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID545f9e49-009b-4114-9333-7ca26413b5d4"/>
	</dependencies>
	<testModules>
		<TestModule id="EID073b8871-8ce0-4ba8-9b53-f1aec2019d3b">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EID09820daf-62b2-4fa3-a95f-56a0d2b7c4d8"/>
			<testCases>
				<TestCase id="EID2c6fe882-7c53-47f2-b4c4-66b15c248be4">
					<label>Validation against declared schema</label>
					<description>Verify that all XML documents validate against the XML schema(s) declared in the schemaLocation attribute.</description>
					<parent ref="EID073b8871-8ce0-4ba8-9b53-f1aec2019d3b"/>
					<testSteps>
						<TestStep id="EID77f090cf-48ef-46f3-901b-6ef2db4a1599">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID2c6fe882-7c53-47f2-b4c4-66b15c248be4"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID0eaac0f2-9ab3-44ab-9f02-4ee0a1587d14">
									<label>gmlas.b.2: validate XML documents against declared schema</label>
									<description><![CDATA[Validate each document against the schema(s) specified in the xsi:schemaLocation attribute using strict XML schema validation.<br/><br/>]]></description>
									<parent ref="EID77f090cf-48ef-46f3-901b-6ef2db4a1599"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $errors := (for $file in $db
 return
 try { 
  let $root := $file/element()
  let $logentry := local:log('Validating ' || local:filename($root))
  let $start := prof:current-ms()
  let $query := "declare variable $file external; validate:xsd-info($file)"
  let $messages := xquery:eval($query, map{ 'file': $file }, map{ 'timeout': 60 })
  (:let $messages := validate:xsd-info($file):)
  let $duration := prof:current-ms()-$start
  let $errors := count($messages)
  let $logentry := local:log('Duration: ' || $duration || ' ms. Errors: ' || $errors || '.')
  return
   if ($errors&gt;0) then
    (local:addMessage('TR.invalidSchema', map { 'filename': local:filename($root), 'count': string($errors) }),
     for $message in $messages return local:addMessage('TR.xmlSchemaError', map { 'filename': local:filename($root), 'error': $message }))
   else ()
 } catch * 
 { 
	let $logerror := local:log('Exception: ' || $err:description)
   return local:addMessage('TR.timeoutFileOperation', map { 'filename': local:filename($file/element()), 'description': $err:description })
 }
 )[position() le $limitErrors]						 
return
(if ($errors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.filesWithErrors', count($errors[@ref eq 'TR.invalidSchema'])),
 $errors[position() le $limitErrors])
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.invalidSchema"/>
										<translationTemplate ref="TR.filesWithErrors"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
