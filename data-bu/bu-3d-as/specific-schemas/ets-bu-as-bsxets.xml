<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID45e5267c-ab6e-4bb7-a6b3-ee7b7ec5e053" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-bu/bu-as</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Application schema, BuildingsBase (for Buildings3D)</label>
	<description><![CDATA[This test suite examines requirements associated with the application schema. It is dedicated only to the 3D Building application schema.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/inspire-eu-validation/community/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as" target="_blank">Conformance Class 'Application Schema, Buildings'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-gml" target="_blank">Conformance Class 'GML application schemas, Buildings'</a></li></ul>]]></description>
	<reference>../../../inspire-noggeo-bsxets.xq</reference>
	<version>0.1.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2020-09-30T14:45:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2020-09-30T14:45:00Z</lastUpdateDate>
	<tags>
		<tag ref="EID6242ed25-8553-4836-9814-ce8dcc188501"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID94fdd1a9-68bf-4a0a-aa89-76659436a676"/>
	</dependencies>
	<testModules>
		<TestModule id="EID0a554ae7-72af-4b5e-94a3-07fc78a24cee">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EID45e5267c-ab6e-4bb7-a6b3-ee7b7ec5e053"/>
			<testCases>
				<TestCase id="EID0d31c489-3f31-43b5-962e-ad8147daace8">
					<label>Code lists</label>
					<description>Verify that code lists extensions can be accessed.</description>
					<parent ref="EID0a554ae7-72af-4b5e-94a3-07fc78a24cee"/>
					<testSteps>
						<TestStep id="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID0d31c489-3f31-43b5-962e-ad8147daace8"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID90c8509d-8db6-4835-b188-9498a310a105">
									<label>bu-as.a.1: conditionOfConstruction</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#conditionOfConstruction'> conditionOfConstruction</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue1'>valid value</a>. If the check fails report disallowedCodeListValue.
<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ConditionOfConstructionValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ConditionOfConstructionValue/ConditionOfConstructionValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'conditionOfConstructionValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/bu-base:conditionOfConstruction

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features
		let $envDom := $feature/bu-base:conditionOfConstruction

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDc2d49d56-b7d9-4436-a8d7-d1aa38a27869">
									<label>bu-as.a.2: elevationReference</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#elevationReference'> elevationReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'elevationReferenceValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:elevation/bu-base:Elevation
		let $envDom := $feature/bu-base:elevationReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:elevation/bu-base:Elevation
		let $envDom := $feature/bu-base:elevationReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.missingAttributeBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID4d06333f-b596-4d7c-8fd6-4e70cb41f79e">
									<label>bu-as.a.3: heightReference</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#heightReference'> heightReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'heightReferenceValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:heightReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:heightReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDdda76bab-d4b6-45cc-8a2a-e10f30edb467">
									<label>bu-as.a.4: lowReference</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#lowReference'> lowReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'lowReferenceValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:lowReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:lowReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDb8792dda-be96-4d5e-9ad6-f98c9a51a96a">
									<label>bu-as.a.5: verticalGeometryReference</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#verticalGeometryReference'> verticalGeometryReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'verticalGeometryReferenceValue'
let $features_selected1 := $features[self::bu-core2d:Building]
let $features_selected2 := $features[self::bu-core2d:BuildingPart]
let $features_selected3 := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages1 := 

	for $feature in $features_selected1/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()



let $messages2 := 

	for $feature in $features_selected2/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages2_parts := 
	let $this_features :=
		for $this_feature in $features_selected1
			return
				if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $messages3 := 

	for $feature in $features_selected3/bu-core3d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3_parts := 
	let $this_features :=
		for $this_feature in $features_selected3
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $combined_messages := ($messages1, $messages2, $messages2_parts, $messages3, $messages3_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.missingAttributeBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDa2b5b857-1fce-4927-8ba9-0b54479204a8">
									<label>bu-as.a.6: verticalGeometryReference3DBottom</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#verticalGeometryReference3DBottom'>verticalGeometryReference3DBottom</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'verticalGeometryReference3DBottomValue'
let $features_selected := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages3DLoD1 := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD1_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom 

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/..//..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD2 := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD2/bu-core3d:BuildingGeometry3DLoD2
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD2_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD2/bu-core3d:BuildingGeometry3DLoD2
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom 

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD3 := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD3/bu-core3d:BuildingGeometry3DLoD
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD3_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD3/bu-core3d:BuildingGeometry3DLoD
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom 

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD4 := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD4/bu-core3d:BuildingGeometry3DLoD
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD4_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD4/bu-core3d:BuildingGeometry3DLoD
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom 

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages3DLoD1, $messages3DLoD1_parts, $messages3DLoD2, $messages3DLoD2_parts, $messages3DLoD3, $messages3DLoD3_parts, $messages3DLoD4, $messages3DLoD4_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID202668e0-2a8c-47c4-be62-fd12597ed6e9">
									<label>bu-as.a.7: verticalGeometryReference3DTop</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#verticalGeometryReference3DTop'>verticalGeometryReference3DTop</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'verticalGeometryReference3DTopValue'
let $features_selected := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DTop

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DTop

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID742f7eab-1185-4c53-a68e-015a629f313d">
									<label>bu-as.a.8: status</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#status'>status</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue3'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/HeightStatusValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/HeightStatusValue/HeightStatusValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'statusValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:status

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:status

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID4dbd1de2-a9e0-41d8-9ad3-f8336081c9bb">
									<label>bu-as.a.9: horizontalGeometryReference</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#horizontalGeometryReference'> horizontalGeometryReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/HorizontalGeometryReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/HorizontalGeometryReferenceValue/HorizontalGeometryReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'horizontalGeometryReferenceValue'
let $features_selected1 := $features[self::bu-core2d:Building]
let $features_selected2 := $features[self::bu-core2d:BuildingPart]
let $features_selected3 := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]
let $features_selected4 := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages1 := 

	for $feature in $features_selected1/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()



let $messages2 := 

	for $feature in $features_selected2/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages2_parts := 
	let $this_features :=
		for $this_feature in $features_selected1
			return
				if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $messages3 := 

	for $feature in $features_selected3/bu-core3d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3_parts := 
	let $this_features :=
		for $this_feature in $features_selected3
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages4_3DLoD1 := 

	for $feature in $features_selected4/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:horizontalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages4_3DLoD1_parts := 
	let $this_features :=
		for $this_feature in $features_selected4
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:horizontalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $messages4_3DLoD2 := 

	for $feature in $features_selected4/bu-core3d:geometry3DLoD2/bu-core3d:BuildingGeometry3DLoD2
		let $envDom := $feature/bu-core3d:horizontalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages4_3DLoD2_parts := 
	let $this_features :=
		for $this_feature in $features_selected4
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD2/bu-core3d:BuildingGeometry3DLoD2
		let $envDom := $feature/bu-core3d:horizontalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $combined_messages := ($messages1, $messages2, $messages2_parts, $messages3, $messages3_parts, $messages4_3DLoD1, $messages4_3DLoD1_parts, $messages4_3DLoD2, $messages4_3DLoD2_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.missingAttributeBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDf9fe3c99-b25b-4e2a-8b0c-bbbfafdfa759">
									<label>bu-as.a.10: buildingNature</label>
									<description><![CDATA[Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#buildingNature'> buildingNature</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#preDefinedValue'>pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule. If the check fails report reviewCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/BuildingNatureValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/BuildingNatureValue/BuildingNatureValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'BuildingNatureValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/bu-base:buildingNature
		return
		(for $link in distinct-values($envDom/@xlink:href)
		return
			if ( not($link = $valid_href)) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($link), 'codelist': $codelist, 'count': count($feature/bu-base:buildingNature/@xlink:href = $envDom/@xlink:href)})
			else ()
		)

let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features
		let $envDom := $feature/bu-base:buildingNature
		return
		(for $link in distinct-values($envDom/@xlink:href)
		return
			if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist, 'count': count($feature/bu-base:buildingNature/@xlink:href = $envDom/@xlink:href)})
			else ()
		)

let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'PASSED_MANUAL' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID18e34ba6-38da-4a3b-8a37-903f9fe4533a">
									<label>bu-as.a.11: currentUse</label>
									<description><![CDATA[Check that all the <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#currentUse'>currentUse</a> elements has a xlink:href attribute pointing to a <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#predefinedValue1'>pre-defined value</a>. If the check fails a manual check will be required asking to review the codelist definition in order to verify that any extensions do not overlap with the codelists that are defined in Annexes II, III and IV of the Implementing Rule. In particular, for the 'narrower' codelists the extended values shall refer to a parent value defined by the Implementing Rule. If the check fails report reviewCodeListValue.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (1): For the exchange and classification of spatial objects from data sets meeting the conditions laid down  in  Article  4  of  Directive  2007/2/EC,  Member  States  shall  use  the  spatial  object  types  and associated data types, enumerations and code lists that are defined in Annexes II, III and IV for the themes the data sets relate to.</li>
<li>IR Requirement Article 4 (3): The enumerations and code lists used in attributes or association roles of spatial object types or data types shall comply with the definitions and include the values set out in Annex II. The enumeration and code list values are uniquely identified by language-neutral mnemonic codes for computers. The values may also include a language-specific name to be used for human interaction.</li>
<li>IR Requirement Article 6 (1): Code lists shall be of one of the following types, as specified in the Annexes:<ol style="list-style-type:lower-alpha"><li>code lists whose allowed values comprise only the values specifiedin this Regulation;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and narrower values defined by data providers;</li>
<li>code  lists  whose  allowed  values  comprise  the  values  specified  in  this  Regulation  and additional values at any level defined by data providers;</li>
<li>code lists, whose allowed values comprise any values defined by data providers.</li>
</ol>For the purposes of points (b), (c) and (d), in addition to the allowed values, data providers may use the values specified inthe relevant INSPIRE Technical Guidance document available on the INSPIRE web site of the Joint Research Centre.
</li>
<li>IR Requirement Article 6 (2): Code lists may be hierarchical. Values of hierarchical code lists may have a more generic parent value.  Where  the  valid  values  of  a  hierarchical  code  list  are  specified  in  a  table  in  this Regulation, the parent values are listed in the last column.</li>
<li>IR Requirement Article 6 (3): Where,  for  anattribute  whose  type  is  a  code  list  as  referred  to  in  points  (b),  (c)  or  (d)  of paragraph 1, a data provider provides a value that is not specified in this Regulation, that value and its definition shall be made available in a register</li>
<li>IR Requirement Article 6 (4): Attributes or association roles of spatial object types or data types whose type is a code list may only take values that are allowed according to the specification of the code list.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.6</a>]]></description>
									<parent ref="EIDb4a61f0f-39f8-4584-89bf-ea95421798fa"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/CurrentUseValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/CurrentUseValue/CurrentUseValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/*:parents/*:parent/@id
let $property_string := 'CurrentUseValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:currentUse/bu-base:CurrentUse
		let $envDom := $feature/bu-base:currentUse

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'count': count($feature/bu-base:currentUse/@xlink:href = $envDom/@xlink:href)}) 
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:currentUse/bu-base:CurrentUse
		let $envDom := $feature/bu-base:currentUse

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'count': count($feature/bu-base:currentUse/@xlink:href = $envDom/@xlink:href)}) 
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages and not($combined_messages/@ref = ('TR.manual.reviewCodeListValue'))) then 'FAILED' 
else if($combined_messages/@ref = ('TR.manual.reviewCodeListValue') and not($combined_messages/@ref != ('TR.manual.reviewCodeListValue'))) then 'PASSED_MANUAL' 
else if($combined_messages and $combined_messages/@ref != ('TR.manual.reviewCodeListValue')) then 'FAILED' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.missingAttributeBuildings"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EIDae98703b-c3e2-4290-aea3-961ce08de5dc">
					<label>Constraints</label>
					<description>Verify that the features provided in the dataset adhere to the constraints specified in the INSPIRE application schema.</description>
					<parent ref="EID0a554ae7-72af-4b5e-94a3-07fc78a24cee"/>
					<testSteps>
						<TestStep id="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDae98703b-c3e2-4290-aea3-961ce08de5dc"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID9a35a674-4884-45c1-ae48-86c3a1bf2dee">
									<label>bu-as.b.1: percentageSum</label>
									<description><![CDATA[Check that the total of all percentages (<a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints#percentage'>percentage</a> element of the CurrentUse data type) are less or equal to 100. (OCL: "inv: self.percentage.sum()<=100")<br/><br/>
									Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
<br/><br/>Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.7</a>]]></description>
									<parent ref="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_string := 'percentageSum'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

		for $feature in $features_selected
			let $multiplicity_messages:= 
				for $this_feature in $feature/bu-base:currentUse/bu-base:CurrentUse

					let $envDom := $this_feature/bu-base:percentage

					return
						if (not(exists($envDom))) then
							local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
						else if (count($envDom) > 1) then
							local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
						else()
			let $this_features :=
				for $this_feature in $feature
					return
						if (name($this_feature) = 'bu-core3d:Building') then
							$this_feature/bu-base:parts/bu-core3d:BuildingPart
						else if (name($this_feature) = 'bu-core2d:Building') then
							$this_feature/bu-base:parts/bu-core2d:BuildingPart
						else ()
			let $multiplicity_messages_parts:= 
				for $this_feature in $this_features/bu-base:currentUse/bu-base:CurrentUse

					let $envDom := $this_feature/bu-base:percentage

					return
						if (not(exists($envDom))) then
							local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
						else if (count($envDom) > 1) then
							local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
						else()
				let $percentage_messages:=
					let $percentages := for $this_feature in $feature/bu-base:currentUse/bu-base:CurrentUse
							return if ($this_feature/bu-base:percentage castable as xs:double) then
									$this_feature/bu-base:percentage
								else (0)
					let $this_features_parts :=
						for $this_feature in $feature
							return
								if (name($this_feature) = 'bu-core3d:Building') then
									$this_feature/bu-base:parts/bu-core3d:BuildingPart
								else if (name($this_feature) = 'bu-core2d:Building') then
									$this_feature/bu-base:parts/bu-core2d:BuildingPart
								else ()
					let $percentages_parts:= for $this_feature in $this_features_parts/bu-base:currentUse/bu-base:CurrentUse
							return if ($this_feature/bu-base:percentage castable as xs:double) then
									$this_feature/bu-base:percentage
								else (0)
					return if ((sum($percentages)+ sum($percentages_parts)) > 100) then
							local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'constraint': 'the total of all percentages are less or equal to 100.', 'additionalInfo': ''})
						else()
			return if ($multiplicity_messages) then
			 		$multiplicity_messages
			 	else if ($multiplicity_messages_parts) then
			 		$multiplicity_messages_parts
			 	else if ($percentage_messages) then
			 		$percentage_messages
			 	else()

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID4ecd481e-023d-47f4-b908-cc4a7cad9c87">
									<label>bu-as.b.2: atLeastOneEvent</label>
									<description><![CDATA[ Check that at least one of the attributes <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints#beginning'>beginning</a>, <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints#end'>end</a> or <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints#anyPoint'>anyPoint</a> is supplied. (OCL: "inv: dateOfEvent->notEmpty()").<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.7</a>]]></description>
									<parent ref="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_string := 'atLeastOneEvent'
let $property_stringb := 'beginning'
let $property_stringe := 'end'
let $property_stringa := 'anyPoint'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messagesdoc := 

	for $feature in $features_selected/bu-base:dateOfConstruction/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint
		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if ((not(exists($envDomb)) or $envDomb = '') and (not(exists($envDome)) or $envDome = '') and (not(exists($envDoma)) or $envDoma = '')) then
							local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'At least one of the attributes beginning, end or anyPoint is supplied', 'additionalInfo': ''})
			else()


let $messagesdoc_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:dateOfConstruction/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint

		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if ((not(exists($envDomb)) or $envDomb = '') and (not(exists($envDome)) or $envDome = '') and (not(exists($envDoma)) or $envDoma = '')) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'At least one of the attributes beginning, end or anyPoint is supplied', 'additionalInfo': ''})
			else()

let $messagesdod := 

	for $feature in $features_selected/bu-base:dateOfDemolition/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint
		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if ((not(exists($envDomb)) or $envDomb = '') and (not(exists($envDome)) or $envDome = '') and (not(exists($envDoma)) or $envDoma = '')) then
							local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'At least one of the attributes beginning, end or anyPoint is supplied', 'additionalInfo': ''})
			else()


let $messagesdod_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:dateOfDemolition/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint

		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if ((not(exists($envDomb)) or $envDomb = '') and (not(exists($envDome)) or $envDome = '') and (not(exists($envDoma)) or $envDoma = '')) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'At least one of the attributes beginning, end or anyPoint is supplied', 'additionalInfo': ''})
			else()


let $messagesdor := 

	for $feature in $features_selected/bu-base:dateOfRenovation/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint
		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if ((not(exists($envDomb)) or $envDomb = '') and (not(exists($envDome)) or $envDome = '') and (not(exists($envDoma)) or $envDoma = '')) then
							local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'At least one of the attributes beginning, end or anyPoint is supplied', 'additionalInfo': ''})
			else()


let $messagesdor_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:dateOfRenovation/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint

		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if ((not(exists($envDomb)) or $envDomb = '') and (not(exists($envDome)) or $envDome = '') and (not(exists($envDoma)) or $envDoma = '')) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'At least one of the attributes beginning, end or anyPoint is supplied', 'additionalInfo': ''})
			else()



let $combined_messages := ($messagesdoc, $messagesdoc_parts, $messagesdod, $messagesdod_parts, $messagesdor, $messagesdor_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID46320def-f18e-40f3-a736-e9f1d05ec7bc">
									<label>bu-as.b.3: beginning is before anyPoint is before end</label>
									<description><![CDATA[ Check that, if more dates are provided, the beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute. (OCL: "inv: beginning <= anyPoint and anyPoint <= end and beginning <= end)").<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.7</a>]]></description>
									<parent ref="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_string := 'beginning is before anyPoint is before end'
let $property_stringb := 'begin'
let $property_stringe := 'end'
let $property_stringa := 'anyPoint'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]


let $messagesdoc := 

	for $feature in $features_selected/bu-base:dateOfConstruction/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint
		let $dateb := if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:beginning)
					else if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:beginning), xs:time("00:00:00Z"))
					else()
		let $datee := if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:end)
					else if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:end), xs:time("00:00:00Z"))
					else()
		let $datea := if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:anyPoint)
					else if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:anyPoint), xs:time("00:00:00Z"))
					else()
		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if (exists($envDomb) and exists($envDoma) and exists($envDome) and not(empty($dateb) or empty($datea) or empty($datee))) then
				(if (($dateb > $datee) or ($dateb > $datea) or ($datea > $datee)) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDoma) and not(empty($dateb) or empty($datea))) then
				(if ($dateb > $datea) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)	
			else if (exists($envDoma) and exists($envDome) and not(empty($datea) or empty($datee))) then
				(if ($datea > $datee) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDome) and not(empty($dateb) or empty($datee))) then
				( if ($dateb > $datee) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
					else()
				)
			else()


let $messagesdoc_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:dateOfConstruction/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint
		let $dateb := if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:beginning)
					else if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:beginning), xs:time("00:00:00Z"))
					else()
		let $datee := if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:end)
					else if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:end), xs:time("00:00:00Z"))
					else()
		let $datea := if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:anyPoint)
					else if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:anyPoint), xs:time("00:00:00Z"))
					else()

		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if (exists($envDomb) and exists($envDoma) and exists($envDome) and not(empty($dateb) or empty($datea) or empty($datee))) then
				(if (($dateb > $datee) or ($dateb > $datea) or ($datea > $datee)) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDoma) and not(empty($dateb) or empty($datea))) then
				(if ($dateb > $datea) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)	
			else if (exists($envDoma) and exists($envDome) and not(empty($datea) or empty($datee))) then
				(if ($datea > $datee) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDome) and not(empty($dateb) or empty($datee))) then
				( if ($dateb > $datee) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
					else()
				)
			else()

let $messagesdod := 

	for $feature in $features_selected/bu-base:dateOfDemolition/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint
		let $dateb := if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:beginning)
					else if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:beginning), xs:time("00:00:00Z"))
					else()
		let $datee := if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:end)
					else if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:end), xs:time("00:00:00Z"))
					else()
		let $datea := if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:anyPoint)
					else if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:anyPoint), xs:time("00:00:00Z"))
					else()
		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if (exists($envDomb) and exists($envDoma) and exists($envDome) and not(empty($dateb) or empty($datea) or empty($datee))) then
				(if (($dateb > $datee) or ($dateb > $datea) or ($datea > $datee)) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDoma) and not(empty($dateb) or empty($datea))) then
				(if ($dateb > $datea) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)	
			else if (exists($envDoma) and exists($envDome) and not(empty($datea) or empty($datee))) then
				(if ($datea > $datee) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDome) and not(empty($dateb) or empty($datee))) then
				( if ($dateb > $datee) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
					else()
				)
			else()


let $messagesdod_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:dateOfDemolition/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint
		let $dateb := if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:beginning)
					else if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:beginning), xs:time("00:00:00Z"))
					else()
		let $datee := if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:end)
					else if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:end), xs:time("00:00:00Z"))
					else()
		let $datea := if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:anyPoint)
					else if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:anyPoint), xs:time("00:00:00Z"))
					else()

		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if (exists($envDomb) and exists($envDoma) and exists($envDome) and not(empty($dateb) or empty($datea) or empty($datee))) then
				(if (($dateb > $datee) or ($dateb > $datea) or ($datea > $datee)) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDoma) and not(empty($dateb) or empty($datea))) then
				(if ($dateb > $datea) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)	
			else if (exists($envDoma) and exists($envDome) and not(empty($datea) or empty($datee))) then
				(if ($datea > $datee) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDome) and not(empty($dateb) or empty($datee))) then
				( if ($dateb > $datee) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
					else()
				)
			else()


let $messagesdor := 

	for $feature in $features_selected/bu-base:dateOfRenovation/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint
		let $dateb := if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:beginning)
					else if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:beginning), xs:time("00:00:00Z"))
					else()
		let $datee := if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:end)
					else if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:end), xs:time("00:00:00Z"))
					else()
		let $datea := if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:anyPoint)
					else if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:anyPoint), xs:time("00:00:00Z"))
					else()
		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if (exists($envDomb) and exists($envDoma) and exists($envDome) and not(empty($dateb) or empty($datea) or empty($datee))) then
				(if (($dateb > $datee) or ($dateb > $datea) or ($datea > $datee)) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDoma) and not(empty($dateb) or empty($datea))) then
				(if ($dateb > $datea) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)	
			else if (exists($envDoma) and exists($envDome) and not(empty($datea) or empty($datee))) then
				(if ($datea > $datee) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDome) and not(empty($dateb) or empty($datee))) then
				( if ($dateb > $datee) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
					else()
				)
			else()


let $messagesdor_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:dateOfRenovation/bu-base:DateOfEvent
		let $envDomb := $feature/bu-base:beginning
		let $envDome := $feature/bu-base:end
		let $envDoma := $feature/bu-base:anyPoint
		let $dateb := if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:beginning)
					else if ((count($feature/bu-base:beginning) = 1) and 
						($feature/bu-base:beginning castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:beginning), xs:time("00:00:00Z"))
					else()
		let $datee := if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:end)
					else if ((count($feature/bu-base:end) = 1) and 
						($feature/bu-base:end castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:end), xs:time("00:00:00Z"))
					else()
		let $datea := if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:dateTime)) then
						xs:dateTime($feature/bu-base:anyPoint)
					else if ((count($feature/bu-base:anyPoint) = 1) and 
						($feature/bu-base:anyPoint castable as xs:date)) then
						dateTime(xs:date($feature/bu-base:anyPoint), xs:time("00:00:00Z"))
					else()

		return
			if (count($envDomb) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringb, 'multiplicity': 1, 'count': count($envDomb)})
			else if (count($envDome) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringe, 'multiplicity': 1, 'count': count($envDome)})
			else if (count($envDoma) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_stringa, 'multiplicity': 1, 'count': count($envDoma)})
			else if (exists($envDomb) and exists($envDoma) and exists($envDome) and not(empty($dateb) or empty($datea) or empty($datee))) then
				(if (($dateb > $datee) or ($dateb > $datea) or ($datea > $datee)) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDoma) and not(empty($dateb) or empty($datea))) then
				(if ($dateb > $datea) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)	
			else if (exists($envDoma) and exists($envDome) and not(empty($datea) or empty($datee))) then
				(if ($datea > $datee) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
				else()
				)
			else if (exists($envDomb) and exists($envDome) and not(empty($dateb) or empty($datee))) then
				( if ($dateb > $datee) then
					local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The beginning attribute shall not be after the anyPoint attribute and the end attribute, and the anyPoint attribute shall not be after the end attribute', 'additionalInfo': ''})
					else()
				)
			else()



let $combined_messages := ($messagesdoc, $messagesdoc_parts, $messagesdod, $messagesdod_parts, $messagesdor, $messagesdor_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)



									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID2e8ecac0-d246-4f06-8c25-198e82605ca8">
									<label>bu-as.b.4: valueUoMIsMetre</label>
									<description><![CDATA[Check that the <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints#value'>value</a> of HeightAboveGround is in meters. (OCL: "inv: self.value.uom.uomSymbol='m'")<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.7</a>]]></description>
									<parent ref="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_string := 'valueUoMIsMetre'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:value

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@uom))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if ($envDom/@uom != 'm') then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The value of HeightAboveGround is in meters', 'additionalInfo': ''})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:value

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not(count($envDom) = count($envDom/@uom))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if ($envDom/@uom != 'm') then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The value of HeightAboveGround is in meters', 'additionalInfo': ''})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.missingAttributeBuildings"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID09237fb6-bb96-4bca-b382-38c8ee0ee20d">
									<label>bu-as.b.5: geometryIsPointOrSurfaceOrMultiSurface</label>
									<description><![CDATA[Check that the <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints#value'>geometry</a> is of type GM_Point or GM_Surface or GM_MultiSurface.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.7</a>]]></description>
									<parent ref="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_string := 'geometry'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/*:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:geometry

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not (exists($envDom/gml:Point) or exists($envDom/gml:Surface) or exists($envDom/gml:MultiSurface))) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The geometry is of type GM_Point or GM_Surface or GM_MultiSurface', 'additionalInfo': ''})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/*:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:geometry

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (not (exists($envDom/gml:Point) or exists($envDom/gml:Surface) or exists($envDom/gml:MultiSurface))) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The geometry is of type GM_Point or GM_Surface or GM_MultiSurface', 'additionalInfo': ''})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)


									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID0dd91426-fde7-4abe-8390-8d7023b1eefa">
									<label>bu-as.b.6: horizontalGeometryEstimatedAccuracy</label>
									<description><![CDATA[Check that the value of <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints#hGEA'>horizontalGeometryEstimatedAccuracy</a> is given in meters. (OCL: "inv: self.horizontalGeometryEstimatedAccuracy.uom.uomSymbol='m'")<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.7</a>]]></description>
									<parent ref="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_string := 'horizontalGeometryEstimatedAccuracy'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/*:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryEstimatedAccuracy

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if ((exists($envDom/@uom) and $envDom/@uom != 'm')) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The value of horizontalGeometryEstimatedAccuracy is given in meters', 'additionalInfo': ''})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/*:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryEstimatedAccuracy

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if ((exists($envDom/@uom) and $envDom/@uom != 'm')) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The value of horizontalGeometryEstimatedAccuracy is given in meters', 'additionalInfo': ''})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)



									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID955f742a-42bd-41f8-b663-4158936f6be1">
									<label>bu-as.b.7: verticalGeometryEstimatedAccuracy</label>
									<description><![CDATA[Check that the value of <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints#vGEA'>verticalGeometryEstimatedAccuracy</a> is given in meters. (OCL: "inv: self.verticalGeometryEstimatedAccuracy.uom.uomSymbol='m')")<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.7</a>]]></description>
									<parent ref="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_string := 'verticalGeometryEstimatedAccuracy'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/*:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryEstimatedAccuracy

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if ((exists($envDom/@uom) and $envDom/@uom != 'm')) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The value of verticalGeometryEstimatedAccuracy is given in meters', 'additionalInfo': ''})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/*:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryEstimatedAccuracy

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if ((exists($envDom/@uom) and $envDom/@uom != 'm')) then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'The value of verticalGeometryEstimatedAccuracy is given in meters', 'additionalInfo': ''})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)


									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID559a7082-bda0-4dab-9fd5-e041d6d762f7">
									<label>bu-as.b.8: referenceGeometry</label>
									<description><![CDATA[Check that for exactly one item of BuildingGeometry, the value of the attribute <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints#referenceGeometry'>referenceGeometry</a> is "true".<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 4 (2): Types for the Exchange and Classification of Spatial Objects. Spatial object types and data types shall comply with the definitions and constraints and include the attributes and association roles set out in the Annexes.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.7</a>]]></description>
									<parent ref="EIDfef50e0b-9c55-4d28-a831-e8ae96b64ec7"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_string := 'referenceGeometry'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/*:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:referenceGeometry

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if ($envDom != 'true') then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'For exactly one item of BuildingGeometry, the value of the attribute referenceGeometry is “true”', 'additionalInfo': ''})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/*:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:referenceGeometry

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if ($envDom != 'true') then
				local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'constraint': 'For exactly one item of BuildingGeometry, the value of the attribute referenceGeometry is “true”', 'additionalInfo': ''})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>